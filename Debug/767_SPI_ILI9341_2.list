
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f40  0800a6c8  0800a6c8  0001a6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c608  0800c608  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c608  0800c608  0001c608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c610  0800c610  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c610  0800c610  0001c610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c614  0800c614  0001c614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001e0  0800c7f8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800c7f8  00020618  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f6b  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040e6  00000000  00000000  000391bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003d2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001202  00000000  00000000  0003e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c211  00000000  00000000  0003fbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee95  00000000  00000000  0006bdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106fd9  00000000  00000000  0008ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007190  00000000  00000000  00191c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00198dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a6b0 	.word	0x0800a6b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a6b0 	.word	0x0800a6b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f002 fda1 	bl	8003194 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000658:	f001 fa70 	bl	8001b3c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f002 ff3b 	bl	80034e8 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000678:	f001 fa60 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001fc 	.word	0x200001fc
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f003 fadf 	bl	8003cb8 <HAL_GPIO_Init>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4bad      	ldr	r3, [pc, #692]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aac      	ldr	r2, [pc, #688]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4baa      	ldr	r3, [pc, #680]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa6      	ldr	r2, [pc, #664]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aa0      	ldr	r2, [pc, #640]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a9a      	ldr	r2, [pc, #616]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b98      	ldr	r3, [pc, #608]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b95      	ldr	r3, [pc, #596]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a94      	ldr	r2, [pc, #592]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b92      	ldr	r3, [pc, #584]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a8e      	ldr	r2, [pc, #568]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a88      	ldr	r2, [pc, #544]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a82      	ldr	r2, [pc, #520]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b80      	ldr	r3, [pc, #512]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	487d      	ldr	r0, [pc, #500]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 80007ec:	f003 fc28 	bl	8004040 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	487b      	ldr	r0, [pc, #492]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80007f8:	f003 fc22 	bl	8004040 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4879      	ldr	r0, [pc, #484]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 8000802:	f003 fc1d 	bl	8004040 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	4877      	ldr	r0, [pc, #476]	; (80009ec <MX_GPIO_Init+0x2dc>)
 800080e:	f003 fc17 	bl	8004040 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, stepMotor_Pin | dirMotor_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2118      	movs	r1, #24
 8000816:	4876      	ldr	r0, [pc, #472]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 8000818:	f003 fc12 	bl	8004040 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 800081c:	2314      	movs	r3, #20
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	486c      	ldr	r0, [pc, #432]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 8000830:	f003 fa42 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 8000834:	2368      	movs	r3, #104	; 0x68
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4865      	ldr	r0, [pc, #404]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 800084c:	f003 fa34 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4861      	ldr	r0, [pc, #388]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000866:	f003 fa27 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087a:	230b      	movs	r3, #11
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4859      	ldr	r0, [pc, #356]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000886:	f003 fa17 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800088a:	2386      	movs	r3, #134	; 0x86
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4853      	ldr	r0, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x2e4>)
 80008a6:	f003 fa07 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4847      	ldr	r0, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80008c8:	f003 f9f6 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80008cc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	483f      	ldr	r0, [pc, #252]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80008e6:	f003 f9e7 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4839      	ldr	r0, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 8000902:	f003 f9d9 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	4833      	ldr	r0, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 800091a:	f003 f9cd 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 800091e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000938:	f003 f9be 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = limitSwR_Pin | limitSwL_Pin;
 800093c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <MX_GPIO_Init+0x2e4>)
 8000952:	f003 f9b1 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin PDPin */
	GPIO_InitStruct.Pin = swMotor1_Pin | swMotor2_Pin | swPush_Pin;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 800096a:	f003 f9a5 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin */
	GPIO_InitStruct.Pin = stepMotor_Pin | dirMotor_Pin;
 800096e:	2318      	movs	r3, #24
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 8000986:	f003 f997 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_GPIO_Init+0x2e8>)
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 800099e:	f003 f98b 	bl	8003cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80009a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 80009c0:	f003 f97a 	bl	8003cb8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	2017      	movs	r0, #23
 80009ca:	f003 f8ac 	bl	8003b26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ce:	2017      	movs	r0, #23
 80009d0:	f003 f8c5 	bl	8003b5e <HAL_NVIC_EnableIRQ>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	10110000 	.word	0x10110000

080009fc <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f003 fb34 	bl	80040a4 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000a42:	f001 f87b 	bl	8001b3c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f003 fbbb 	bl	80041c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a54:	f001 f872 	bl	8001b3c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f003 fbfd 	bl	800425a <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000a66:	f001 f869 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000244 	.word	0x20000244
 8000a74:	40005400 	.word	0x40005400
 8000a78:	00c0eaff 	.word	0x00c0eaff

08000a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_I2C_MspInit+0x74>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <HAL_I2C_MspInit+0x84>)
 8000ad4:	f003 f8f0 	bl	8003cb8 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b08:	f3bf 8f4f 	dsb	sy
}
 8000b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0e:	f3bf 8f6f 	isb	sy
}
 8000b12:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy
}
 8000b26:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b34:	f3bf 8f4f 	dsb	sy
}
 8000b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3a:	f3bf 8f6f 	isb	sy
}
 8000b3e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5e:	f3bf 8f4f 	dsb	sy
}
 8000b62:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b6a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	0b5b      	lsrs	r3, r3, #13
 8000b70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b74:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b7e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	015a      	lsls	r2, r3, #5
 8000b84:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b88:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b8e:	4911      	ldr	r1, [pc, #68]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ef      	bne.n	8000b80 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	1e5a      	subs	r2, r3, #1
 8000ba4:	60fa      	str	r2, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1e5      	bne.n	8000b76 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000baa:	f3bf 8f4f 	dsb	sy
}
 8000bae:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bc2:	f3bf 8f6f 	isb	sy
}
 8000bc6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000bdc:	f7ff ff92 	bl	8000b04 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000be0:	f7ff ffb6 	bl	8000b50 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000be4:	f002 fa46 	bl	8003074 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be8:	f000 f854 	bl	8000c94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bec:	f7ff fd90 	bl	8000710 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000bf0:	f001 faae 	bl	8002150 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8000bf4:	f000 ffda 	bl	8001bac <MX_SPI5_Init>
	MX_TIM1_Init();
 8000bf8:	f001 f9a2 	bl	8001f40 <MX_TIM1_Init>
	MX_RNG_Init();
 8000bfc:	f000 ffa2 	bl	8001b44 <MX_RNG_Init>
	MX_I2C1_Init();
 8000c00:	f7ff fefc 	bl	80009fc <MX_I2C1_Init>
	MX_TIM2_Init();
 8000c04:	f001 f9f0 	bl	8001fe8 <MX_TIM2_Init>
	MX_ADC1_Init();
 8000c08:	f7ff fcf0 	bl	80005ec <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c0c:	f001 fa70 	bl	80020f0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000c10:	f001 fdf4 	bl	80027fc <ILI9341_Init>
	ILI9341_Fill_Screen(WHITE);
 8000c14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c18:	f001 ff9c 	bl	8002b54 <ILI9341_Fill_Screen>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <main+0xb4>)
 8000c1e:	f005 f8c1 	bl	8005da4 <HAL_TIM_Base_Start_IT>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (playState == 0) {
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <main+0xb8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <main+0x58>
			state0();
 8000c2a:	f000 f98b 	bl	8000f44 <state0>
 8000c2e:	e7f8      	b.n	8000c22 <main+0x4a>
		} else if (playState == 1) {
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <main+0xb8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d102      	bne.n	8000c3e <main+0x66>
			state1();
 8000c38:	f000 f9ee 	bl	8001018 <state1>
 8000c3c:	e7f1      	b.n	8000c22 <main+0x4a>
		} else if (playState == 2) {
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <main+0xb8>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d102      	bne.n	8000c4c <main+0x74>
			state2();
 8000c46:	f000 fa83 	bl	8001150 <state2>
 8000c4a:	e7ea      	b.n	8000c22 <main+0x4a>
		} else if (playState == 3) {
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <main+0xb8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d102      	bne.n	8000c5a <main+0x82>
			state3();
 8000c54:	f000 fbf2 	bl	800143c <state3>
 8000c58:	e7e3      	b.n	8000c22 <main+0x4a>
		} else if (playState == 4) {
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <main+0xb8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d104      	bne.n	8000c6c <main+0x94>
			state4();
 8000c62:	f000 fd79 	bl	8001758 <state4>
			play();
 8000c66:	f000 f8f3 	bl	8000e50 <play>
 8000c6a:	e7da      	b.n	8000c22 <main+0x4a>
		} else if (playState == 5) {
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <main+0xb8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d104      	bne.n	8000c7e <main+0xa6>
			state5();
 8000c74:	f000 fde2 	bl	800183c <state5>
			play();
 8000c78:	f000 f8ea 	bl	8000e50 <play>
 8000c7c:	e7d1      	b.n	8000c22 <main+0x4a>
		} else if (playState == 6) {
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <main+0xb8>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d1cd      	bne.n	8000c22 <main+0x4a>
			state6();
 8000c86:	f000 ff17 	bl	8001ab8 <state6>
		if (playState == 0) {
 8000c8a:	e7ca      	b.n	8000c22 <main+0x4a>
 8000c8c:	20000374 	.word	0x20000374
 8000c90:	20000298 	.word	0x20000298

08000c94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b8      	sub	sp, #224	; 0xe0
 8000c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c9e:	2234      	movs	r2, #52	; 0x34
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f007 f979 	bl	8007f9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ca8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2290      	movs	r2, #144	; 0x90
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 f96a 	bl	8007f9a <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000cc6:	f003 fb15 	bl	80042f4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <SystemClock_Config+0x130>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <SystemClock_Config+0x130>)
 8000ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <SystemClock_Config+0x130>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000d1c:	23c8      	movs	r3, #200	; 0xc8
 8000d1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d28:	2309      	movs	r3, #9
 8000d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fb3b 	bl	80043b4 <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xb4>
		Error_Handler();
 8000d44:	f000 fefa 	bl	8001b3c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000d48:	f003 fae4 	bl	8004314 <HAL_PWREx_EnableOverDrive>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xc2>
		Error_Handler();
 8000d52:	f000 fef3 	bl	8001b3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000d78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d7c:	2106      	movs	r1, #6
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fdc6 	bl	8004910 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xfa>
		Error_Handler();
 8000d8a:	f000 fed7 	bl	8001b3c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SystemClock_Config+0x134>)
 8000d90:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 ffd7 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x124>
		Error_Handler();
 8000db4:	f000 fec2 	bl	8001b3c <Error_Handler>
	}
}
 8000db8:	bf00      	nop
 8000dba:	37e0      	adds	r7, #224	; 0xe0
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	00204180 	.word	0x00204180

08000dcc <doMotor>:

/* USER CODE BEGIN 4 */

void doMotor() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if (count - prevActionMotor > delayStep && stepsPerRevolution != 0) {
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <doMotor+0x6c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <doMotor+0x70>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <doMotor+0x74>)
 8000ddc:	8812      	ldrh	r2, [r2, #0]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d91f      	bls.n	8000e22 <doMotor+0x56>
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <doMotor+0x78>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d01b      	beq.n	8000e22 <doMotor+0x56>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, isHigh);
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <doMotor+0x7c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	2108      	movs	r1, #8
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <doMotor+0x80>)
 8000df4:	f003 f924 	bl	8004040 <HAL_GPIO_WritePin>
		isHigh = abs(isHigh - 1);
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <doMotor+0x7c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfb8      	it	lt
 8000e02:	425b      	neglt	r3, r3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <doMotor+0x7c>)
 8000e08:	701a      	strb	r2, [r3, #0]
		prevActionMotor = count;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <doMotor+0x6c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <doMotor+0x70>)
 8000e10:	6013      	str	r3, [r2, #0]
		stepsPerRevolution--;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <doMotor+0x78>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <doMotor+0x78>)
 8000e1c:	701a      	strb	r2, [r3, #0]
	if (count - prevActionMotor > delayStep && stepsPerRevolution != 0) {
 8000e1e:	bf00      	nop
	} else if (stepsPerRevolution == 0) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
	}
}
 8000e20:	e008      	b.n	8000e34 <doMotor+0x68>
	} else if (stepsPerRevolution == 0) {
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <doMotor+0x78>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <doMotor+0x68>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <doMotor+0x80>)
 8000e30:	f003 f906 	bl	8004040 <HAL_GPIO_WritePin>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000294 	.word	0x20000294
 8000e3c:	2000029c 	.word	0x2000029c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	2000029a 	.word	0x2000029a
 8000e48:	200002a0 	.word	0x200002a0
 8000e4c:	40020c00 	.word	0x40020c00

08000e50 <play>:

void play() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000e56:	4833      	ldr	r0, [pc, #204]	; (8000f24 <play+0xd4>)
 8000e58:	f002 f9e0 	bl	800321c <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000e5c:	bf00      	nop
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	4830      	ldr	r0, [pc, #192]	; (8000f24 <play+0xd4>)
 8000e62:	f002 faa9 	bl	80033b8 <HAL_ADC_PollForConversion>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1f8      	bne.n	8000e5e <play+0xe>
		;
	adc_val = HAL_ADC_GetValue(&hadc1);
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <play+0xd4>)
 8000e6e:	f002 fb2e 	bl	80034ce <HAL_ADC_GetValue>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <play+0xd8>)
 8000e78:	801a      	strh	r2, [r3, #0]
	delayStep = (int) (((float) adc_val / 4095) * 2000) + 500;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <play+0xd8>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e86:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000f2c <play+0xdc>
 8000e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f30 <play+0xe0>
 8000e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <play+0xe4>)
 8000ea8:	801a      	strh	r2, [r3, #0]
	uint8_t readSw1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4822      	ldr	r0, [pc, #136]	; (8000f38 <play+0xe8>)
 8000eae:	f003 f8af 	bl	8004010 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t readSw2 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <play+0xe8>)
 8000eba:	f003 f8a9 	bl	8004010 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71bb      	strb	r3, [r7, #6]
	uint8_t readLimitSw1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec6:	481d      	ldr	r0, [pc, #116]	; (8000f3c <play+0xec>)
 8000ec8:	f003 f8a2 	bl	8004010 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	717b      	strb	r3, [r7, #5]
	uint8_t readLimitSw2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <play+0xec>)
 8000ed6:	f003 f89b 	bl	8004010 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	713b      	strb	r3, [r7, #4]
	if (readSw1 == 0 && readLimitSw1 != 1) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <play+0xaa>
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d007      	beq.n	8000efa <play+0xaa>
		stepsPerRevolution = 8;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <play+0xf0>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <play+0xe8>)
 8000ef6:	f003 f8a3 	bl	8004040 <HAL_GPIO_WritePin>
	}
	if (readSw2 == 0 && readLimitSw2 != 1) {
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10a      	bne.n	8000f16 <play+0xc6>
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d007      	beq.n	8000f16 <play+0xc6>
		stepsPerRevolution = 8;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <play+0xf0>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <play+0xe8>)
 8000f12:	f003 f895 	bl	8004040 <HAL_GPIO_WritePin>
	}
	doMotor();
 8000f16:	f7ff ff59 	bl	8000dcc <doMotor>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001fc 	.word	0x200001fc
 8000f28:	20000290 	.word	0x20000290
 8000f2c:	457ff000 	.word	0x457ff000
 8000f30:	44fa0000 	.word	0x44fa0000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	2000029a 	.word	0x2000029a

08000f44 <state0>:

void state0() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 fbf8 	bl	8002740 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Hokey Hokey", 65, 35, BLACK, 3, WHITE);
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2303      	movs	r3, #3
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2223      	movs	r2, #35	; 0x23
 8000f5e:	2141      	movs	r1, #65	; 0x41
 8000f60:	4829      	ldr	r0, [pc, #164]	; (8001008 <state0+0xc4>)
 8000f62:	f001 faed 	bl	8002540 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <state0+0xc8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <state0+0x5a>
		ILI9341_Draw_Rectangle(60, 70, 200, 120, RED);
 8000f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2378      	movs	r3, #120	; 0x78
 8000f76:	22c8      	movs	r2, #200	; 0xc8
 8000f78:	2146      	movs	r1, #70	; 0x46
 8000f7a:	203c      	movs	r0, #60	; 0x3c
 8000f7c:	f001 feea 	bl	8002d54 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("PLAY", 105, 110, WHITE, 5, RED);
 8000f80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2305      	movs	r3, #5
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8e:	226e      	movs	r2, #110	; 0x6e
 8000f90:	2169      	movs	r1, #105	; 0x69
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <state0+0xcc>)
 8000f94:	f001 fad4 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <state0+0xc8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8000f9e:	f002 f859 	bl	8003054 <TP_Touchpad_Pressed>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02b      	beq.n	8001000 <state0+0xbc>
		uint16_t x_pos = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 ff8c 	bl	8002ed0 <TP_Read_Coordinates>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d120      	bne.n	8001000 <state0+0xbc>
			y_pos = 240 - position_array[0];
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000fc4:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 70 && y_pos <= 190 && x_pos >= 60 && x_pos <= 260) {
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	2b45      	cmp	r3, #69	; 0x45
 8000fce:	d917      	bls.n	8001000 <state0+0xbc>
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	2bbe      	cmp	r3, #190	; 0xbe
 8000fd4:	d814      	bhi.n	8001000 <state0+0xbc>
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	2b3b      	cmp	r3, #59	; 0x3b
 8000fda:	d911      	bls.n	8001000 <state0+0xbc>
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fe2:	d80d      	bhi.n	8001000 <state0+0xbc>
				playState = 1;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <state0+0xd0>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <state0+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8000ff0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ff4:	f002 f8aa 	bl	800314c <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 8000ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ffc:	f001 fdaa 	bl	8002b54 <ILI9341_Fill_Screen>
			}
		}

	}
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	0800a6c8 	.word	0x0800a6c8
 800100c:	20000299 	.word	0x20000299
 8001010:	0800a6d4 	.word	0x0800a6d4
 8001014:	20000298 	.word	0x20000298

08001018 <state1>:
void state1() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 fb8e 	bl	8002740 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Select Mode", 65, 35, BLACK, 3, WHITE);
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2303      	movs	r3, #3
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	2223      	movs	r2, #35	; 0x23
 8001032:	2141      	movs	r1, #65	; 0x41
 8001034:	4841      	ldr	r0, [pc, #260]	; (800113c <state1+0x124>)
 8001036:	f001 fa83 	bl	8002540 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <state1+0x128>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d12c      	bne.n	800109c <state1+0x84>
		ILI9341_Draw_Rectangle(55, 80, 210, 50, RED);
 8001042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2332      	movs	r3, #50	; 0x32
 800104a:	22d2      	movs	r2, #210	; 0xd2
 800104c:	2150      	movs	r1, #80	; 0x50
 800104e:	2037      	movs	r0, #55	; 0x37
 8001050:	f001 fe80 	bl	8002d54 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("No time to limit", 67, 97, WHITE, 2, RED);
 8001054:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001062:	2261      	movs	r2, #97	; 0x61
 8001064:	2143      	movs	r1, #67	; 0x43
 8001066:	4837      	ldr	r0, [pc, #220]	; (8001144 <state1+0x12c>)
 8001068:	f001 fa6a 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(55, 145, 210, 50, RED);
 800106c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2332      	movs	r3, #50	; 0x32
 8001074:	22d2      	movs	r2, #210	; 0xd2
 8001076:	2191      	movs	r1, #145	; 0x91
 8001078:	2037      	movs	r0, #55	; 0x37
 800107a:	f001 fe6b 	bl	8002d54 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("limit time", 102, 162, WHITE, 2, RED);
 800107e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2302      	movs	r3, #2
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108c:	22a2      	movs	r2, #162	; 0xa2
 800108e:	2166      	movs	r1, #102	; 0x66
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <state1+0x130>)
 8001092:	f001 fa55 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <state1+0x128>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 800109c:	f001 ffda 	bl	8003054 <TP_Touchpad_Pressed>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d046      	beq.n	8001134 <state1+0x11c>
		uint16_t x_pos = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ff0d 	bl	8002ed0 <TP_Read_Coordinates>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d13b      	bne.n	8001134 <state1+0x11c>
			y_pos = 240 - position_array[0];
 80010bc:	883b      	ldrh	r3, [r7, #0]
 80010be:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80010c2:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 80 && y_pos <= 130 && x_pos >= 55 && x_pos <= 265) {
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	2b4f      	cmp	r3, #79	; 0x4f
 80010cc:	d917      	bls.n	80010fe <state1+0xe6>
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	2b82      	cmp	r3, #130	; 0x82
 80010d2:	d814      	bhi.n	80010fe <state1+0xe6>
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	2b36      	cmp	r3, #54	; 0x36
 80010d8:	d911      	bls.n	80010fe <state1+0xe6>
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80010e0:	d20d      	bcs.n	80010fe <state1+0xe6>
				playState = 2;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <state1+0x134>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <state1+0x128>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 80010ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f2:	f002 f82b 	bl	800314c <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 80010f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010fa:	f001 fd2b 	bl	8002b54 <ILI9341_Fill_Screen>
			}
			if (y_pos >= 145 && y_pos <= 195 && x_pos >= 55 && x_pos <= 265) {
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	2b90      	cmp	r3, #144	; 0x90
 8001102:	d917      	bls.n	8001134 <state1+0x11c>
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	2bc3      	cmp	r3, #195	; 0xc3
 8001108:	d814      	bhi.n	8001134 <state1+0x11c>
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2b36      	cmp	r3, #54	; 0x36
 800110e:	d911      	bls.n	8001134 <state1+0x11c>
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001116:	d20d      	bcs.n	8001134 <state1+0x11c>
				playState = 3;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <state1+0x134>)
 800111a:	2203      	movs	r2, #3
 800111c:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <state1+0x128>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8001124:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001128:	f002 f810 	bl	800314c <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 800112c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001130:	f001 fd10 	bl	8002b54 <ILI9341_Fill_Screen>
			}
		}

	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800a6dc 	.word	0x0800a6dc
 8001140:	20000299 	.word	0x20000299
 8001144:	0800a6e8 	.word	0x0800a6e8
 8001148:	0800a6fc 	.word	0x0800a6fc
 800114c:	20000298 	.word	0x20000298

08001150 <state2>:

void state2() {
 8001150:	b580      	push	{r7, lr}
 8001152:	ed2d 8b02 	vpush	{d8}
 8001156:	b090      	sub	sp, #64	; 0x40
 8001158:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 800115a:	4bac      	ldr	r3, [pc, #688]	; (800140c <state2+0x2bc>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d14b      	bne.n	80011fa <state2+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 faec 	bl	8002740 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select max hp", 30, 35, BLACK, 3, WHITE);
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	2303      	movs	r3, #3
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2223      	movs	r2, #35	; 0x23
 8001176:	211e      	movs	r1, #30
 8001178:	48a5      	ldr	r0, [pc, #660]	; (8001410 <state2+0x2c0>)
 800117a:	f001 f9e1 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 800117e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2328      	movs	r3, #40	; 0x28
 8001186:	2264      	movs	r2, #100	; 0x64
 8001188:	21b4      	movs	r1, #180	; 0xb4
 800118a:	206e      	movs	r0, #110	; 0x6e
 800118c:	f001 fde2 	bl	8002d54 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 8001190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2303      	movs	r3, #3
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119e:	22bb      	movs	r2, #187	; 0xbb
 80011a0:	2175      	movs	r1, #117	; 0x75
 80011a2:	489c      	ldr	r0, [pc, #624]	; (8001414 <state2+0x2c4>)
 80011a4:	f001 f9cc 	bl	8002540 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(70, 115, 30, RED);
 80011a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011ac:	221e      	movs	r2, #30
 80011ae:	2173      	movs	r1, #115	; 0x73
 80011b0:	2046      	movs	r0, #70	; 0x46
 80011b2:	f001 f8a2 	bl	80022fa <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 48, 108, WHITE, 2, RED);
 80011b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c4:	226c      	movs	r2, #108	; 0x6c
 80011c6:	2130      	movs	r1, #48	; 0x30
 80011c8:	4893      	ldr	r0, [pc, #588]	; (8001418 <state2+0x2c8>)
 80011ca:	f001 f9b9 	bl	8002540 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 80011ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011d2:	221e      	movs	r2, #30
 80011d4:	2173      	movs	r1, #115	; 0x73
 80011d6:	20fa      	movs	r0, #250	; 0xfa
 80011d8:	f001 f88f 	bl	80022fa <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 80011dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2302      	movs	r3, #2
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ea:	226c      	movs	r2, #108	; 0x6c
 80011ec:	21f3      	movs	r1, #243	; 0xf3
 80011ee:	488b      	ldr	r0, [pc, #556]	; (800141c <state2+0x2cc>)
 80011f0:	f001 f9a6 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80011f4:	4b85      	ldr	r3, [pc, #532]	; (800140c <state2+0x2bc>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 80011fa:	4b89      	ldr	r3, [pc, #548]	; (8001420 <state2+0x2d0>)
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	4b89      	ldr	r3, [pc, #548]	; (8001424 <state2+0x2d4>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d03c      	beq.n	8001280 <state2+0x130>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2350      	movs	r3, #80	; 0x50
 800120c:	2250      	movs	r2, #80	; 0x50
 800120e:	214b      	movs	r1, #75	; 0x4b
 8001210:	2078      	movs	r0, #120	; 0x78
 8001212:	f001 fd9f 	bl	8002d54 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 8001216:	4b83      	ldr	r3, [pc, #524]	; (8001424 <state2+0x2d4>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <state2+0x2d8>)
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fe56 	bl	8007ed4 <siprintf>
		uint8_t x = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (strlen(str) == 1) {
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f854 	bl	80002e0 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10d      	bne.n	800125a <state2+0x10a>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 800123e:	2300      	movs	r3, #0
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2304      	movs	r3, #4
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	218a      	movs	r1, #138	; 0x8a
 800124e:	4877      	ldr	r0, [pc, #476]	; (800142c <state2+0x2dc>)
 8001250:	f001 f976 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 8001254:	231b      	movs	r3, #27
 8001256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 800125a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800125e:	3b76      	subs	r3, #118	; 0x76
 8001260:	b2d9      	uxtb	r1, r3
 8001262:	f107 001c 	add.w	r0, r7, #28
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2304      	movs	r3, #4
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001272:	2264      	movs	r2, #100	; 0x64
 8001274:	f001 f964 	bl	8002540 <ILI9341_Draw_Text>
		lastHp = Hp;
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <state2+0x2d4>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b68      	ldr	r3, [pc, #416]	; (8001420 <state2+0x2d0>)
 800127e:	801a      	strh	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8001280:	f001 fee8 	bl	8003054 <TP_Touchpad_Pressed>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80b9 	beq.w	80013fe <state2+0x2ae>
		uint16_t x_pos = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t y_pos = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe19 	bl	8002ed0 <TP_Read_Coordinates>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 80ac 	bne.w	80013fe <state2+0x2ae>
			y_pos = 240 - position_array[0];
 80012a6:	8b3b      	ldrh	r3, [r7, #24]
 80012a8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80012ac:	867b      	strh	r3, [r7, #50]	; 0x32
			x_pos = position_array[1];
 80012ae:	8b7b      	ldrh	r3, [r7, #26]
 80012b0:	86bb      	strh	r3, [r7, #52]	; 0x34
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 80012b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012b4:	2bb3      	cmp	r3, #179	; 0xb3
 80012b6:	d931      	bls.n	800131c <state2+0x1cc>
 80012b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ba:	2bdc      	cmp	r3, #220	; 0xdc
 80012bc:	d82e      	bhi.n	800131c <state2+0x1cc>
 80012be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c0:	2b6d      	cmp	r3, #109	; 0x6d
 80012c2:	d92b      	bls.n	800131c <state2+0x1cc>
 80012c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c6:	2bd2      	cmp	r3, #210	; 0xd2
 80012c8:	d828      	bhi.n	800131c <state2+0x1cc>
				playState = 4;
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <state2+0x2e0>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <state2+0x2bc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
				lastHp = -1;
 80012d6:	4b52      	ldr	r3, [pc, #328]	; (8001420 <state2+0x2d0>)
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	801a      	strh	r2, [r3, #0]
				char str[20];
				sprintf(str, "1 %d", Hp);
 80012de:	4b51      	ldr	r3, [pc, #324]	; (8001424 <state2+0x2d4>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4953      	ldr	r1, [pc, #332]	; (8001434 <state2+0x2e4>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 fdf3 	bl	8007ed4 <siprintf>
				while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 80012ee:	bf00      	nop
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <state2+0x2e8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	2b40      	cmp	r3, #64	; 0x40
 80012fc:	d1f8      	bne.n	80012f0 <state2+0x1a0>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ffed 	bl	80002e0 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	1d39      	adds	r1, r7, #4
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	484a      	ldr	r0, [pc, #296]	; (8001438 <state2+0x2e8>)
 8001310:	f005 fa0c 	bl	800672c <HAL_UART_Transmit>
				ILI9341_Fill_Screen(WHITE);
 8001314:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001318:	f001 fc1c 	bl	8002b54 <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 70, 2) + pow(y_pos - 115, 2)) <= 30) {
 800131c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800131e:	3b46      	subs	r3, #70	; 0x46
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001328:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800132c:	eeb0 0b47 	vmov.f64	d0, d7
 8001330:	f008 fefa 	bl	800a128 <pow>
 8001334:	eeb0 8b40 	vmov.f64	d8, d0
 8001338:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800133a:	3b73      	subs	r3, #115	; 0x73
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001344:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001348:	eeb0 0b47 	vmov.f64	d0, d7
 800134c:	f008 feec 	bl	800a128 <pow>
 8001350:	eeb0 7b40 	vmov.f64	d7, d0
 8001354:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001358:	eeb0 0b47 	vmov.f64	d0, d7
 800135c:	f008 fe90 	bl	800a080 <sqrt>
 8001360:	eeb0 7b40 	vmov.f64	d7, d0
 8001364:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8001368:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d80c      	bhi.n	800138c <state2+0x23c>
				if (Hp > 1) {
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <state2+0x2d4>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d908      	bls.n	800138c <state2+0x23c>
					Hp--;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <state2+0x2d4>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <state2+0x2d4>)
 8001384:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f001 fee0 	bl	800314c <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 800138c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800138e:	3bfa      	subs	r3, #250	; 0xfa
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001398:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800139c:	eeb0 0b47 	vmov.f64	d0, d7
 80013a0:	f008 fec2 	bl	800a128 <pow>
 80013a4:	eeb0 8b40 	vmov.f64	d8, d0
 80013a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013aa:	3b73      	subs	r3, #115	; 0x73
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013b8:	eeb0 0b47 	vmov.f64	d0, d7
 80013bc:	f008 feb4 	bl	800a128 <pow>
 80013c0:	eeb0 7b40 	vmov.f64	d7, d0
 80013c4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013c8:	eeb0 0b47 	vmov.f64	d0, d7
 80013cc:	f008 fe58 	bl	800a080 <sqrt>
 80013d0:	eeb0 7b40 	vmov.f64	d7, d0
 80013d4:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80013d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d900      	bls.n	80013e4 <state2+0x294>
				}
			}
		}

	}
}
 80013e2:	e00c      	b.n	80013fe <state2+0x2ae>
				if (Hp < 99) {
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <state2+0x2d4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b62      	cmp	r3, #98	; 0x62
 80013ea:	d808      	bhi.n	80013fe <state2+0x2ae>
					Hp++;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <state2+0x2d4>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <state2+0x2d4>)
 80013f6:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f001 fea7 	bl	800314c <HAL_Delay>
}
 80013fe:	bf00      	nop
 8001400:	3738      	adds	r7, #56	; 0x38
 8001402:	46bd      	mov	sp, r7
 8001404:	ecbd 8b02 	vpop	{d8}
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000299 	.word	0x20000299
 8001410:	0800a708 	.word	0x0800a708
 8001414:	0800a718 	.word	0x0800a718
 8001418:	0800a720 	.word	0x0800a720
 800141c:	0800a728 	.word	0x0800a728
 8001420:	200002a2 	.word	0x200002a2
 8001424:	20000002 	.word	0x20000002
 8001428:	0800a72c 	.word	0x0800a72c
 800142c:	0800a730 	.word	0x0800a730
 8001430:	20000298 	.word	0x20000298
 8001434:	0800a734 	.word	0x0800a734
 8001438:	200003c0 	.word	0x200003c0

0800143c <state3>:
void state3() {
 800143c:	b580      	push	{r7, lr}
 800143e:	ed2d 8b02 	vpush	{d8}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8001446:	4bb5      	ldr	r3, [pc, #724]	; (800171c <state3+0x2e0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d14b      	bne.n	80014e6 <state3+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800144e:	2001      	movs	r0, #1
 8001450:	f001 f976 	bl	8002740 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select time to end", 40, 35, BLACK, 2, WHITE);
 8001454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	2302      	movs	r3, #2
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	2223      	movs	r2, #35	; 0x23
 8001462:	2128      	movs	r1, #40	; 0x28
 8001464:	48ae      	ldr	r0, [pc, #696]	; (8001720 <state3+0x2e4>)
 8001466:	f001 f86b 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 800146a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2328      	movs	r3, #40	; 0x28
 8001472:	2264      	movs	r2, #100	; 0x64
 8001474:	21b4      	movs	r1, #180	; 0xb4
 8001476:	206e      	movs	r0, #110	; 0x6e
 8001478:	f001 fc6c 	bl	8002d54 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 800147c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2303      	movs	r3, #3
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148a:	22bb      	movs	r2, #187	; 0xbb
 800148c:	2175      	movs	r1, #117	; 0x75
 800148e:	48a5      	ldr	r0, [pc, #660]	; (8001724 <state3+0x2e8>)
 8001490:	f001 f856 	bl	8002540 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(55, 115, 30, RED);
 8001494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001498:	221e      	movs	r2, #30
 800149a:	2173      	movs	r1, #115	; 0x73
 800149c:	2037      	movs	r0, #55	; 0x37
 800149e:	f000 ff2c 	bl	80022fa <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 33, 108, WHITE, 2, RED);
 80014a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b0:	226c      	movs	r2, #108	; 0x6c
 80014b2:	2121      	movs	r1, #33	; 0x21
 80014b4:	489c      	ldr	r0, [pc, #624]	; (8001728 <state3+0x2ec>)
 80014b6:	f001 f843 	bl	8002540 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 80014ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014be:	221e      	movs	r2, #30
 80014c0:	2173      	movs	r1, #115	; 0x73
 80014c2:	20fa      	movs	r0, #250	; 0xfa
 80014c4:	f000 ff19 	bl	80022fa <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 80014c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2302      	movs	r3, #2
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	226c      	movs	r2, #108	; 0x6c
 80014d8:	21f3      	movs	r1, #243	; 0xf3
 80014da:	4894      	ldr	r0, [pc, #592]	; (800172c <state3+0x2f0>)
 80014dc:	f001 f830 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80014e0:	4b8e      	ldr	r3, [pc, #568]	; (800171c <state3+0x2e0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
	}
	if (lastCountPlayTime != countPlayTime) {
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <state3+0x2f4>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <state3+0x2f8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d046      	beq.n	8001580 <state3+0x144>
		char str[20];
		ILI9341_Draw_Rectangle(93, 75, 122, 80, BLACK);
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2350      	movs	r3, #80	; 0x50
 80014f8:	227a      	movs	r2, #122	; 0x7a
 80014fa:	214b      	movs	r1, #75	; 0x4b
 80014fc:	205d      	movs	r0, #93	; 0x5d
 80014fe:	f001 fc29 	bl	8002d54 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", countPlayTime);
 8001502:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <state3+0x2f8>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	498b      	ldr	r1, [pc, #556]	; (8001738 <state3+0x2fc>)
 800150c:	4618      	mov	r0, r3
 800150e:	f006 fce1 	bl	8007ed4 <siprintf>
		uint8_t x = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (strlen(str) == 1) {
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fedf 	bl	80002e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10d      	bne.n	8001544 <state3+0x108>
			ILI9341_Draw_Text("0", 105, 100, WHITE, 4, BLACK);
 8001528:	2300      	movs	r3, #0
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2304      	movs	r3, #4
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001534:	2264      	movs	r2, #100	; 0x64
 8001536:	2169      	movs	r1, #105	; 0x69
 8001538:	4880      	ldr	r0, [pc, #512]	; (800173c <state3+0x300>)
 800153a:	f001 f801 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 800153e:	231b      	movs	r3, #27
 8001540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		ILI9341_Draw_Text(str, 105 + x, 100, WHITE, 4, BLACK);
 8001544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001548:	3369      	adds	r3, #105	; 0x69
 800154a:	b2d9      	uxtb	r1, r3
 800154c:	f107 001c 	add.w	r0, r7, #28
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2304      	movs	r3, #4
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155c:	2264      	movs	r2, #100	; 0x64
 800155e:	f000 ffef 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("min", 160, 105, WHITE, 3, BLACK);
 8001562:	2300      	movs	r3, #0
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	2303      	movs	r3, #3
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156e:	2269      	movs	r2, #105	; 0x69
 8001570:	21a0      	movs	r1, #160	; 0xa0
 8001572:	4873      	ldr	r0, [pc, #460]	; (8001740 <state3+0x304>)
 8001574:	f000 ffe4 	bl	8002540 <ILI9341_Draw_Text>
		lastCountPlayTime = countPlayTime;
 8001578:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <state3+0x2f8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6c      	ldr	r2, [pc, #432]	; (8001730 <state3+0x2f4>)
 800157e:	6013      	str	r3, [r2, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8001580:	f001 fd68 	bl	8003054 <TP_Touchpad_Pressed>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80c2 	beq.w	8001710 <state3+0x2d4>
		uint16_t x_pos = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t y_pos = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fc99 	bl	8002ed0 <TP_Read_Coordinates>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	f040 80b5 	bne.w	8001710 <state3+0x2d4>
			y_pos = 240 - position_array[0];
 80015a6:	8b3b      	ldrh	r3, [r7, #24]
 80015a8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80015ac:	867b      	strh	r3, [r7, #50]	; 0x32
			x_pos = position_array[1];
 80015ae:	8b7b      	ldrh	r3, [r7, #26]
 80015b0:	86bb      	strh	r3, [r7, #52]	; 0x34
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 80015b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80015b4:	2bb3      	cmp	r3, #179	; 0xb3
 80015b6:	d93c      	bls.n	8001632 <state3+0x1f6>
 80015b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80015ba:	2bdc      	cmp	r3, #220	; 0xdc
 80015bc:	d839      	bhi.n	8001632 <state3+0x1f6>
 80015be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015c0:	2b6d      	cmp	r3, #109	; 0x6d
 80015c2:	d936      	bls.n	8001632 <state3+0x1f6>
 80015c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015c6:	2bd2      	cmp	r3, #210	; 0xd2
 80015c8:	d833      	bhi.n	8001632 <state3+0x1f6>
				playState = 5;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <state3+0x308>)
 80015cc:	2205      	movs	r2, #5
 80015ce:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <state3+0x2e0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
				Hp = 0;
 80015d6:	4b5c      	ldr	r3, [pc, #368]	; (8001748 <state3+0x30c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
				lastHp = -1;
 80015dc:	4b5b      	ldr	r3, [pc, #364]	; (800174c <state3+0x310>)
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	801a      	strh	r2, [r3, #0]
				countPlayTime = countPlayTime * 60;
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <state3+0x2f8>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <state3+0x2f8>)
 80015f4:	601a      	str	r2, [r3, #0]
				char str[20];
				sprintf(str, "2 %d", countPlayTime);
 80015f6:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <state3+0x2f8>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4954      	ldr	r1, [pc, #336]	; (8001750 <state3+0x314>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f006 fc68 	bl	8007ed4 <siprintf>
				while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 8001604:	bf00      	nop
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <state3+0x318>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001610:	2b40      	cmp	r3, #64	; 0x40
 8001612:	d1f8      	bne.n	8001606 <state3+0x1ca>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fe62 	bl	80002e0 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	b29a      	uxth	r2, r3
 8001620:	1d39      	adds	r1, r7, #4
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	484b      	ldr	r0, [pc, #300]	; (8001754 <state3+0x318>)
 8001626:	f005 f881 	bl	800672c <HAL_UART_Transmit>
				ILI9341_Fill_Screen(WHITE);
 800162a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800162e:	f001 fa91 	bl	8002b54 <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 55, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001632:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001634:	3b37      	subs	r3, #55	; 0x37
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800163e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001642:	eeb0 0b47 	vmov.f64	d0, d7
 8001646:	f008 fd6f 	bl	800a128 <pow>
 800164a:	eeb0 8b40 	vmov.f64	d8, d0
 800164e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001650:	3b73      	subs	r3, #115	; 0x73
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800165a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800165e:	eeb0 0b47 	vmov.f64	d0, d7
 8001662:	f008 fd61 	bl	800a128 <pow>
 8001666:	eeb0 7b40 	vmov.f64	d7, d0
 800166a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800166e:	eeb0 0b47 	vmov.f64	d0, d7
 8001672:	f008 fd05 	bl	800a080 <sqrt>
 8001676:	eeb0 7b40 	vmov.f64	d7, d0
 800167a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800167e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	d80b      	bhi.n	80016a0 <state3+0x264>
				if (countPlayTime > 1) {
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <state3+0x2f8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d907      	bls.n	80016a0 <state3+0x264>
					countPlayTime--;
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <state3+0x2f8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <state3+0x2f8>)
 8001698:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 800169a:	2064      	movs	r0, #100	; 0x64
 800169c:	f001 fd56 	bl	800314c <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 80016a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80016a2:	3bfa      	subs	r3, #250	; 0xfa
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016ac:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016b0:	eeb0 0b47 	vmov.f64	d0, d7
 80016b4:	f008 fd38 	bl	800a128 <pow>
 80016b8:	eeb0 8b40 	vmov.f64	d8, d0
 80016bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80016be:	3b73      	subs	r3, #115	; 0x73
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016c8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016cc:	eeb0 0b47 	vmov.f64	d0, d7
 80016d0:	f008 fd2a 	bl	800a128 <pow>
 80016d4:	eeb0 7b40 	vmov.f64	d7, d0
 80016d8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016dc:	eeb0 0b47 	vmov.f64	d0, d7
 80016e0:	f008 fcce 	bl	800a080 <sqrt>
 80016e4:	eeb0 7b40 	vmov.f64	d7, d0
 80016e8:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80016ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d900      	bls.n	80016f8 <state3+0x2bc>
				}
			}
		}

	}
}
 80016f6:	e00b      	b.n	8001710 <state3+0x2d4>
				if (countPlayTime < 99) {
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <state3+0x2f8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b62      	cmp	r3, #98	; 0x62
 80016fe:	d807      	bhi.n	8001710 <state3+0x2d4>
					countPlayTime++;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <state3+0x2f8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <state3+0x2f8>)
 8001708:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	; 0x64
 800170c:	f001 fd1e 	bl	800314c <HAL_Delay>
}
 8001710:	bf00      	nop
 8001712:	3738      	adds	r7, #56	; 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	ecbd 8b02 	vpop	{d8}
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000299 	.word	0x20000299
 8001720:	0800a73c 	.word	0x0800a73c
 8001724:	0800a718 	.word	0x0800a718
 8001728:	0800a720 	.word	0x0800a720
 800172c:	0800a728 	.word	0x0800a728
 8001730:	200002a4 	.word	0x200002a4
 8001734:	20000004 	.word	0x20000004
 8001738:	0800a72c 	.word	0x0800a72c
 800173c:	0800a730 	.word	0x0800a730
 8001740:	0800a750 	.word	0x0800a750
 8001744:	20000298 	.word	0x20000298
 8001748:	20000002 	.word	0x20000002
 800174c:	200002a2 	.word	0x200002a2
 8001750:	0800a754 	.word	0x0800a754
 8001754:	200003c0 	.word	0x200003c0

08001758 <state4>:
void state4() {
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <state4+0xc8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d110      	bne.n	8001788 <state4+0x30>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001766:	2001      	movs	r0, #1
 8001768:	f000 ffea 	bl	8002740 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("your hp", 100, 35, BLACK, 3, WHITE);
 800176c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2303      	movs	r3, #3
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	2223      	movs	r2, #35	; 0x23
 800177a:	2164      	movs	r1, #100	; 0x64
 800177c:	4829      	ldr	r0, [pc, #164]	; (8001824 <state4+0xcc>)
 800177e:	f000 fedf 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <state4+0xc8>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <state4+0xd0>)
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <state4+0xd4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d036      	beq.n	8001802 <state4+0xaa>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2350      	movs	r3, #80	; 0x50
 800179a:	2250      	movs	r2, #80	; 0x50
 800179c:	214b      	movs	r1, #75	; 0x4b
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f001 fad8 	bl	8002d54 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <state4+0xd4>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	463b      	mov	r3, r7
 80017ac:	4920      	ldr	r1, [pc, #128]	; (8001830 <state4+0xd8>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fb90 	bl	8007ed4 <siprintf>
		uint8_t x = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	75fb      	strb	r3, [r7, #23]
		if (strlen(str) == 1) {
 80017b8:	463b      	mov	r3, r7
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd90 	bl	80002e0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d10c      	bne.n	80017e0 <state4+0x88>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2304      	movs	r3, #4
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	218a      	movs	r1, #138	; 0x8a
 80017d6:	4817      	ldr	r0, [pc, #92]	; (8001834 <state4+0xdc>)
 80017d8:	f000 feb2 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 80017dc:	231b      	movs	r3, #27
 80017de:	75fb      	strb	r3, [r7, #23]
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	3b76      	subs	r3, #118	; 0x76
 80017e4:	b2d9      	uxtb	r1, r3
 80017e6:	4638      	mov	r0, r7
 80017e8:	2300      	movs	r3, #0
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2304      	movs	r3, #4
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f4:	2264      	movs	r2, #100	; 0x64
 80017f6:	f000 fea3 	bl	8002540 <ILI9341_Draw_Text>
		lastHp = Hp;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <state4+0xd4>)
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <state4+0xd0>)
 8001800:	801a      	strh	r2, [r3, #0]
	}
	if (Hp <= 0) {
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <state4+0xd4>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <state4+0xc0>
		ILI9341_Fill_Screen(WHITE);
 800180a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800180e:	f001 f9a1 	bl	8002b54 <ILI9341_Fill_Screen>
		playState = 6;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <state4+0xe0>)
 8001814:	2206      	movs	r2, #6
 8001816:	701a      	strb	r2, [r3, #0]
	}
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000299 	.word	0x20000299
 8001824:	0800a75c 	.word	0x0800a75c
 8001828:	200002a2 	.word	0x200002a2
 800182c:	20000002 	.word	0x20000002
 8001830:	0800a72c 	.word	0x0800a72c
 8001834:	0800a730 	.word	0x0800a730
 8001838:	20000298 	.word	0x20000298

0800183c <state5>:
void state5() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8001842:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <state5+0x240>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11b      	bne.n	8001882 <state5+0x46>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 ff78 	bl	8002740 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("time", 125, 35, BLACK, 3, WHITE);
 8001850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	2303      	movs	r3, #3
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	2223      	movs	r2, #35	; 0x23
 800185e:	217d      	movs	r1, #125	; 0x7d
 8001860:	4887      	ldr	r0, [pc, #540]	; (8001a80 <state5+0x244>)
 8001862:	f000 fe6d 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("your score", 70, 135, BLACK, 3, WHITE);
 8001866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2303      	movs	r3, #3
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2300      	movs	r3, #0
 8001872:	2287      	movs	r2, #135	; 0x87
 8001874:	2146      	movs	r1, #70	; 0x46
 8001876:	4883      	ldr	r0, [pc, #524]	; (8001a84 <state5+0x248>)
 8001878:	f000 fe62 	bl	8002540 <ILI9341_Draw_Text>
		isDrawButton = 1;
 800187c:	4b7f      	ldr	r3, [pc, #508]	; (8001a7c <state5+0x240>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
	}
	if (lastCountPlayTime != countPlayTime) {
 8001882:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <state5+0x24c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <state5+0x250>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	f000 8091 	beq.w	80019b2 <state5+0x176>
		uint8_t min = countPlayTime / 60;
 8001890:	4b7e      	ldr	r3, [pc, #504]	; (8001a8c <state5+0x250>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7e      	ldr	r2, [pc, #504]	; (8001a90 <state5+0x254>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t sec = countPlayTime - (((int) (countPlayTime / 60)) * 60);
 80018a0:	4b7a      	ldr	r3, [pc, #488]	; (8001a8c <state5+0x250>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <state5+0x250>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4979      	ldr	r1, [pc, #484]	; (8001a90 <state5+0x254>)
 80018ac:	fba1 1303 	umull	r1, r3, r1, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	0109      	lsls	r1, r1, #4
 80018b8:	1acb      	subs	r3, r1, r3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		char str[20];
		ILI9341_Draw_Rectangle(75, 60, 170, 40, BLACK);
 80018c4:	2300      	movs	r3, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2328      	movs	r3, #40	; 0x28
 80018ca:	22aa      	movs	r2, #170	; 0xaa
 80018cc:	213c      	movs	r1, #60	; 0x3c
 80018ce:	204b      	movs	r0, #75	; 0x4b
 80018d0:	f001 fa40 	bl	8002d54 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", min);
 80018d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018d8:	f107 0318 	add.w	r3, r7, #24
 80018dc:	496d      	ldr	r1, [pc, #436]	; (8001a94 <state5+0x258>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f006 faf8 	bl	8007ed4 <siprintf>
		uint8_t x = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (strlen(str) == 1) {
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fcf6 	bl	80002e0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d10d      	bne.n	8001916 <state5+0xda>
			ILI9341_Draw_Text("0", 108, 62, WHITE, 4, BLACK);
 80018fa:	2300      	movs	r3, #0
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2304      	movs	r3, #4
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001906:	223e      	movs	r2, #62	; 0x3e
 8001908:	216c      	movs	r1, #108	; 0x6c
 800190a:	4863      	ldr	r0, [pc, #396]	; (8001a98 <state5+0x25c>)
 800190c:	f000 fe18 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 8001910:	231b      	movs	r3, #27
 8001912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		ILI9341_Draw_Text(str, 108 + x, 62, WHITE, 4, BLACK);
 8001916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800191a:	336c      	adds	r3, #108	; 0x6c
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	f107 0018 	add.w	r0, r7, #24
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2304      	movs	r3, #4
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192e:	223e      	movs	r2, #62	; 0x3e
 8001930:	f000 fe06 	bl	8002540 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(":", 162, 62, WHITE, 4, BLACK);
 8001934:	2300      	movs	r3, #0
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	2304      	movs	r3, #4
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001940:	223e      	movs	r2, #62	; 0x3e
 8001942:	21a2      	movs	r1, #162	; 0xa2
 8001944:	4855      	ldr	r0, [pc, #340]	; (8001a9c <state5+0x260>)
 8001946:	f000 fdfb 	bl	8002540 <ILI9341_Draw_Text>
		sprintf(str, "%d", sec);
 800194a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	4950      	ldr	r1, [pc, #320]	; (8001a94 <state5+0x258>)
 8001954:	4618      	mov	r0, r3
 8001956:	f006 fabd 	bl	8007ed4 <siprintf>
		x = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (strlen(str) == 1) {
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fcbb 	bl	80002e0 <strlen>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10d      	bne.n	800198c <state5+0x150>
			ILI9341_Draw_Text("0", 173, 62, WHITE, 4, BLACK);
 8001970:	2300      	movs	r3, #0
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2304      	movs	r3, #4
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197c:	223e      	movs	r2, #62	; 0x3e
 800197e:	21ad      	movs	r1, #173	; 0xad
 8001980:	4845      	ldr	r0, [pc, #276]	; (8001a98 <state5+0x25c>)
 8001982:	f000 fddd 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 8001986:	231b      	movs	r3, #27
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		ILI9341_Draw_Text(str, 173 + x, 62, WHITE, 4, BLACK);
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001990:	3b53      	subs	r3, #83	; 0x53
 8001992:	b2d9      	uxtb	r1, r3
 8001994:	f107 0018 	add.w	r0, r7, #24
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2304      	movs	r3, #4
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a4:	223e      	movs	r2, #62	; 0x3e
 80019a6:	f000 fdcb 	bl	8002540 <ILI9341_Draw_Text>
		lastCountPlayTime = countPlayTime;
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <state5+0x250>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <state5+0x24c>)
 80019b0:	6013      	str	r3, [r2, #0]
	}
	if (count - lastCountTime > 100000 && countPlayTime > 0) {
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <state5+0x264>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <state5+0x268>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <state5+0x26c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d90c      	bls.n	80019dc <state5+0x1a0>
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <state5+0x250>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <state5+0x1a0>
		countPlayTime--;
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <state5+0x250>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <state5+0x250>)
 80019d2:	6013      	str	r3, [r2, #0]
		lastCountTime = count;
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <state5+0x264>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <state5+0x268>)
 80019da:	6013      	str	r3, [r2, #0]
	}
	if (lastHp != Hp) {
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <state5+0x270>)
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <state5+0x274>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d039      	beq.n	8001a5c <state5+0x220>
		char str[20];
		ILI9341_Draw_Rectangle(120, 160, 80, 40, BLACK);
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2328      	movs	r3, #40	; 0x28
 80019ee:	2250      	movs	r2, #80	; 0x50
 80019f0:	21a0      	movs	r1, #160	; 0xa0
 80019f2:	2078      	movs	r0, #120	; 0x78
 80019f4:	f001 f9ae 	bl	8002d54 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <state5+0x274>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4924      	ldr	r1, [pc, #144]	; (8001a94 <state5+0x258>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fa66 	bl	8007ed4 <siprintf>
		uint8_t x = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (strlen(str) == 1) {
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc65 	bl	80002e0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10d      	bne.n	8001a38 <state5+0x1fc>
			ILI9341_Draw_Text("0", 138, 162, WHITE, 4, BLACK);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2304      	movs	r3, #4
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a28:	22a2      	movs	r2, #162	; 0xa2
 8001a2a:	218a      	movs	r1, #138	; 0x8a
 8001a2c:	481a      	ldr	r0, [pc, #104]	; (8001a98 <state5+0x25c>)
 8001a2e:	f000 fd87 	bl	8002540 <ILI9341_Draw_Text>
			x = 27;
 8001a32:	231b      	movs	r3, #27
 8001a34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
		ILI9341_Draw_Text(str, 138 + x, 162, WHITE, 4, BLACK);
 8001a38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a3c:	3b76      	subs	r3, #118	; 0x76
 8001a3e:	b2d9      	uxtb	r1, r3
 8001a40:	1d38      	adds	r0, r7, #4
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2304      	movs	r3, #4
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4e:	22a2      	movs	r2, #162	; 0xa2
 8001a50:	f000 fd76 	bl	8002540 <ILI9341_Draw_Text>
		lastHp = Hp;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <state5+0x274>)
 8001a56:	881a      	ldrh	r2, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <state5+0x270>)
 8001a5a:	801a      	strh	r2, [r3, #0]
	}
	if (countPlayTime <= 0) {
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <state5+0x250>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <state5+0x236>
		ILI9341_Fill_Screen(WHITE);
 8001a64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a68:	f001 f874 	bl	8002b54 <ILI9341_Fill_Screen>
		playState = 6;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <state5+0x278>)
 8001a6e:	2206      	movs	r2, #6
 8001a70:	701a      	strb	r2, [r3, #0]
	}

}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000299 	.word	0x20000299
 8001a80:	0800a764 	.word	0x0800a764
 8001a84:	0800a76c 	.word	0x0800a76c
 8001a88:	200002a4 	.word	0x200002a4
 8001a8c:	20000004 	.word	0x20000004
 8001a90:	88888889 	.word	0x88888889
 8001a94:	0800a72c 	.word	0x0800a72c
 8001a98:	0800a730 	.word	0x0800a730
 8001a9c:	0800a778 	.word	0x0800a778
 8001aa0:	20000294 	.word	0x20000294
 8001aa4:	200002a8 	.word	0x200002a8
 8001aa8:	000186a0 	.word	0x000186a0
 8001aac:	200002a2 	.word	0x200002a2
 8001ab0:	20000002 	.word	0x20000002
 8001ab4:	20000298 	.word	0x20000298

08001ab8 <state6>:
void state6() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("win", 100, 100, BLACK, 4, WHITE);
 8001abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2264      	movs	r2, #100	; 0x64
 8001acc:	2164      	movs	r1, #100	; 0x64
 8001ace:	4803      	ldr	r0, [pc, #12]	; (8001adc <state6+0x24>)
 8001ad0:	f000 fd36 	bl	8002540 <ILI9341_Draw_Text>
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800a77c 	.word	0x0800a77c

08001ae0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d116      	bne.n	8001b1e <HAL_GPIO_EXTI_Callback+0x3e>
		if (playState == 4) {
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d112      	bne.n	8001b1e <HAL_GPIO_EXTI_Callback+0x3e>
			if (count - debounceSw > 20000) {
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x50>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x54>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d909      	bls.n	8001b1e <HAL_GPIO_EXTI_Callback+0x3e>
				Hp--;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b14:	801a      	strh	r2, [r3, #0]
				debounceSw = count;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x50>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b1c:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000298 	.word	0x20000298
 8001b30:	20000294 	.word	0x20000294
 8001b34:	200002ac 	.word	0x200002ac
 8001b38:	20000002 	.word	0x20000002

08001b3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x4>
	...

08001b44 <MX_RNG_Init>:
/* USER CODE END 0 */

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_RNG_Init+0x20>)
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <MX_RNG_Init+0x24>)
 8001b4c:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_RNG_Init+0x20>)
 8001b50:	f003 fd2c 	bl	80055ac <HAL_RNG_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_RNG_Init+0x1a>
		Error_Handler();
 8001b5a:	f7ff ffef 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200002b0 	.word	0x200002b0
 8001b68:	50060800 	.word	0x50060800

08001b6c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

	if (rngHandle->Instance == RNG) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_RNG_MspInit+0x38>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RNG_MspInit+0x2a>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RNG_MspInit+0x3c>)
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	4a09      	ldr	r2, [pc, #36]	; (8001ba8 <HAL_RNG_MspInit+0x3c>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b88:	6353      	str	r3, [r2, #52]	; 0x34
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_RNG_MspInit+0x3c>)
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	50060800 	.word	0x50060800
 8001ba8:	40023800 	.word	0x40023800

08001bac <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <MX_SPI5_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bbc:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bca:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bde:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_SPI5_Init+0x74>)
 8001c0c:	f003 fcf8 	bl	8005600 <HAL_SPI_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_SPI5_Init+0x6e>
		Error_Handler();
 8001c16:	f7ff ff91 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002c0 	.word	0x200002c0
 8001c24:	40015000 	.word	0x40015000

08001c28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_SPI_MspInit+0x7c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d128      	bne.n	8001c9c <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c68:	f043 0320 	orr.w	r3, r3, #32
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_SPI_MspInit+0x80>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001c7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c7e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_SPI_MspInit+0x84>)
 8001c98:	f002 f80e 	bl	8003cb8 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40015000 	.word	0x40015000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021400 	.word	0x40021400

08001cb0 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x44>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <SysTick_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001cfc:	f001 fa06 	bl	800310c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d08:	2080      	movs	r0, #128	; 0x80
 8001d0a:	f002 f9b3 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <TIM2_IRQHandler+0x18>)
 8001d1a:	f004 f8bb 	bl	8005e94 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	count++;
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <TIM2_IRQHandler+0x1c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a02      	ldr	r2, [pc, #8]	; (8001d30 <TIM2_IRQHandler+0x1c>)
 8001d26:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM2_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000374 	.word	0x20000374
 8001d30:	20000294 	.word	0x20000294

08001d34 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <USART2_IRQHandler+0x10>)
 8001d3a:	f004 fd8b 	bl	8006854 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003c0 	.word	0x200003c0

08001d48 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_kill>:

int _kill(int pid, int sig) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d62:	f006 f96d 	bl	8008040 <__errno>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2216      	movs	r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_exit>:

void _exit(int status) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffe7 	bl	8001d58 <_kill>
	while (1) {
 8001d8a:	e7fe      	b.n	8001d8a <_exit+0x12>

08001d8c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e00a      	b.n	8001db4 <_read+0x28>
		*ptr++ = __io_getchar();
 8001d9e:	f3af 8000 	nop.w
 8001da2:	4601      	mov	r1, r0
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	b2ca      	uxtb	r2, r1
 8001dac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf0      	blt.n	8001d9e <_read+0x12>
	}

	return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e009      	b.n	8001dec <_write+0x26>
		__io_putchar(*ptr++);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf1      	blt.n	8001dd8 <_write+0x12>
	}
	return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_close>:

int _close(int file) {
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
	return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
	return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_isatty>:

int _isatty(int file) {
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001e70:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
		errno = ENOMEM;
 8001e98:	f006 f8d2 	bl	8008040 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20080000 	.word	0x20080000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	20000324 	.word	0x20000324
 8001ed0:	20000618 	.word	0x20000618

08001ed4 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <SystemInit+0x5c>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <SystemInit+0x5c>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <SystemInit+0x60>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <SystemInit+0x60>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <SystemInit+0x60>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <SystemInit+0x60>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <SystemInit+0x60>)
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <SystemInit+0x64>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <SystemInit+0x60>)
 8001f08:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <SystemInit+0x68>)
 8001f0a:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <SystemInit+0x60>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <SystemInit+0x60>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <SystemInit+0x60>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SystemInit+0x5c>)
 8001f20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f24:	609a      	str	r2, [r3, #8]
#endif
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	fef6ffff 	.word	0xfef6ffff
 8001f3c:	24003010 	.word	0x24003010

08001f40 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f60:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <MX_TIM1_Init+0xa4>)
 8001f62:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f66:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f6a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001f8c:	4814      	ldr	r0, [pc, #80]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001f8e:	f003 feb1 	bl	8005cf4 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x5c>
		Error_Handler();
 8001f98:	f7ff fdd0 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001faa:	f004 f893 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x78>
		Error_Handler();
 8001fb4:	f7ff fdc2 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_TIM1_Init+0xa0>)
 8001fca:	f004 fab5 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001fd4:	f7ff fdb2 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000328 	.word	0x20000328
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <MX_TIM2_Init+0x94>)
 8002008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800200c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_TIM2_Init+0x94>)
 8002010:	2263      	movs	r2, #99	; 0x63
 8002012:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <MX_TIM2_Init+0x94>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10 - 1;
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_TIM2_Init+0x94>)
 800201c:	2209      	movs	r2, #9
 800201e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <MX_TIM2_Init+0x94>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_TIM2_Init+0x94>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <MX_TIM2_Init+0x94>)
 800202e:	f003 fe61 	bl	8005cf4 <HAL_TIM_Base_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0x54>
		Error_Handler();
 8002038:	f7ff fd80 	bl	8001b3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002040:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_TIM2_Init+0x94>)
 800204a:	f004 f843 	bl	80060d4 <HAL_TIM_ConfigClockSource>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM2_Init+0x70>
		Error_Handler();
 8002054:	f7ff fd72 	bl	8001b3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_TIM2_Init+0x94>)
 8002066:	f004 fa67 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002070:	f7ff fd64 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000374 	.word	0x20000374

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <HAL_TIM_Base_MspInit+0x68>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10c      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a15      	ldr	r2, [pc, #84]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 80020aa:	e018      	b.n	80020de <HAL_TIM_Base_MspInit+0x5e>
	} else if (tim_baseHandle->Instance == TIM2) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d113      	bne.n	80020de <HAL_TIM_Base_MspInit+0x5e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a0c      	ldr	r2, [pc, #48]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_Base_MspInit+0x6c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	201c      	movs	r0, #28
 80020d4:	f001 fd27 	bl	8003b26 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d8:	201c      	movs	r0, #28
 80020da:	f001 fd40 	bl	8003b5e <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40023800 	.word	0x40023800

080020f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <MX_USART2_UART_Init+0x58>)
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <MX_USART2_UART_Init+0x5c>)
 80020f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <MX_USART2_UART_Init+0x58>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_USART2_UART_Init+0x58>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MX_USART2_UART_Init+0x58>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_USART2_UART_Init+0x58>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_USART2_UART_Init+0x58>)
 8002134:	f004 faac 	bl	8006690 <HAL_UART_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800213e:	f7ff fcfd 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003c0 	.word	0x200003c0
 800214c:	40004400 	.word	0x40004400

08002150 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <MX_USART3_UART_Init+0x5c>)
 8002158:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 800215c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002160:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002176:	220c      	movs	r2, #12
 8002178:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 800218e:	2200      	movs	r2, #0
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART3_UART_Init+0x58>)
 8002194:	f004 fa7c 	bl	8006690 <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 800219e:	f7ff fccd 	bl	8001b3c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000444 	.word	0x20000444
 80021ac:	40004800 	.word	0x40004800

080021b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <HAL_UART_MspInit+0xe8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d130      	bne.n	8002234 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_UART_MspInit+0xec>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <HAL_UART_MspInit+0xec>)
 80021d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_UART_MspInit+0xec>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_UART_MspInit+0xec>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <HAL_UART_MspInit+0xec>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_UART_MspInit+0xec>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
		/**USART2 GPIO Configuration
		 PD5     ------> USART2_TX
		 PD6     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002202:	2360      	movs	r3, #96	; 0x60
 8002204:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002212:	2307      	movs	r3, #7
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4820      	ldr	r0, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0xf0>)
 800221e:	f001 fd4b 	bl	8003cb8 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2101      	movs	r1, #1
 8002226:	2026      	movs	r0, #38	; 0x26
 8002228:	f001 fc7d 	bl	8003b26 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 800222c:	2026      	movs	r0, #38	; 0x26
 800222e:	f001 fc96 	bl	8003b5e <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8002232:	e02d      	b.n	8002290 <HAL_UART_MspInit+0xe0>
	} else if (uartHandle->Instance == USART3) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1a      	ldr	r2, [pc, #104]	; (80022a4 <HAL_UART_MspInit+0xf4>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d128      	bne.n	8002290 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_UART_MspInit+0xec>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_UART_MspInit+0xec>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_UART_MspInit+0xec>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_UART_MspInit+0xec>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_UART_MspInit+0xec>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_UART_MspInit+0xec>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 800226e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002272:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002280:	2307      	movs	r3, #7
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <HAL_UART_MspInit+0xf0>)
 800228c:	f001 fd14 	bl	8003cb8 <HAL_GPIO_Init>
}
 8002290:	bf00      	nop
 8002292:	3730      	adds	r7, #48	; 0x30
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004400 	.word	0x40004400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40004800 	.word	0x40004800

080022a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ae:	e003      	b.n	80022b8 <LoopCopyDataInit>

080022b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022b6:	3104      	adds	r1, #4

080022b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022c0:	d3f6      	bcc.n	80022b0 <CopyDataInit>
  ldr  r2, =_sbss
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022c4:	e002      	b.n	80022cc <LoopFillZerobss>

080022c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022c8:	f842 3b04 	str.w	r3, [r2], #4

080022cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022d0:	d3f9      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d2:	f7ff fdff 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f005 feb9 	bl	800804c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022da:	f7fe fc7d 	bl	8000bd8 <main>
  bx  lr    
 80022de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80022e4:	0800c618 	.word	0x0800c618
  ldr  r0, =_sdata
 80022e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022ec:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80022f0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80022f4:	20000618 	.word	0x20000618

080022f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>

080022fa <ILI9341_Draw_Filled_Circle>:
	}
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour) {
 80022fa:	b590      	push	{r4, r7, lr}
 80022fc:	b08b      	sub	sp, #44	; 0x2c
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4604      	mov	r4, r0
 8002302:	4608      	mov	r0, r1
 8002304:	4611      	mov	r1, r2
 8002306:	461a      	mov	r2, r3
 8002308:	4623      	mov	r3, r4
 800230a:	80fb      	strh	r3, [r7, #6]
 800230c:	4603      	mov	r3, r0
 800230e:	80bb      	strh	r3, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	f1c3 0301 	rsb	r3, r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

	while (x >= y) {
 8002332:	e061      	b.n	80023f8 <ILI9341_Draw_Filled_Circle+0xfe>
		for (int i = X - x; i <= X + x; i++) {
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e018      	b.n	8002370 <ILI9341_Draw_Filled_Circle+0x76>
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	b298      	uxth	r0, r3
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	b29a      	uxth	r2, r3
 8002346:	88bb      	ldrh	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	883a      	ldrh	r2, [r7, #0]
 800234e:	4619      	mov	r1, r3
 8002350:	f000 fc26 	bl	8002ba0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	b298      	uxth	r0, r3
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	b29b      	uxth	r3, r3
 800235c:	88ba      	ldrh	r2, [r7, #4]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	883a      	ldrh	r2, [r7, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f000 fc1b 	bl	8002ba0 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++) {
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	3301      	adds	r3, #1
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	dde0      	ble.n	800233e <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++) {
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e018      	b.n	80023b8 <ILI9341_Draw_Filled_Circle+0xbe>
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	b298      	uxth	r0, r3
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	b29a      	uxth	r2, r3
 800238e:	88bb      	ldrh	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	883a      	ldrh	r2, [r7, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	f000 fc02 	bl	8002ba0 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	b298      	uxth	r0, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	88ba      	ldrh	r2, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	883a      	ldrh	r2, [r7, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f000 fbf7 	bl	8002ba0 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++) {
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	4413      	add	r3, r2
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dde0      	ble.n	8002386 <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	3301      	adds	r3, #1
 80023c8:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3302      	adds	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0) {
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005a      	lsls	r2, r3, #1
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dd09      	ble.n	80023f8 <ILI9341_Draw_Filled_Circle+0xfe>
			x--;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	3b01      	subs	r3, #1
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61fb      	str	r3, [r7, #28]
	while (x >= y) {
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	da99      	bge.n	8002334 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	372c      	adds	r7, #44	; 0x2c
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
	...

0800240c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af02      	add	r7, sp, #8
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	4611      	mov	r1, r2
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	4603      	mov	r3, r0
 8002420:	71bb      	strb	r3, [r7, #6]
 8002422:	460b      	mov	r3, r1
 8002424:	717b      	strb	r3, [r7, #5]
 8002426:	4613      	mov	r3, r2
 8002428:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ') {
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b1f      	cmp	r3, #31
 8002432:	d802      	bhi.n	800243a <ILI9341_Draw_Char+0x2e>
		Character = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	e002      	b.n	8002440 <ILI9341_Draw_Char+0x34>
	} else {
		function_char -= 32;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	3b20      	subs	r3, #32
 800243e:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8002440:	2300      	movs	r3, #0
 8002442:	753b      	strb	r3, [r7, #20]
 8002444:	e012      	b.n	800246c <ILI9341_Draw_Char+0x60>
		temp[k] = font[function_char][k];
 8002446:	7dfa      	ldrb	r2, [r7, #23]
 8002448:	7d38      	ldrb	r0, [r7, #20]
 800244a:	7d39      	ldrb	r1, [r7, #20]
 800244c:	4c3b      	ldr	r4, [pc, #236]	; (800253c <ILI9341_Draw_Char+0x130>)
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4423      	add	r3, r4
 8002458:	4403      	add	r3, r0
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	f101 0318 	add.w	r3, r1, #24
 8002460:	443b      	add	r3, r7
 8002462:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8002466:	7d3b      	ldrb	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	753b      	strb	r3, [r7, #20]
 800246c:	7d3b      	ldrb	r3, [r7, #20]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d9e9      	bls.n	8002446 <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	b298      	uxth	r0, r3
 8002476:	797b      	ldrb	r3, [r7, #5]
 8002478:	b299      	uxth	r1, r3
 800247a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800247c:	461a      	mov	r2, r3
 800247e:	0052      	lsls	r2, r2, #1
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	b29c      	uxth	r4, r3
 800248c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4623      	mov	r3, r4
 8002492:	f000 fc5f 	bl	8002d54 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++) {
 8002496:	2300      	movs	r3, #0
 8002498:	757b      	strb	r3, [r7, #21]
 800249a:	e047      	b.n	800252c <ILI9341_Draw_Char+0x120>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 800249c:	2300      	movs	r3, #0
 800249e:	75bb      	strb	r3, [r7, #22]
 80024a0:	e03e      	b.n	8002520 <ILI9341_Draw_Char+0x114>
			if (temp[j] & (1 << i)) {
 80024a2:	7d7b      	ldrb	r3, [r7, #21]
 80024a4:	3318      	adds	r3, #24
 80024a6:	443b      	add	r3, r7
 80024a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80024ac:	461a      	mov	r2, r3
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	fa42 f303 	asr.w	r3, r2, r3
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d02e      	beq.n	800251a <ILI9341_Draw_Char+0x10e>
				if (Size == 1) {
 80024bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d110      	bne.n	80024e4 <ILI9341_Draw_Char+0xd8>
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	7d7b      	ldrb	r3, [r7, #21]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	b298      	uxth	r0, r3
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	7dbb      	ldrb	r3, [r7, #22]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	4619      	mov	r1, r3
 80024de:	f000 fb5f 	bl	8002ba0 <ILI9341_Draw_Pixel>
 80024e2:	e01a      	b.n	800251a <ILI9341_Draw_Char+0x10e>
				} else {
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 80024e4:	79bb      	ldrb	r3, [r7, #6]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	7d7b      	ldrb	r3, [r7, #21]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80024ee:	fb11 f303 	smulbb	r3, r1, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	b298      	uxth	r0, r3
 80024f8:	797b      	ldrb	r3, [r7, #5]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	7dbb      	ldrb	r3, [r7, #22]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002502:	fb11 f303 	smulbb	r3, r1, r3
 8002506:	b29b      	uxth	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b299      	uxth	r1, r3
 800250c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800250e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4623      	mov	r3, r4
 8002516:	f000 fc1d 	bl	8002d54 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 800251a:	7dbb      	ldrb	r3, [r7, #22]
 800251c:	3301      	adds	r3, #1
 800251e:	75bb      	strb	r3, [r7, #22]
 8002520:	7dbb      	ldrb	r3, [r7, #22]
 8002522:	2b07      	cmp	r3, #7
 8002524:	d9bd      	bls.n	80024a2 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++) {
 8002526:	7d7b      	ldrb	r3, [r7, #21]
 8002528:	3301      	adds	r3, #1
 800252a:	757b      	strb	r3, [r7, #21]
 800252c:	7d7b      	ldrb	r3, [r7, #21]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d9b4      	bls.n	800249c <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	0800a798 	.word	0x0800a798

08002540 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b085      	sub	sp, #20
 8002544:	af02      	add	r7, sp, #8
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	70fb      	strb	r3, [r7, #3]
 8002552:	460b      	mov	r3, r1
 8002554:	70bb      	strb	r3, [r7, #2]
 8002556:	4613      	mov	r3, r2
 8002558:	803b      	strh	r3, [r7, #0]
	while (*Text) {
 800255a:	e017      	b.n	800258c <ILI9341_Draw_Text+0x4c>
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	7818      	ldrb	r0, [r3, #0]
 8002564:	883c      	ldrh	r4, [r7, #0]
 8002566:	78ba      	ldrb	r2, [r7, #2]
 8002568:	78f9      	ldrb	r1, [r7, #3]
 800256a:	8bbb      	ldrh	r3, [r7, #28]
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	8b3b      	ldrh	r3, [r7, #24]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	4623      	mov	r3, r4
 8002574:	f7ff ff4a 	bl	800240c <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8002578:	8b3b      	ldrh	r3, [r7, #24]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	0052      	lsls	r2, r2, #1
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	4413      	add	r3, r2
 800258a:	70fb      	strb	r3, [r7, #3]
	while (*Text) {
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e3      	bne.n	800255c <ILI9341_Draw_Text+0x1c>
	}
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bd90      	pop	{r4, r7, pc}
	...

080025a0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80025a4:	f7ff fb02 	bl	8001bac <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80025a8:	f7fe f8b2 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b2:	4802      	ldr	r0, [pc, #8]	; (80025bc <ILI9341_SPI_Init+0x1c>)
 80025b4:	f001 fd44 	bl	8004040 <HAL_GPIO_WritePin>
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40020800 	.word	0x40020800

080025c0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80025ca:	1df9      	adds	r1, r7, #7
 80025cc:	2301      	movs	r3, #1
 80025ce:	2201      	movs	r2, #1
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <ILI9341_SPI_Send+0x20>)
 80025d2:	f003 f8c0 	bl	8005756 <HAL_SPI_Transmit>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200002c0 	.word	0x200002c0

080025e4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <ILI9341_Write_Command+0x40>)
 80025f6:	f001 fd23 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002600:	4808      	ldr	r0, [pc, #32]	; (8002624 <ILI9341_Write_Command+0x40>)
 8002602:	f001 fd1d 	bl	8004040 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ffd9 	bl	80025c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800260e:	2201      	movs	r2, #1
 8002610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <ILI9341_Write_Command+0x40>)
 8002616:	f001 fd13 	bl	8004040 <HAL_GPIO_WritePin>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40020800 	.word	0x40020800

08002628 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <ILI9341_Write_Data+0x40>)
 800263a:	f001 fd01 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002644:	4808      	ldr	r0, [pc, #32]	; (8002668 <ILI9341_Write_Data+0x40>)
 8002646:	f001 fcfb 	bl	8004040 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ffb7 	bl	80025c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002652:	2201      	movs	r2, #1
 8002654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <ILI9341_Write_Data+0x40>)
 800265a:	f001 fcf1 	bl	8004040 <HAL_GPIO_WritePin>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40020800 	.word	0x40020800

0800266c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	80fb      	strh	r3, [r7, #6]
 800267e:	4603      	mov	r3, r0
 8002680:	80bb      	strh	r3, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]
 8002686:	4613      	mov	r3, r2
 8002688:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800268a:	202a      	movs	r0, #42	; 0x2a
 800268c:	f7ff ffaa 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29b      	uxth	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ffc5 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ffc0 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ffb9 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffb4 	bl	8002628 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80026c0:	202b      	movs	r0, #43	; 0x2b
 80026c2:	f7ff ff8f 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80026c6:	88bb      	ldrh	r3, [r7, #4]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ffaa 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ffa5 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80026de:	883b      	ldrh	r3, [r7, #0]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff9e 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80026ec:	883b      	ldrh	r3, [r7, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff99 	bl	8002628 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80026f6:	202c      	movs	r0, #44	; 0x2c
 80026f8:	f7ff ff74 	bl	80025e4 <ILI9341_Write_Command>
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800270e:	480b      	ldr	r0, [pc, #44]	; (800273c <ILI9341_Reset+0x38>)
 8002710:	f001 fc96 	bl	8004040 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002714:	20c8      	movs	r0, #200	; 0xc8
 8002716:	f000 fd19 	bl	800314c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <ILI9341_Reset+0x38>)
 8002722:	f001 fc8d 	bl	8004040 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002726:	20c8      	movs	r0, #200	; 0xc8
 8002728:	f000 fd10 	bl	800314c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800272c:	2201      	movs	r2, #1
 800272e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002732:	4802      	ldr	r0, [pc, #8]	; (800273c <ILI9341_Reset+0x38>)
 8002734:	f001 fc84 	bl	8004040 <HAL_GPIO_WritePin>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40020800 	.word	0x40020800

08002740 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800274e:	2036      	movs	r0, #54	; 0x36
 8002750:	f7ff ff48 	bl	80025e4 <ILI9341_Write_Command>
HAL_Delay(1);
 8002754:	2001      	movs	r0, #1
 8002756:	f000 fcf9 	bl	800314c <HAL_Delay>
	
switch(screen_rotation) 
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d837      	bhi.n	80027d0 <ILI9341_Set_Rotation+0x90>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <ILI9341_Set_Rotation+0x28>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	0800278f 	.word	0x0800278f
 8002770:	080027a5 	.word	0x080027a5
 8002774:	080027bb 	.word	0x080027bb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002778:	2048      	movs	r0, #72	; 0x48
 800277a:	f7ff ff55 	bl	8002628 <ILI9341_Write_Data>
			LCD_WIDTH = ILI9341_SCREEN_HEIGHT;
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <ILI9341_Set_Rotation+0x9c>)
 8002780:	22f0      	movs	r2, #240	; 0xf0
 8002782:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <ILI9341_Set_Rotation+0xa0>)
 8002786:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800278a:	801a      	strh	r2, [r3, #0]
			break;
 800278c:	e021      	b.n	80027d2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800278e:	2028      	movs	r0, #40	; 0x28
 8002790:	f7ff ff4a 	bl	8002628 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH; //+40
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <ILI9341_Set_Rotation+0x9c>)
 8002796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800279a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <ILI9341_Set_Rotation+0xa0>)
 800279e:	22f0      	movs	r2, #240	; 0xf0
 80027a0:	801a      	strh	r2, [r3, #0]
			break;
 80027a2:	e016      	b.n	80027d2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80027a4:	2088      	movs	r0, #136	; 0x88
 80027a6:	f7ff ff3f 	bl	8002628 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_HEIGHT;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <ILI9341_Set_Rotation+0x9c>)
 80027ac:	22f0      	movs	r2, #240	; 0xf0
 80027ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <ILI9341_Set_Rotation+0xa0>)
 80027b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80027b6:	801a      	strh	r2, [r3, #0]
			break;
 80027b8:	e00b      	b.n	80027d2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80027ba:	20e8      	movs	r0, #232	; 0xe8
 80027bc:	f7ff ff34 	bl	8002628 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <ILI9341_Set_Rotation+0x9c>)
 80027c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80027c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <ILI9341_Set_Rotation+0xa0>)
 80027ca:	22f0      	movs	r2, #240	; 0xf0
 80027cc:	801a      	strh	r2, [r3, #0]
			break;
 80027ce:	e000      	b.n	80027d2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80027d0:	bf00      	nop
	}
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000000e 	.word	0x2000000e
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80027e8:	2201      	movs	r2, #1
 80027ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ee:	4802      	ldr	r0, [pc, #8]	; (80027f8 <ILI9341_Enable+0x14>)
 80027f0:	f001 fc26 	bl	8004040 <HAL_GPIO_WritePin>
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40020800 	.word	0x40020800

080027fc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002800:	f7ff fff0 	bl	80027e4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002804:	f7ff fecc 	bl	80025a0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002808:	f7ff ff7c 	bl	8002704 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800280c:	2001      	movs	r0, #1
 800280e:	f7ff fee9 	bl	80025e4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002816:	f000 fc99 	bl	800314c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800281a:	20cb      	movs	r0, #203	; 0xcb
 800281c:	f7ff fee2 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002820:	2039      	movs	r0, #57	; 0x39
 8002822:	f7ff ff01 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002826:	202c      	movs	r0, #44	; 0x2c
 8002828:	f7ff fefe 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f7ff fefb 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002832:	2034      	movs	r0, #52	; 0x34
 8002834:	f7ff fef8 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002838:	2002      	movs	r0, #2
 800283a:	f7ff fef5 	bl	8002628 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800283e:	20cf      	movs	r0, #207	; 0xcf
 8002840:	f7ff fed0 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff feef 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800284a:	20c1      	movs	r0, #193	; 0xc1
 800284c:	f7ff feec 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002850:	2030      	movs	r0, #48	; 0x30
 8002852:	f7ff fee9 	bl	8002628 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002856:	20e8      	movs	r0, #232	; 0xe8
 8002858:	f7ff fec4 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800285c:	2085      	movs	r0, #133	; 0x85
 800285e:	f7ff fee3 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f7ff fee0 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002868:	2078      	movs	r0, #120	; 0x78
 800286a:	f7ff fedd 	bl	8002628 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800286e:	20ea      	movs	r0, #234	; 0xea
 8002870:	f7ff feb8 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff fed7 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fed4 	bl	8002628 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002880:	20ed      	movs	r0, #237	; 0xed
 8002882:	f7ff feaf 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002886:	2064      	movs	r0, #100	; 0x64
 8002888:	f7ff fece 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800288c:	2003      	movs	r0, #3
 800288e:	f7ff fecb 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002892:	2012      	movs	r0, #18
 8002894:	f7ff fec8 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002898:	2081      	movs	r0, #129	; 0x81
 800289a:	f7ff fec5 	bl	8002628 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800289e:	20f7      	movs	r0, #247	; 0xf7
 80028a0:	f7ff fea0 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80028a4:	2020      	movs	r0, #32
 80028a6:	f7ff febf 	bl	8002628 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80028aa:	20c0      	movs	r0, #192	; 0xc0
 80028ac:	f7ff fe9a 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80028b0:	2023      	movs	r0, #35	; 0x23
 80028b2:	f7ff feb9 	bl	8002628 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80028b6:	20c1      	movs	r0, #193	; 0xc1
 80028b8:	f7ff fe94 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80028bc:	2010      	movs	r0, #16
 80028be:	f7ff feb3 	bl	8002628 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80028c2:	20c5      	movs	r0, #197	; 0xc5
 80028c4:	f7ff fe8e 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80028c8:	203e      	movs	r0, #62	; 0x3e
 80028ca:	f7ff fead 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80028ce:	2028      	movs	r0, #40	; 0x28
 80028d0:	f7ff feaa 	bl	8002628 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80028d4:	20c7      	movs	r0, #199	; 0xc7
 80028d6:	f7ff fe85 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80028da:	2086      	movs	r0, #134	; 0x86
 80028dc:	f7ff fea4 	bl	8002628 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80028e0:	2036      	movs	r0, #54	; 0x36
 80028e2:	f7ff fe7f 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80028e6:	2048      	movs	r0, #72	; 0x48
 80028e8:	f7ff fe9e 	bl	8002628 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80028ec:	203a      	movs	r0, #58	; 0x3a
 80028ee:	f7ff fe79 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80028f2:	2055      	movs	r0, #85	; 0x55
 80028f4:	f7ff fe98 	bl	8002628 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80028f8:	20b1      	movs	r0, #177	; 0xb1
 80028fa:	f7ff fe73 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7ff fe92 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002904:	2018      	movs	r0, #24
 8002906:	f7ff fe8f 	bl	8002628 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800290a:	20b6      	movs	r0, #182	; 0xb6
 800290c:	f7ff fe6a 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002910:	2008      	movs	r0, #8
 8002912:	f7ff fe89 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002916:	2082      	movs	r0, #130	; 0x82
 8002918:	f7ff fe86 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800291c:	2027      	movs	r0, #39	; 0x27
 800291e:	f7ff fe83 	bl	8002628 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002922:	20f2      	movs	r0, #242	; 0xf2
 8002924:	f7ff fe5e 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff fe7d 	bl	8002628 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800292e:	2026      	movs	r0, #38	; 0x26
 8002930:	f7ff fe58 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff fe77 	bl	8002628 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800293a:	20e0      	movs	r0, #224	; 0xe0
 800293c:	f7ff fe52 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002940:	200f      	movs	r0, #15
 8002942:	f7ff fe71 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002946:	2031      	movs	r0, #49	; 0x31
 8002948:	f7ff fe6e 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800294c:	202b      	movs	r0, #43	; 0x2b
 800294e:	f7ff fe6b 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002952:	200c      	movs	r0, #12
 8002954:	f7ff fe68 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002958:	200e      	movs	r0, #14
 800295a:	f7ff fe65 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800295e:	2008      	movs	r0, #8
 8002960:	f7ff fe62 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002964:	204e      	movs	r0, #78	; 0x4e
 8002966:	f7ff fe5f 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800296a:	20f1      	movs	r0, #241	; 0xf1
 800296c:	f7ff fe5c 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002970:	2037      	movs	r0, #55	; 0x37
 8002972:	f7ff fe59 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002976:	2007      	movs	r0, #7
 8002978:	f7ff fe56 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800297c:	2010      	movs	r0, #16
 800297e:	f7ff fe53 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002982:	2003      	movs	r0, #3
 8002984:	f7ff fe50 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002988:	200e      	movs	r0, #14
 800298a:	f7ff fe4d 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800298e:	2009      	movs	r0, #9
 8002990:	f7ff fe4a 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff fe47 	bl	8002628 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800299a:	20e1      	movs	r0, #225	; 0xe1
 800299c:	f7ff fe22 	bl	80025e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fe41 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80029a6:	200e      	movs	r0, #14
 80029a8:	f7ff fe3e 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80029ac:	2014      	movs	r0, #20
 80029ae:	f7ff fe3b 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f7ff fe38 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80029b8:	2011      	movs	r0, #17
 80029ba:	f7ff fe35 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80029be:	2007      	movs	r0, #7
 80029c0:	f7ff fe32 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80029c4:	2031      	movs	r0, #49	; 0x31
 80029c6:	f7ff fe2f 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80029ca:	20c1      	movs	r0, #193	; 0xc1
 80029cc:	f7ff fe2c 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80029d0:	2048      	movs	r0, #72	; 0x48
 80029d2:	f7ff fe29 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80029d6:	2008      	movs	r0, #8
 80029d8:	f7ff fe26 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80029dc:	200f      	movs	r0, #15
 80029de:	f7ff fe23 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80029e2:	200c      	movs	r0, #12
 80029e4:	f7ff fe20 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80029e8:	2031      	movs	r0, #49	; 0x31
 80029ea:	f7ff fe1d 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80029ee:	2036      	movs	r0, #54	; 0x36
 80029f0:	f7ff fe1a 	bl	8002628 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80029f4:	200f      	movs	r0, #15
 80029f6:	f7ff fe17 	bl	8002628 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80029fa:	2011      	movs	r0, #17
 80029fc:	f7ff fdf2 	bl	80025e4 <ILI9341_Write_Command>
HAL_Delay(120);
 8002a00:	2078      	movs	r0, #120	; 0x78
 8002a02:	f000 fba3 	bl	800314c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002a06:	2029      	movs	r0, #41	; 0x29
 8002a08:	f7ff fdec 	bl	80025e4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fe97 	bl	8002740 <ILI9341_Set_Rotation>
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a1c:	b08d      	sub	sp, #52	; 0x34
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	6039      	str	r1, [r7, #0]
 8002a24:	80fb      	strh	r3, [r7, #6]
 8002a26:	466b      	mov	r3, sp
 8002a28:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a36:	d202      	bcs.n	8002a3e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	e002      	b.n	8002a44 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a4a:	4840      	ldr	r0, [pc, #256]	; (8002b4c <ILI9341_Draw_Colour_Burst+0x134>)
 8002a4c:	f001 faf8 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a56:	483d      	ldr	r0, [pc, #244]	; (8002b4c <ILI9341_Draw_Colour_Burst+0x134>)
 8002a58:	f001 faf2 	bl	8004040 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a68:	460b      	mov	r3, r1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	4688      	mov	r8, r1
 8002a72:	4699      	mov	r9, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a88:	2300      	movs	r3, #0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	00eb      	lsls	r3, r5, #3
 8002a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9c:	00e2      	lsls	r2, r4, #3
 8002a9e:	1dcb      	adds	r3, r1, #7
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	ebad 0d03 	sub.w	sp, sp, r3
 8002aa8:	466b      	mov	r3, sp
 8002aaa:	3300      	adds	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	e00e      	b.n	8002ad2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	4413      	add	r3, r2
 8002aba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002abe:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	b2d1      	uxtb	r1, r2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	3302      	adds	r3, #2
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3ec      	bcc.n	8002ab4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8002af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002af4:	fb01 f202 	mul.w	r2, r1, r2
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d010      	beq.n	8002b24 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	e009      	b.n	8002b1c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	230a      	movs	r3, #10
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	480f      	ldr	r0, [pc, #60]	; (8002b50 <ILI9341_Draw_Colour_Burst+0x138>)
 8002b12:	f002 fe20 	bl	8005756 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d3f1      	bcc.n	8002b08 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	230a      	movs	r3, #10
 8002b2a:	69b9      	ldr	r1, [r7, #24]
 8002b2c:	4808      	ldr	r0, [pc, #32]	; (8002b50 <ILI9341_Draw_Colour_Burst+0x138>)
 8002b2e:	f002 fe12 	bl	8005756 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b32:	2201      	movs	r2, #1
 8002b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <ILI9341_Draw_Colour_Burst+0x134>)
 8002b3a:	f001 fa81 	bl	8004040 <HAL_GPIO_WritePin>
 8002b3e:	46b5      	mov	sp, r6
}
 8002b40:	bf00      	nop
 8002b42:	3734      	adds	r7, #52	; 0x34
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	200002c0 	.word	0x200002c0

08002b54 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <ILI9341_Fill_Screen+0x44>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <ILI9341_Fill_Screen+0x48>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7ff fd7d 	bl	800266c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <ILI9341_Fill_Screen+0x44>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <ILI9341_Fill_Screen+0x48>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff ff44 	bl	8002a18 <ILI9341_Draw_Colour_Burst>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	2000000e 	.word	0x2000000e
 8002b9c:	2000000c 	.word	0x2000000c

08002ba0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
 8002baa:	460b      	mov	r3, r1
 8002bac:	80bb      	strh	r3, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002bb2:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <ILI9341_Draw_Pixel+0x1a4>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f080 80be 	bcs.w	8002d3c <ILI9341_Draw_Pixel+0x19c>
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <ILI9341_Draw_Pixel+0x1a8>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	88ba      	ldrh	r2, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f080 80b7 	bcs.w	8002d3c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bd4:	485d      	ldr	r0, [pc, #372]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002bd6:	f001 fa33 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be0:	485a      	ldr	r0, [pc, #360]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002be2:	f001 fa2d 	bl	8004040 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002be6:	202a      	movs	r0, #42	; 0x2a
 8002be8:	f7ff fcea 	bl	80025c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002bec:	2201      	movs	r2, #1
 8002bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf2:	4856      	ldr	r0, [pc, #344]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002bf4:	f001 fa24 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bfe:	4853      	ldr	r0, [pc, #332]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c00:	f001 fa1e 	bl	8004040 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002c04:	2200      	movs	r2, #0
 8002c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c0a:	4850      	ldr	r0, [pc, #320]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c0c:	f001 fa18 	bl	8004040 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	753b      	strb	r3, [r7, #20]
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	757b      	strb	r3, [r7, #21]
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	3301      	adds	r3, #1
 8002c24:	121b      	asrs	r3, r3, #8
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	75bb      	strb	r3, [r7, #22]
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002c34:	f107 0114 	add.w	r1, r7, #20
 8002c38:	2301      	movs	r3, #1
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4844      	ldr	r0, [pc, #272]	; (8002d50 <ILI9341_Draw_Pixel+0x1b0>)
 8002c3e:	f002 fd8a 	bl	8005756 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c42:	2201      	movs	r2, #1
 8002c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c48:	4840      	ldr	r0, [pc, #256]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c4a:	f001 f9f9 	bl	8004040 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c54:	483d      	ldr	r0, [pc, #244]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c56:	f001 f9f3 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c60:	483a      	ldr	r0, [pc, #232]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c62:	f001 f9ed 	bl	8004040 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002c66:	202b      	movs	r0, #43	; 0x2b
 8002c68:	f7ff fcaa 	bl	80025c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c72:	4836      	ldr	r0, [pc, #216]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c74:	f001 f9e4 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7e:	4833      	ldr	r0, [pc, #204]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c80:	f001 f9de 	bl	8004040 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	4830      	ldr	r0, [pc, #192]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002c8c:	f001 f9d8 	bl	8004040 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	743b      	strb	r3, [r7, #16]
 8002c9a:	88bb      	ldrh	r3, [r7, #4]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	747b      	strb	r3, [r7, #17]
 8002ca0:	88bb      	ldrh	r3, [r7, #4]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	121b      	asrs	r3, r3, #8
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	74bb      	strb	r3, [r7, #18]
 8002caa:	88bb      	ldrh	r3, [r7, #4]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002cb4:	f107 0110 	add.w	r1, r7, #16
 8002cb8:	2301      	movs	r3, #1
 8002cba:	2204      	movs	r2, #4
 8002cbc:	4824      	ldr	r0, [pc, #144]	; (8002d50 <ILI9341_Draw_Pixel+0x1b0>)
 8002cbe:	f002 fd4a 	bl	8005756 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cc8:	4820      	ldr	r0, [pc, #128]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002cca:	f001 f9b9 	bl	8004040 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd4:	481d      	ldr	r0, [pc, #116]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002cd6:	f001 f9b3 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce0:	481a      	ldr	r0, [pc, #104]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002ce2:	f001 f9ad 	bl	8004040 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002ce6:	202c      	movs	r0, #44	; 0x2c
 8002ce8:	f7ff fc6a 	bl	80025c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002cec:	2201      	movs	r2, #1
 8002cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf2:	4816      	ldr	r0, [pc, #88]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002cf4:	f001 f9a4 	bl	8004040 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfe:	4813      	ldr	r0, [pc, #76]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002d00:	f001 f99e 	bl	8004040 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d0a:	4810      	ldr	r0, [pc, #64]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002d0c:	f001 f998 	bl	8004040 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	733b      	strb	r3, [r7, #12]
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002d20:	f107 010c 	add.w	r1, r7, #12
 8002d24:	2301      	movs	r3, #1
 8002d26:	2202      	movs	r2, #2
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <ILI9341_Draw_Pixel+0x1b0>)
 8002d2a:	f002 fd14 	bl	8005756 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d34:	4805      	ldr	r0, [pc, #20]	; (8002d4c <ILI9341_Draw_Pixel+0x1ac>)
 8002d36:	f001 f983 	bl	8004040 <HAL_GPIO_WritePin>
 8002d3a:	e000      	b.n	8002d3e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002d3c:	bf00      	nop
	
}
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000000e 	.word	0x2000000e
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	200002c0 	.word	0x200002c0

08002d54 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	80fb      	strh	r3, [r7, #6]
 8002d66:	4603      	mov	r3, r0
 8002d68:	80bb      	strh	r3, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	807b      	strh	r3, [r7, #2]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002d72:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <ILI9341_Draw_Rectangle+0xb0>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d23d      	bcs.n	8002dfa <ILI9341_Draw_Rectangle+0xa6>
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <ILI9341_Draw_Rectangle+0xb4>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	88ba      	ldrh	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d237      	bcs.n	8002dfa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <ILI9341_Draw_Rectangle+0xb0>)
 8002d92:	8812      	ldrh	r2, [r2, #0]
 8002d94:	b292      	uxth	r2, r2
 8002d96:	4293      	cmp	r3, r2
 8002d98:	dd05      	ble.n	8002da6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <ILI9341_Draw_Rectangle+0xb0>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002da6:	88ba      	ldrh	r2, [r7, #4]
 8002da8:	883b      	ldrh	r3, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a16      	ldr	r2, [pc, #88]	; (8002e08 <ILI9341_Draw_Rectangle+0xb4>)
 8002dae:	8812      	ldrh	r2, [r2, #0]
 8002db0:	b292      	uxth	r2, r2
 8002db2:	4293      	cmp	r3, r2
 8002db4:	dd05      	ble.n	8002dc2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <ILI9341_Draw_Rectangle+0xb4>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	88bb      	ldrh	r3, [r7, #4]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29c      	uxth	r4, r3
 8002dce:	88ba      	ldrh	r2, [r7, #4]
 8002dd0:	883b      	ldrh	r3, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	88b9      	ldrh	r1, [r7, #4]
 8002ddc:	88f8      	ldrh	r0, [r7, #6]
 8002dde:	4622      	mov	r2, r4
 8002de0:	f7ff fc44 	bl	800266c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002de4:	883b      	ldrh	r3, [r7, #0]
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	8b3b      	ldrh	r3, [r7, #24]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe10 	bl	8002a18 <ILI9341_Draw_Colour_Burst>
 8002df8:	e000      	b.n	8002dfc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002dfa:	bf00      	nop
}
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000000e 	.word	0x2000000e
 8002e08:	2000000c 	.word	0x2000000c

08002e0c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002e12:	2310      	movs	r3, #16
 8002e14:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002e1a:	e019      	b.n	8002e50 <TP_Read+0x44>
    {
        value <<= 1;
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2108      	movs	r1, #8
 8002e26:	480e      	ldr	r0, [pc, #56]	; (8002e60 <TP_Read+0x54>)
 8002e28:	f001 f90a 	bl	8004040 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2108      	movs	r1, #8
 8002e30:	480b      	ldr	r0, [pc, #44]	; (8002e60 <TP_Read+0x54>)
 8002e32:	f001 f905 	bl	8004040 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002e36:	2110      	movs	r1, #16
 8002e38:	4809      	ldr	r0, [pc, #36]	; (8002e60 <TP_Read+0x54>)
 8002e3a:	f001 f8e9 	bl	8004010 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <TP_Read+0x3e>
        {
            value++;
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e2      	bne.n	8002e1c <TP_Read+0x10>
    };

    return value;
 8002e56:	88bb      	ldrh	r3, [r7, #4]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000

08002e64 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002e6e:	2308      	movs	r3, #8
 8002e70:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002e72:	2200      	movs	r2, #0
 8002e74:	2108      	movs	r1, #8
 8002e76:	4815      	ldr	r0, [pc, #84]	; (8002ecc <TP_Write+0x68>)
 8002e78:	f001 f8e2 	bl	8004040 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002e7c:	e01e      	b.n	8002ebc <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	da05      	bge.n	8002e92 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002e86:	2201      	movs	r2, #1
 8002e88:	2120      	movs	r1, #32
 8002e8a:	4810      	ldr	r0, [pc, #64]	; (8002ecc <TP_Write+0x68>)
 8002e8c:	f001 f8d8 	bl	8004040 <HAL_GPIO_WritePin>
 8002e90:	e004      	b.n	8002e9c <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2120      	movs	r1, #32
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <TP_Write+0x68>)
 8002e98:	f001 f8d2 	bl	8004040 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	4809      	ldr	r0, [pc, #36]	; (8002ecc <TP_Write+0x68>)
 8002ea8:	f001 f8ca 	bl	8004040 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002eac:	2200      	movs	r2, #0
 8002eae:	2108      	movs	r1, #8
 8002eb0:	4806      	ldr	r0, [pc, #24]	; (8002ecc <TP_Write+0x68>)
 8002eb2:	f001 f8c5 	bl	8004040 <HAL_GPIO_WritePin>
        i--;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1dd      	bne.n	8002e7e <TP_Write+0x1a>
    };
}
 8002ec2:	bf00      	nop
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2108      	movs	r1, #8
 8002edc:	485a      	ldr	r0, [pc, #360]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002ede:	f001 f8af 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	4858      	ldr	r0, [pc, #352]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002ee8:	f001 f8aa 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002eec:	2201      	movs	r2, #1
 8002eee:	2140      	movs	r1, #64	; 0x40
 8002ef0:	4855      	ldr	r0, [pc, #340]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002ef2:	f001 f8a5 	bl	8004040 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002efa:	2300      	movs	r3, #0
 8002efc:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f06:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	; 0x40
 8002f10:	484d      	ldr	r0, [pc, #308]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002f12:	f001 f895 	bl	8004040 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002f16:	e023      	b.n	8002f60 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002f18:	2090      	movs	r0, #144	; 0x90
 8002f1a:	f7ff ffa3 	bl	8002e64 <TP_Write>

				rawy = TP_Read();	
 8002f1e:	f7ff ff75 	bl	8002e0c <TP_Read>
 8002f22:	4603      	mov	r3, r0
 8002f24:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002f26:	89fb      	ldrh	r3, [r7, #14]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002f36:	20d0      	movs	r0, #208	; 0xd0
 8002f38:	f7ff ff94 	bl	8002e64 <TP_Write>
        rawx = TP_Read();
 8002f3c:	f7ff ff66 	bl	8002e0c <TP_Read>
 8002f40:	4603      	mov	r3, r0
 8002f42:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002f44:	89bb      	ldrh	r3, [r7, #12]
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	4413      	add	r3, r2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002f4c:	89bb      	ldrh	r3, [r7, #12]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	61fb      	str	r3, [r7, #28]
        samples--;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <TP_Read_Coordinates+0xa4>
 8002f66:	2104      	movs	r1, #4
 8002f68:	4837      	ldr	r0, [pc, #220]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002f6a:	f001 f851 	bl	8004010 <HAL_GPIO_ReadPin>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0d1      	beq.n	8002f18 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002f74:	2201      	movs	r2, #1
 8002f76:	2140      	movs	r1, #64	; 0x40
 8002f78:	4833      	ldr	r0, [pc, #204]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002f7a:	f001 f861 	bl	8004040 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f84:	d14d      	bne.n	8003022 <TP_Read_Coordinates+0x152>
 8002f86:	2104      	movs	r1, #4
 8002f88:	482f      	ldr	r0, [pc, #188]	; (8003048 <TP_Read_Coordinates+0x178>)
 8002f8a:	f001 f841 	bl	8004010 <HAL_GPIO_ReadPin>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d146      	bne.n	8003022 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002fb0:	89bb      	ldrh	r3, [r7, #12]
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	425b      	negs	r3, r3
 8002fba:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002fbc:	89ba      	ldrh	r2, [r7, #12]
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <TP_Read_Coordinates+0x17c>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	0852      	lsrs	r2, r2, #1
 8002fc8:	4413      	add	r3, r2
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002fda:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003040 <TP_Read_Coordinates+0x170>
 8002fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002fe2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002fe6:	ee17 3a90 	vmov	r3, s15
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002ff0:	89fb      	ldrh	r3, [r7, #14]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TP_Read_Coordinates+0x180>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	09db      	lsrs	r3, r3, #7
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b0f      	subs	r3, #15
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003006:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003040 <TP_Read_Coordinates+0x170>
 800300a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3302      	adds	r3, #2
 8003012:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003016:	ee17 2a90 	vmov	r2, s15
 800301a:	b292      	uxth	r2, r2
 800301c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 800301e:	2301      	movs	r3, #1
 8003020:	e007      	b.n	8003032 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3302      	adds	r3, #2
 800302c:	2200      	movs	r2, #0
 800302e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8003030:	2300      	movs	r3, #0
		}
}
 8003032:	4618      	mov	r0, r3
 8003034:	3728      	adds	r7, #40	; 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	f3af 8000 	nop.w
 8003040:	28f5c28f 	.word	0x28f5c28f
 8003044:	3ff28f5c 	.word	0x3ff28f5c
 8003048:	40021000 	.word	0x40021000
 800304c:	e01e01e1 	.word	0xe01e01e1
 8003050:	a0a0a0a1 	.word	0xa0a0a0a1

08003054 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003058:	2104      	movs	r1, #4
 800305a:	4805      	ldr	r0, [pc, #20]	; (8003070 <TP_Touchpad_Pressed+0x1c>)
 800305c:	f000 ffd8 	bl	8004010 <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800306a:	2300      	movs	r3, #0
	}
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_Init+0x34>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_Init+0x34>)
 800307e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003082:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_Init+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_Init+0x34>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 fd3d 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	2000      	movs	r0, #0
 8003098:	f000 f808 	bl	80030ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7fe fe08 	bl	8001cb0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00

080030ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_InitTick+0x54>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_InitTick+0x58>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fd55 	bl	8003b7a <HAL_SYSTICK_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e00e      	b.n	80030f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d80a      	bhi.n	80030f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e0:	2200      	movs	r2, #0
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	f000 fd1d 	bl	8003b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <HAL_InitTick+0x5c>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000008 	.word	0x20000008
 8003104:	20000014 	.word	0x20000014
 8003108:	20000010 	.word	0x20000010

0800310c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_IncTick+0x20>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_IncTick+0x24>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4413      	add	r3, r2
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_IncTick+0x24>)
 800311e:	6013      	str	r3, [r2, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000014 	.word	0x20000014
 8003130:	200004c8 	.word	0x200004c8

08003134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return uwTick;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetTick+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	200004c8 	.word	0x200004c8

0800314c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff ffee 	bl	8003134 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d005      	beq.n	8003172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_Delay+0x44>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003172:	bf00      	nop
 8003174:	f7ff ffde 	bl	8003134 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d8f7      	bhi.n	8003174 <HAL_Delay+0x28>
  {
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000014 	.word	0x20000014

08003194 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e031      	b.n	800320e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fa6c 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_ADC_Init+0x84>)
 80031d8:	4013      	ands	r3, r2
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 faca 	bl	800377c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
 80031fe:	e001      	b.n	8003204 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	ffffeefd 	.word	0xffffeefd

0800321c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADC_Start+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0ad      	b.n	8003392 <HAL_ADC_Start+0x176>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d018      	beq.n	800327e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_ADC_Start+0x184>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a50      	ldr	r2, [pc, #320]	; (80033a4 <HAL_ADC_Start+0x188>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9a      	lsrs	r2, r3, #18
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d175      	bne.n	8003378 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <HAL_ADC_Start+0x18c>)
 8003292:	4013      	ands	r3, r2
 8003294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c6:	d106      	bne.n	80032d6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f023 0206 	bic.w	r2, r3, #6
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
 80032d4:	e002      	b.n	80032dc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_ADC_Start+0x190>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d143      	bne.n	8003390 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e03a      	b.n	8003390 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_ADC_Start+0x194>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10e      	bne.n	8003342 <HAL_ADC_Start+0x126>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d107      	bne.n	8003342 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003340:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_ADC_Start+0x190>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d120      	bne.n	8003390 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_ADC_Start+0x198>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d11b      	bne.n	8003390 <HAL_ADC_Start+0x174>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d114      	bne.n	8003390 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	e00b      	b.n	8003390 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f043 0210 	orr.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000008 	.word	0x20000008
 80033a4:	431bde83 	.word	0x431bde83
 80033a8:	fffff8fe 	.word	0xfffff8fe
 80033ac:	40012300 	.word	0x40012300
 80033b0:	40012000 	.word	0x40012000
 80033b4:	40012200 	.word	0x40012200

080033b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d113      	bne.n	80033fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e4:	d10b      	bne.n	80033fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e063      	b.n	80034c6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033fe:	f7ff fe99 	bl	8003134 <HAL_GetTick>
 8003402:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003404:	e021      	b.n	800344a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d01d      	beq.n	800344a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_ADC_PollForConversion+0x6c>
 8003414:	f7ff fe8e 	bl	8003134 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d212      	bcs.n	800344a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d00b      	beq.n	800344a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e03d      	b.n	80034c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d1d6      	bne.n	8003406 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0212 	mvn.w	r2, #18
 8003460:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d123      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003480:	2b00      	cmp	r3, #0
 8003482:	d11f      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800349c:	2b00      	cmp	r3, #0
 800349e:	d111      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x1c>
 8003500:	2302      	movs	r3, #2
 8003502:	e12a      	b.n	800375a <HAL_ADC_ConfigChannel+0x272>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b09      	cmp	r3, #9
 8003512:	d93a      	bls.n	800358a <HAL_ADC_ConfigChannel+0xa2>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351c:	d035      	beq.n	800358a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	3b1e      	subs	r3, #30
 8003534:	2207      	movs	r2, #7
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	400a      	ands	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a87      	ldr	r2, [pc, #540]	; (8003768 <HAL_ADC_ConfigChannel+0x280>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10a      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68d9      	ldr	r1, [r3, #12]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	061a      	lsls	r2, r3, #24
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003562:	e035      	b.n	80035d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	4603      	mov	r3, r0
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4403      	add	r3, r0
 800357c:	3b1e      	subs	r3, #30
 800357e:	409a      	lsls	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003588:	e022      	b.n	80035d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6919      	ldr	r1, [r3, #16]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	2207      	movs	r2, #7
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43da      	mvns	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	400a      	ands	r2, r1
 80035ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	4603      	mov	r3, r0
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4403      	add	r3, r0
 80035c6:	409a      	lsls	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	d824      	bhi.n	8003622 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b05      	subs	r3, #5
 80035ea:	221f      	movs	r2, #31
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43da      	mvns	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	400a      	ands	r2, r1
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	3b05      	subs	r3, #5
 8003614:	fa00 f203 	lsl.w	r2, r0, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	635a      	str	r2, [r3, #52]	; 0x34
 8003620:	e04c      	b.n	80036bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d824      	bhi.n	8003674 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b23      	subs	r3, #35	; 0x23
 800363c:	221f      	movs	r2, #31
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	400a      	ands	r2, r1
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4618      	mov	r0, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b23      	subs	r3, #35	; 0x23
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
 8003672:	e023      	b.n	80036bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3b41      	subs	r3, #65	; 0x41
 8003686:	221f      	movs	r2, #31
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43da      	mvns	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	3b41      	subs	r3, #65	; 0x41
 80036b0:	fa00 f203 	lsl.w	r2, r0, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <HAL_ADC_ConfigChannel+0x284>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10a      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1f4>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 80036d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <HAL_ADC_ConfigChannel+0x284>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d109      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x212>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b12      	cmp	r3, #18
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 80036f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_ADC_ConfigChannel+0x284>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d125      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x268>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a17      	ldr	r2, [pc, #92]	; (8003768 <HAL_ADC_ConfigChannel+0x280>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x22e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b11      	cmp	r3, #17
 8003714:	d11c      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <HAL_ADC_ConfigChannel+0x288>)
 800371c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003720:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_ADC_ConfigChannel+0x280>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d111      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_ADC_ConfigChannel+0x28c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a11      	ldr	r2, [pc, #68]	; (8003778 <HAL_ADC_ConfigChannel+0x290>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9a      	lsrs	r2, r3, #18
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003742:	e002      	b.n	800374a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f9      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	10000012 	.word	0x10000012
 800376c:	40012000 	.word	0x40012000
 8003770:	40012300 	.word	0x40012300
 8003774:	20000008 	.word	0x20000008
 8003778:	431bde83 	.word	0x431bde83

0800377c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003784:	4b78      	ldr	r3, [pc, #480]	; (8003968 <ADC_Init+0x1ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a77      	ldr	r2, [pc, #476]	; (8003968 <ADC_Init+0x1ec>)
 800378a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800378e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003790:	4b75      	ldr	r3, [pc, #468]	; (8003968 <ADC_Init+0x1ec>)
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4973      	ldr	r1, [pc, #460]	; (8003968 <ADC_Init+0x1ec>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	021a      	lsls	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6899      	ldr	r1, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	4a58      	ldr	r2, [pc, #352]	; (800396c <ADC_Init+0x1f0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800381e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6899      	ldr	r1, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e00f      	b.n	8003876 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0202 	bic.w	r2, r2, #2
 8003884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6899      	ldr	r1, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	005a      	lsls	r2, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	3b01      	subs	r3, #1
 80038d0:	035a      	lsls	r2, r3, #13
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	e007      	b.n	80038ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	3b01      	subs	r3, #1
 8003908:	051a      	lsls	r2, r3, #20
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800392e:	025a      	lsls	r2, r3, #9
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6899      	ldr	r1, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	029a      	lsls	r2, r3, #10
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40012300 	.word	0x40012300
 800396c:	0f000001 	.word	0x0f000001

08003970 <__NVIC_SetPriorityGrouping>:
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800398c:	4013      	ands	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <__NVIC_SetPriorityGrouping+0x44>)
 800399a:	4313      	orrs	r3, r2
 800399c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800399e:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <__NVIC_SetPriorityGrouping+0x40>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	60d3      	str	r3, [r2, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000ed00 	.word	0xe000ed00
 80039b4:	05fa0000 	.word	0x05fa0000

080039b8 <__NVIC_GetPriorityGrouping>:
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <__NVIC_GetPriorityGrouping+0x18>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0307 	and.w	r3, r3, #7
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_EnableIRQ>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	db0b      	blt.n	80039fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	4907      	ldr	r1, [pc, #28]	; (8003a0c <__NVIC_EnableIRQ+0x38>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2001      	movs	r0, #1
 80039f6:	fa00 f202 	lsl.w	r2, r0, r2
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	; (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff29 	bl	8003970 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff3e 	bl	80039b8 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff31 	bl	80039d4 <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ffa2 	bl	8003acc <SysTick_Config>
 8003b88:	4603      	mov	r3, r0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff fac8 	bl	8003134 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d008      	beq.n	8003bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e052      	b.n	8003c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0216 	bic.w	r2, r2, #22
 8003bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <HAL_DMA_Abort+0x62>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0208 	bic.w	r2, r2, #8
 8003c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c14:	e013      	b.n	8003c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c16:	f7ff fa8d 	bl	8003134 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d90c      	bls.n	8003c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e015      	b.n	8003c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e4      	bne.n	8003c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	223f      	movs	r2, #63	; 0x3f
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00c      	b.n	8003caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2205      	movs	r2, #5
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e175      	b.n	8003fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f040 8164 	bne.w	8003fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d00b      	beq.n	8003d16 <HAL_GPIO_Init+0x5e>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d0a:	2b11      	cmp	r3, #17
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b12      	cmp	r3, #18
 8003d14:	d130      	bne.n	8003d78 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 0201 	and.w	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x100>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d123      	bne.n	8003e00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80be 	beq.w	8003fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e5a:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <HAL_GPIO_Init+0x328>)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	3302      	adds	r3, #2
 8003e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_GPIO_Init+0x32c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d037      	beq.n	8003ef6 <HAL_GPIO_Init+0x23e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_GPIO_Init+0x330>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_GPIO_Init+0x23a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a56      	ldr	r2, [pc, #344]	; (8003fec <HAL_GPIO_Init+0x334>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02b      	beq.n	8003eee <HAL_GPIO_Init+0x236>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a55      	ldr	r2, [pc, #340]	; (8003ff0 <HAL_GPIO_Init+0x338>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d025      	beq.n	8003eea <HAL_GPIO_Init+0x232>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a54      	ldr	r2, [pc, #336]	; (8003ff4 <HAL_GPIO_Init+0x33c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_GPIO_Init+0x22e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a53      	ldr	r2, [pc, #332]	; (8003ff8 <HAL_GPIO_Init+0x340>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d019      	beq.n	8003ee2 <HAL_GPIO_Init+0x22a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <HAL_GPIO_Init+0x344>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_GPIO_Init+0x226>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a51      	ldr	r2, [pc, #324]	; (8004000 <HAL_GPIO_Init+0x348>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <HAL_GPIO_Init+0x222>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a50      	ldr	r2, [pc, #320]	; (8004004 <HAL_GPIO_Init+0x34c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <HAL_GPIO_Init+0x21e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a4f      	ldr	r2, [pc, #316]	; (8004008 <HAL_GPIO_Init+0x350>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_GPIO_Init+0x21a>
 8003ece:	2309      	movs	r3, #9
 8003ed0:	e012      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ed2:	230a      	movs	r3, #10
 8003ed4:	e010      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	e00e      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eda:	2307      	movs	r3, #7
 8003edc:	e00c      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ede:	2306      	movs	r3, #6
 8003ee0:	e00a      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	e008      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	e006      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eea:	2303      	movs	r3, #3
 8003eec:	e004      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	f002 0203 	and.w	r2, r2, #3
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	4093      	lsls	r3, r2
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f08:	4935      	ldr	r1, [pc, #212]	; (8003fe0 <HAL_GPIO_Init+0x328>)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f3a:	4a34      	ldr	r2, [pc, #208]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f64:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_GPIO_Init+0x354>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	f67f ae86 	bls.w	8003cd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40013800 	.word	0x40013800
 8003fe4:	40020000 	.word	0x40020000
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020c00 	.word	0x40020c00
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40021400 	.word	0x40021400
 8003ffc:	40021800 	.word	0x40021800
 8004000:	40021c00 	.word	0x40021c00
 8004004:	40022000 	.word	0x40022000
 8004008:	40022400 	.word	0x40022400
 800400c:	40013c00 	.word	0x40013c00

08004010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e001      	b.n	8004032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
 800404c:	4613      	mov	r3, r2
 800404e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800405c:	e003      	b.n	8004066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	041a      	lsls	r2, r3, #16
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	619a      	str	r2, [r3, #24]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fd24 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07f      	b.n	80041b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fcd6 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	; 0x24
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004104:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	e006      	b.n	800412c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800412a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d104      	bne.n	800413e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800413c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_I2C_Init+0x11c>)
 800414a:	430b      	orrs	r3, r1
 800414c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800415c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	ea42 0103 	orr.w	r1, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	021a      	lsls	r2, r3, #8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69d9      	ldr	r1, [r3, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1a      	ldr	r2, [r3, #32]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	02008000 	.word	0x02008000

080041c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d138      	bne.n	800424c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e032      	b.n	800424e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	d139      	bne.n	80042e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800427a:	2302      	movs	r3, #2
 800427c:	e033      	b.n	80042e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2224      	movs	r2, #36	; 0x24
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a04      	ldr	r2, [pc, #16]	; (8004310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004302:	6013      	str	r3, [r2, #0]
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a22      	ldr	r2, [pc, #136]	; (80043ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_PWREx_EnableOverDrive+0x98>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004336:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004342:	f7fe fef7 	bl	8003134 <HAL_GetTick>
 8004346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004348:	e009      	b.n	800435e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800434a:	f7fe fef3 	bl	8003134 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004358:	d901      	bls.n	800435e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e022      	b.n	80043a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800435e:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d1ee      	bne.n	800434a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004378:	f7fe fedc 	bl	8003134 <HAL_GetTick>
 800437c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800437e:	e009      	b.n	8004394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004380:	f7fe fed8 	bl	8003134 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800438e:	d901      	bls.n	8004394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e007      	b.n	80043a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a0:	d1ee      	bne.n	8004380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40007000 	.word	0x40007000

080043b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e29b      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8087 	beq.w	80044e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d8:	4b96      	ldr	r3, [pc, #600]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d00c      	beq.n	80043fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e4:	4b93      	ldr	r3, [pc, #588]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d112      	bne.n	8004416 <HAL_RCC_OscConfig+0x62>
 80043f0:	4b90      	ldr	r3, [pc, #576]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fc:	d10b      	bne.n	8004416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fe:	4b8d      	ldr	r3, [pc, #564]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d06c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x130>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d168      	bne.n	80044e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e275      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x7a>
 8004420:	4b84      	ldr	r3, [pc, #528]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a83      	ldr	r2, [pc, #524]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	e02e      	b.n	800448c <HAL_RCC_OscConfig+0xd8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x9c>
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a7e      	ldr	r2, [pc, #504]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800443c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7b      	ldr	r2, [pc, #492]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xd8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0xc0>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a72      	ldr	r2, [pc, #456]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xd8>
 8004474:	4b6f      	ldr	r3, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a6b      	ldr	r2, [pc, #428]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe fe4e 	bl	8003134 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fe fe4a 	bl	8003134 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e229      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xe8>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe fe3a 	bl	8003134 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe fe36 	bl	8003134 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e215      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b57      	ldr	r3, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x110>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d069      	beq.n	80045c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f2:	4b50      	ldr	r3, [pc, #320]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fe:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x190>
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x17a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1e9      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	493d      	ldr	r1, [pc, #244]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	e040      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b39      	ldr	r3, [pc, #228]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a38      	ldr	r2, [pc, #224]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fe fdec 	bl	8003134 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7fe fde8 	bl	8003134 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e1c7      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b30      	ldr	r3, [pc, #192]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4929      	ldr	r1, [pc, #164]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
 8004592:	e018      	b.n	80045c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fe fdc8 	bl	8003134 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fe fdc4 	bl	8003134 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1a3      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d038      	beq.n	8004644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d019      	beq.n	800460e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe fda5 	bl	8003134 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ee:	f7fe fda1 	bl	8003134 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e180      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x23a>
 800460c:	e01a      	b.n	8004644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460e:	4b09      	ldr	r3, [pc, #36]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	4a08      	ldr	r2, [pc, #32]	; (8004634 <HAL_RCC_OscConfig+0x280>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fe fd8b 	bl	8003134 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004622:	f7fe fd87 	bl	8003134 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d903      	bls.n	8004638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e166      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
 8004634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	4b92      	ldr	r3, [pc, #584]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ee      	bne.n	8004622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80a4 	beq.w	800479a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004652:	4b8c      	ldr	r3, [pc, #560]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10d      	bne.n	800467a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800465e:	4b89      	ldr	r3, [pc, #548]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4a88      	ldr	r2, [pc, #544]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6413      	str	r3, [r2, #64]	; 0x40
 800466a:	4b86      	ldr	r3, [pc, #536]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCC_OscConfig+0x4d4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d118      	bne.n	80046b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004686:	4b80      	ldr	r3, [pc, #512]	; (8004888 <HAL_RCC_OscConfig+0x4d4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7f      	ldr	r2, [pc, #508]	; (8004888 <HAL_RCC_OscConfig+0x4d4>)
 800468c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004692:	f7fe fd4f 	bl	8003134 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800469a:	f7fe fd4b 	bl	8003134 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e12a      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ac:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCC_OscConfig+0x4d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d106      	bne.n	80046ce <HAL_RCC_OscConfig+0x31a>
 80046c0:	4b70      	ldr	r3, [pc, #448]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a6f      	ldr	r2, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e02d      	b.n	800472a <HAL_RCC_OscConfig+0x376>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x33c>
 80046d6:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
 80046e2:	4b68      	ldr	r3, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a67      	ldr	r2, [pc, #412]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	e01c      	b.n	800472a <HAL_RCC_OscConfig+0x376>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d10c      	bne.n	8004712 <HAL_RCC_OscConfig+0x35e>
 80046f8:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a61      	ldr	r2, [pc, #388]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	f043 0304 	orr.w	r3, r3, #4
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	4b5f      	ldr	r3, [pc, #380]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a5e      	ldr	r2, [pc, #376]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	e00b      	b.n	800472a <HAL_RCC_OscConfig+0x376>
 8004712:	4b5c      	ldr	r3, [pc, #368]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	4a5b      	ldr	r2, [pc, #364]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6713      	str	r3, [r2, #112]	; 0x70
 800471e:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004724:	f023 0304 	bic.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d015      	beq.n	800475e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe fcff 	bl	8003134 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe fcfb 	bl	8003134 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0d8      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004750:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ee      	beq.n	800473a <HAL_RCC_OscConfig+0x386>
 800475c:	e014      	b.n	8004788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475e:	f7fe fce9 	bl	8003134 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004764:	e00a      	b.n	800477c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fe fce5 	bl	8003134 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0c2      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477c:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ee      	bne.n	8004766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80ae 	beq.w	8004900 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d06d      	beq.n	800488c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d14b      	bne.n	8004850 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a31      	ldr	r2, [pc, #196]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fe fcb6 	bl	8003134 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fe fcb2 	bl	8003134 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e091      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	061b      	lsls	r3, r3, #24
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	491b      	ldr	r1, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe fc84 	bl	8003134 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe fc80 	bl	8003134 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e05f      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x47c>
 800484e:	e057      	b.n	8004900 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0b      	ldr	r2, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fe fc6a 	bl	8003134 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe fc66 	bl	8003134 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e045      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_RCC_OscConfig+0x4d0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x4b0>
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x54c>
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <HAL_RCC_OscConfig+0x558>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d030      	beq.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d129      	bne.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d122      	bne.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048bc:	4013      	ands	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d119      	bne.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d10f      	bne.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 020f 	bic.w	r2, r3, #15
 800493e:	4965      	ldr	r1, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800497a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800498e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d040      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e073      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fe fb96 	bl	8003134 <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fe fb92 	bl	8003134 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e053      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d210      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 020f 	bic.w	r2, r3, #15
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1cc>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe faf2 	bl	80030ac <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800a780 	.word	0x0800a780
 8004ae0:	20000008 	.word	0x20000008
 8004ae4:	20000010 	.word	0x20000010

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b094      	sub	sp, #80	; 0x50
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
 8004af4:	2300      	movs	r3, #0
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	2300      	movs	r3, #0
 8004afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b00:	4b79      	ldr	r3, [pc, #484]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f200 80e1 	bhi.w	8004cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1a:	e0db      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b73      	ldr	r3, [pc, #460]	; (8004cec <HAL_RCC_GetSysClockFreq+0x204>)
 8004b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b20:	e0db      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b26:	e0d8      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b28:	4b6f      	ldr	r3, [pc, #444]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b32:	4b6d      	ldr	r3, [pc, #436]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d063      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2200      	movs	r2, #0
 8004b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
 8004b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	f04f 0000 	mov.w	r0, #0
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	0159      	lsls	r1, r3, #5
 8004b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6c:	0150      	lsls	r0, r2, #5
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4621      	mov	r1, r4
 8004b74:	1a51      	subs	r1, r2, r1
 8004b76:	6139      	str	r1, [r7, #16]
 8004b78:	4629      	mov	r1, r5
 8004b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	018b      	lsls	r3, r1, #6
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b96:	4651      	mov	r1, sl
 8004b98:	018a      	lsls	r2, r1, #6
 8004b9a:	4651      	mov	r1, sl
 8004b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bba:	4690      	mov	r8, r2
 8004bbc:	4699      	mov	r9, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	eb18 0303 	adds.w	r3, r8, r3
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	462b      	mov	r3, r5
 8004bc8:	eb49 0303 	adc.w	r3, r9, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	024b      	lsls	r3, r1, #9
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004be4:	4621      	mov	r1, r4
 8004be6:	024a      	lsls	r2, r1, #9
 8004be8:	4610      	mov	r0, r2
 8004bea:	4619      	mov	r1, r3
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	2200      	movs	r2, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bf8:	f7fb fb7a 	bl	80002f0 <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4613      	mov	r3, r2
 8004c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c04:	e058      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c06:	4b38      	ldr	r3, [pc, #224]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	4611      	mov	r1, r2
 8004c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c16:	623b      	str	r3, [r7, #32]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	f04f 0000 	mov.w	r0, #0
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	0159      	lsls	r1, r3, #5
 8004c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c32:	0150      	lsls	r0, r2, #5
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4641      	mov	r1, r8
 8004c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c3e:	4649      	mov	r1, r9
 8004c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c58:	ebb2 040a 	subs.w	r4, r2, sl
 8004c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	00eb      	lsls	r3, r5, #3
 8004c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c6e:	00e2      	lsls	r2, r4, #3
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	eb45 0303 	adc.w	r3, r5, r3
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	028b      	lsls	r3, r1, #10
 8004c92:	4621      	mov	r1, r4
 8004c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c98:	4621      	mov	r1, r4
 8004c9a:	028a      	lsls	r2, r1, #10
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	61fa      	str	r2, [r7, #28]
 8004ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cac:	f7fb fb20 	bl	80002f0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cd2:	e002      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetSysClockFreq+0x204>)
 8004cd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3750      	adds	r7, #80	; 0x50
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	007a1200 	.word	0x007a1200

08004cf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000008 	.word	0x20000008

08004d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d10:	f7ff fff0 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	0a9b      	lsrs	r3, r3, #10
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	0800a790 	.word	0x0800a790

08004d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d38:	f7ff ffdc 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0b5b      	lsrs	r3, r3, #13
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	0800a790 	.word	0x0800a790

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d012      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d84:	4b69      	ldr	r3, [pc, #420]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	4a68      	ldr	r2, [pc, #416]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d8e:	6093      	str	r3, [r2, #8]
 8004d90:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	4964      	ldr	r1, [pc, #400]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db6:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	4959      	ldr	r1, [pc, #356]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d017      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004df2:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	494a      	ldr	r1, [pc, #296]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e10:	d101      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 808b 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e40:	4b3a      	ldr	r3, [pc, #232]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4c:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fe f966 	bl	8003134 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fe f962 	bl	8003134 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e38f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8a:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d035      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d02e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ed0:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d114      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fe f92a 	bl	8003134 <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	e00a      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee4:	f7fe f926 	bl	8003134 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e351      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ee      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f12:	d111      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	4901      	ldr	r1, [pc, #4]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40007000 	.word	0x40007000
 8004f34:	0ffffcff 	.word	0x0ffffcff
 8004f38:	4bac      	ldr	r3, [pc, #688]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4aab      	ldr	r2, [pc, #684]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	4ba9      	ldr	r3, [pc, #676]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f50:	49a6      	ldr	r1, [pc, #664]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f62:	4ba2      	ldr	r3, [pc, #648]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f68:	4aa0      	ldr	r2, [pc, #640]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f72:	4b9e      	ldr	r3, [pc, #632]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	499b      	ldr	r1, [pc, #620]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f90:	4b96      	ldr	r3, [pc, #600]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9e:	4993      	ldr	r1, [pc, #588]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb2:	4b8e      	ldr	r3, [pc, #568]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc0:	498a      	ldr	r1, [pc, #552]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd4:	4b85      	ldr	r3, [pc, #532]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	4982      	ldr	r1, [pc, #520]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ff6:	4b7d      	ldr	r3, [pc, #500]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	4979      	ldr	r1, [pc, #484]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005018:	4b74      	ldr	r3, [pc, #464]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	4971      	ldr	r1, [pc, #452]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800503a:	4b6c      	ldr	r3, [pc, #432]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f023 020c 	bic.w	r2, r3, #12
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	4968      	ldr	r1, [pc, #416]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800505c:	4b63      	ldr	r3, [pc, #396]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	4960      	ldr	r1, [pc, #384]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800507e:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	4957      	ldr	r1, [pc, #348]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050a0:	4b52      	ldr	r3, [pc, #328]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	494f      	ldr	r1, [pc, #316]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050c2:	4b4a      	ldr	r3, [pc, #296]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d0:	4946      	ldr	r1, [pc, #280]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050e4:	4b41      	ldr	r3, [pc, #260]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	493e      	ldr	r1, [pc, #248]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005106:	4b39      	ldr	r3, [pc, #228]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	4935      	ldr	r1, [pc, #212]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005136:	492d      	ldr	r1, [pc, #180]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005158:	4924      	ldr	r1, [pc, #144]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005168:	d101      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	4914      	ldr	r1, [pc, #80]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051bc:	490b      	ldr	r1, [pc, #44]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00f      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	4902      	ldr	r1, [pc, #8]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051e8:	e002      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051fc:	4b8a      	ldr	r3, [pc, #552]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005202:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	4986      	ldr	r1, [pc, #536]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005220:	4b81      	ldr	r3, [pc, #516]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005226:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005230:	497d      	ldr	r1, [pc, #500]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d006      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80d6 	beq.w	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800524c:	4b76      	ldr	r3, [pc, #472]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a75      	ldr	r2, [pc, #468]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005252:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005258:	f7fd ff6c 	bl	8003134 <HAL_GetTick>
 800525c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005260:	f7fd ff68 	bl	8003134 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	; 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e195      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005272:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d021      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11d      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005292:	4b65      	ldr	r3, [pc, #404]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005298:	0c1b      	lsrs	r3, r3, #16
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052a0:	4b61      	ldr	r3, [pc, #388]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	019a      	lsls	r2, r3, #6
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	061b      	lsls	r3, r3, #24
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	4958      	ldr	r1, [pc, #352]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02e      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f8:	d129      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005308:	4b47      	ldr	r3, [pc, #284]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530e:	0f1b      	lsrs	r3, r3, #28
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	019a      	lsls	r2, r3, #6
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	061b      	lsls	r3, r3, #24
 8005328:	431a      	orrs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	493e      	ldr	r1, [pc, #248]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533c:	f023 021f 	bic.w	r2, r3, #31
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	3b01      	subs	r3, #1
 8005346:	4938      	ldr	r1, [pc, #224]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01d      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005360:	0e1b      	lsrs	r3, r3, #24
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005368:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536e:	0f1b      	lsrs	r3, r3, #28
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	431a      	orrs	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	4926      	ldr	r1, [pc, #152]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d011      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	019a      	lsls	r2, r3, #6
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	061b      	lsls	r3, r3, #24
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	071b      	lsls	r3, r3, #28
 80053be:	491a      	ldr	r1, [pc, #104]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d2:	f7fd feaf 	bl	8003134 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053da:	f7fd feab 	bl	8003134 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b64      	cmp	r3, #100	; 0x64
 80053e6:	d901      	bls.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0d8      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	f040 80ce 	bne.w	800559c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a08      	ldr	r2, [pc, #32]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540c:	f7fd fe92 	bl	8003134 <HAL_GetTick>
 8005410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005412:	e00b      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005414:	f7fd fe8e 	bl	8003134 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d904      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0bb      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800542c:	4b5e      	ldr	r3, [pc, #376]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005438:	d0ec      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02e      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d12a      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005462:	4b51      	ldr	r3, [pc, #324]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005470:	4b4d      	ldr	r3, [pc, #308]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	0f1b      	lsrs	r3, r3, #28
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	019a      	lsls	r2, r3, #6
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	061b      	lsls	r3, r3, #24
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	071b      	lsls	r3, r3, #28
 8005496:	4944      	ldr	r1, [pc, #272]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800549e:	4b42      	ldr	r3, [pc, #264]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	3b01      	subs	r3, #1
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	493d      	ldr	r1, [pc, #244]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d022      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054cc:	d11d      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054dc:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	0f1b      	lsrs	r3, r3, #28
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	019a      	lsls	r2, r3, #6
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	431a      	orrs	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	4929      	ldr	r1, [pc, #164]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d028      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	0e1b      	lsrs	r3, r3, #24
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005524:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	019a      	lsls	r2, r3, #6
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	071b      	lsls	r3, r3, #28
 800554a:	4917      	ldr	r1, [pc, #92]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	4911      	ldr	r1, [pc, #68]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fd fdde 	bl	8003134 <HAL_GetTick>
 8005578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800557c:	f7fd fdda 	bl	8003134 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	; 0x64
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e007      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559a:	d1ef      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800

080055ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e01c      	b.n	80055f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	795b      	ldrb	r3, [r3, #5]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fc facc 	bl	8001b6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0204 	orr.w	r2, r2, #4
 80055e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e09d      	b.n	800574e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005622:	d009      	beq.n	8005638 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	61da      	str	r2, [r3, #28]
 800562a:	e005      	b.n	8005638 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fc fae8 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005678:	d902      	bls.n	8005680 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e002      	b.n	8005686 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005684:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800568e:	d007      	beq.n	80056a0 <HAL_SPI_Init+0xa0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	ea42 0103 	orr.w	r1, r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	f003 0204 	and.w	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800571c:	ea42 0103 	orr.w	r1, r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_SPI_Transmit+0x22>
 8005774:	2302      	movs	r3, #2
 8005776:	e158      	b.n	8005a2a <HAL_SPI_Transmit+0x2d4>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005780:	f7fd fcd8 	bl	8003134 <HAL_GetTick>
 8005784:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d002      	beq.n	800579c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	77fb      	strb	r3, [r7, #31]
    goto error;
 800579a:	e13d      	b.n	8005a18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Transmit+0x52>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057ac:	e134      	b.n	8005a18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2203      	movs	r2, #3
 80057b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f8:	d10f      	bne.n	800581a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005840:	d94b      	bls.n	80058da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0xfa>
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d13e      	bne.n	80058ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005874:	e02b      	b.n	80058ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b02      	cmp	r3, #2
 8005882:	d112      	bne.n	80058aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a8:	e011      	b.n	80058ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058aa:	f7fd fc43 	bl	8003134 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d803      	bhi.n	80058c2 <HAL_SPI_Transmit+0x16c>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x172>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d102      	bne.n	80058ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058cc:	e0a4      	b.n	8005a18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ce      	bne.n	8005876 <HAL_SPI_Transmit+0x120>
 80058d8:	e07c      	b.n	80059d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Transmit+0x192>
 80058e2:	8afb      	ldrh	r3, [r7, #22]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d170      	bne.n	80059ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d912      	bls.n	8005918 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f6:	881a      	ldrh	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b02      	subs	r3, #2
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005916:	e058      	b.n	80059ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800593e:	e044      	b.n	80059ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b02      	cmp	r3, #2
 800594c:	d12b      	bne.n	80059a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d912      	bls.n	800597e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b02      	subs	r3, #2
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800597c:	e025      	b.n	80059ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a4:	e011      	b.n	80059ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a6:	f7fd fbc5 	bl	8003134 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d803      	bhi.n	80059be <HAL_SPI_Transmit+0x268>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d102      	bne.n	80059c4 <HAL_SPI_Transmit+0x26e>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059c8:	e026      	b.n	8005a18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1b5      	bne.n	8005940 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f945 	bl	8005c68 <SPI_EndRxTxTransaction>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	77fb      	strb	r3, [r7, #31]
 8005a14:	e000      	b.n	8005a18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a44:	f7fd fb76 	bl	8003134 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	4413      	add	r3, r2
 8005a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a54:	f7fd fb6e 	bl	8003134 <HAL_GetTick>
 8005a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a5a:	4b39      	ldr	r3, [pc, #228]	; (8005b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	015b      	lsls	r3, r3, #5
 8005a60:	0d1b      	lsrs	r3, r3, #20
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a6a:	e054      	b.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d050      	beq.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a74:	f7fd fb5e 	bl	8003134 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d902      	bls.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d13d      	bne.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa2:	d111      	bne.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aac:	d004      	beq.n	8005ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d107      	bne.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d10f      	bne.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e017      	b.n	8005b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	bf0c      	ite	eq
 8005b26:	2301      	moveq	r3, #1
 8005b28:	2300      	movne	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d19b      	bne.n	8005a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000008 	.word	0x20000008

08005b44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b52:	f7fd faef 	bl	8003134 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	4413      	add	r3, r2
 8005b60:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b62:	f7fd fae7 	bl	8003134 <HAL_GetTick>
 8005b66:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b68:	4b3e      	ldr	r3, [pc, #248]	; (8005c64 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	00da      	lsls	r2, r3, #3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	0d1b      	lsrs	r3, r3, #20
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b80:	e062      	b.n	8005c48 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b88:	d109      	bne.n	8005b9e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005b9c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d050      	beq.n	8005c48 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba6:	f7fd fac5 	bl	8003134 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d902      	bls.n	8005bbc <SPI_WaitFifoStateUntilTimeout+0x78>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d13d      	bne.n	8005c38 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd4:	d111      	bne.n	8005bfa <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bde:	d004      	beq.n	8005bea <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	d107      	bne.n	8005bfa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c02:	d10f      	bne.n	8005c24 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e010      	b.n	8005c5a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4013      	ands	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d194      	bne.n	8005b82 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000008 	.word	0x20000008

08005c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ff5f 	bl	8005b44 <SPI_WaitFifoStateUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e027      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fec4 	bl	8005a34 <SPI_WaitFlagStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e014      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff38 	bl	8005b44 <SPI_WaitFifoStateUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e000      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e049      	b.n	8005d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fc f9b0 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 fac6 	bl	80062c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d001      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e054      	b.n	8005e66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a26      	ldr	r2, [pc, #152]	; (8005e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d01d      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIM_Base_Start_IT+0x80>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_TIM_Base_Start_IT+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d115      	bne.n	8005e50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <HAL_TIM_Base_Start_IT+0xec>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b06      	cmp	r3, #6
 8005e34:	d015      	beq.n	8005e62 <HAL_TIM_Base_Start_IT+0xbe>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d011      	beq.n	8005e62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4e:	e008      	b.n	8005e62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40001800 	.word	0x40001800
 8005e90:	00010007 	.word	0x00010007

08005e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0202 	mvn.w	r2, #2
 8005ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9d6 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9c8 	bl	8006274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9d9 	bl	800629c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0204 	mvn.w	r2, #4
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9ac 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f99e 	bl	8006274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9af 	bl	800629c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0208 	mvn.w	r2, #8
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f982 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f974 	bl	8006274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f985 	bl	800629c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0210 	mvn.w	r2, #16
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f958 	bl	8006288 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f94a 	bl	8006274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f95b 	bl	800629c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d10e      	bne.n	8006018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b01      	cmp	r3, #1
 8006006:	d107      	bne.n	8006018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0201 	mvn.w	r2, #1
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f924 	bl	8006260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d10e      	bne.n	8006044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d107      	bne.n	8006044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fb12 	bl	8006668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006052:	d10e      	bne.n	8006072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d107      	bne.n	8006072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800606a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fb05 	bl	800667c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d10e      	bne.n	800609e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d107      	bne.n	800609e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f909 	bl	80062b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d10e      	bne.n	80060ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d107      	bne.n	80060ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0220 	mvn.w	r2, #32
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fac5 	bl	8006654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_ConfigClockSource+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e0b3      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x180>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4b55      	ldr	r3, [pc, #340]	; (800625c <HAL_TIM_ConfigClockSource+0x188>)
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006124:	d03e      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0xd0>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612a:	f200 8087 	bhi.w	800623c <HAL_TIM_ConfigClockSource+0x168>
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006132:	f000 8085 	beq.w	8006240 <HAL_TIM_ConfigClockSource+0x16c>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	d87f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 800613c:	2b70      	cmp	r3, #112	; 0x70
 800613e:	d01a      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0xa2>
 8006140:	2b70      	cmp	r3, #112	; 0x70
 8006142:	d87b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 8006144:	2b60      	cmp	r3, #96	; 0x60
 8006146:	d050      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x116>
 8006148:	2b60      	cmp	r3, #96	; 0x60
 800614a:	d877      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 800614c:	2b50      	cmp	r3, #80	; 0x50
 800614e:	d03c      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0xf6>
 8006150:	2b50      	cmp	r3, #80	; 0x50
 8006152:	d873      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d058      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x136>
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d86f      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 800615c:	2b30      	cmp	r3, #48	; 0x30
 800615e:	d064      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x156>
 8006160:	2b30      	cmp	r3, #48	; 0x30
 8006162:	d86b      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d060      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x156>
 8006168:	2b20      	cmp	r3, #32
 800616a:	d867      	bhi.n	800623c <HAL_TIM_ConfigClockSource+0x168>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05c      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x156>
 8006170:	2b10      	cmp	r3, #16
 8006172:	d05a      	beq.n	800622a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006174:	e062      	b.n	800623c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6899      	ldr	r1, [r3, #8]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f000 f9b7 	bl	80064f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006198:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e04e      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6899      	ldr	r1, [r3, #8]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f000 f9a0 	bl	80064f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c6:	609a      	str	r2, [r3, #8]
      break;
 80061c8:	e03b      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 f914 	bl	8006404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2150      	movs	r1, #80	; 0x50
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 f96d 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e02b      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 f933 	bl	8006462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2160      	movs	r1, #96	; 0x60
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f95d 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 8006208:	e01b      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6859      	ldr	r1, [r3, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	461a      	mov	r2, r3
 8006218:	f000 f8f4 	bl	8006404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2140      	movs	r1, #64	; 0x40
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f94d 	bl	80064c2 <TIM_ITRx_SetConfig>
      break;
 8006228:	e00b      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f000 f944 	bl	80064c2 <TIM_ITRx_SetConfig>
        break;
 800623a:	e002      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800623c:	bf00      	nop
 800623e:	e000      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006240:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	fffeff88 	.word	0xfffeff88

08006260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a40      	ldr	r2, [pc, #256]	; (80063d8 <TIM_Base_SetConfig+0x114>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <TIM_Base_SetConfig+0x40>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d00f      	beq.n	8006304 <TIM_Base_SetConfig+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a3d      	ldr	r2, [pc, #244]	; (80063dc <TIM_Base_SetConfig+0x118>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_Base_SetConfig+0x40>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a3c      	ldr	r2, [pc, #240]	; (80063e0 <TIM_Base_SetConfig+0x11c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_Base_SetConfig+0x40>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a3b      	ldr	r2, [pc, #236]	; (80063e4 <TIM_Base_SetConfig+0x120>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a3a      	ldr	r2, [pc, #232]	; (80063e8 <TIM_Base_SetConfig+0x124>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d108      	bne.n	8006316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2f      	ldr	r2, [pc, #188]	; (80063d8 <TIM_Base_SetConfig+0x114>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d02b      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006324:	d027      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2c      	ldr	r2, [pc, #176]	; (80063dc <TIM_Base_SetConfig+0x118>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d023      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2b      	ldr	r2, [pc, #172]	; (80063e0 <TIM_Base_SetConfig+0x11c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01f      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2a      	ldr	r2, [pc, #168]	; (80063e4 <TIM_Base_SetConfig+0x120>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01b      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <TIM_Base_SetConfig+0x124>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d017      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a28      	ldr	r2, [pc, #160]	; (80063ec <TIM_Base_SetConfig+0x128>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a27      	ldr	r2, [pc, #156]	; (80063f0 <TIM_Base_SetConfig+0x12c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00f      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a26      	ldr	r2, [pc, #152]	; (80063f4 <TIM_Base_SetConfig+0x130>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00b      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a25      	ldr	r2, [pc, #148]	; (80063f8 <TIM_Base_SetConfig+0x134>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d007      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a24      	ldr	r2, [pc, #144]	; (80063fc <TIM_Base_SetConfig+0x138>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a23      	ldr	r2, [pc, #140]	; (8006400 <TIM_Base_SetConfig+0x13c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <TIM_Base_SetConfig+0x114>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0xf8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <TIM_Base_SetConfig+0x124>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d103      	bne.n	80063c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	615a      	str	r2, [r3, #20]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40001800 	.word	0x40001800
 80063fc:	40001c00 	.word	0x40001c00
 8006400:	40002000 	.word	0x40002000

08006404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 030a 	bic.w	r3, r3, #10
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0210 	bic.w	r2, r3, #16
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800648c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	031b      	lsls	r3, r3, #12
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800649e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	f043 0307 	orr.w	r3, r3, #7
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	021a      	lsls	r2, r3, #8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	431a      	orrs	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800654c:	2302      	movs	r3, #2
 800654e:	e06d      	b.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a30      	ldr	r2, [pc, #192]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2f      	ldr	r2, [pc, #188]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d108      	bne.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800658a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d022      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d01d      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a15      	ldr	r2, [pc, #84]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a16      	ldr	r2, [pc, #88]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a15      	ldr	r2, [pc, #84]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10c      	bne.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40010000 	.word	0x40010000
 800663c:	40010400 	.word	0x40010400
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40014000 	.word	0x40014000
 8006650:	40001800 	.word	0x40001800

08006654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e040      	b.n	8006724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb fd7c 	bl	80021b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	; 0x24
 80066bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 faea 	bl	8006ca8 <UART_SetConfig>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e022      	b.n	8006724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fd42 	bl	8007170 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fdc9 	bl	80072b4 <UART_CheckIdleState>
 8006722:	4603      	mov	r3, r0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006740:	2b20      	cmp	r3, #32
 8006742:	f040 8081 	bne.w	8006848 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_UART_Transmit+0x26>
 800674c:	88fb      	ldrh	r3, [r7, #6]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e079      	b.n	800684a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_UART_Transmit+0x38>
 8006760:	2302      	movs	r3, #2
 8006762:	e072      	b.n	800684a <HAL_UART_Transmit+0x11e>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2221      	movs	r2, #33	; 0x21
 8006778:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800677a:	f7fc fcdb 	bl	8003134 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x80>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067bc:	e02c      	b.n	8006818 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2200      	movs	r2, #0
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fdbc 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e038      	b.n	800684a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1cc      	bne.n	80067be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	2140      	movs	r1, #64	; 0x40
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fd89 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e005      	b.n	800684a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	f640 030f 	movw	r3, #2063	; 0x80f
 800687a:	4013      	ands	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d113      	bne.n	80068ac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 81cd 	beq.w	8006c3c <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
      }
      return;
 80068aa:	e1c7      	b.n	8006c3c <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80e8 	beq.w	8006a84 <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d105      	bne.n	80068ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	4b6e      	ldr	r3, [pc, #440]	; (8006a7c <HAL_UART_IRQHandler+0x228>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80dd 	beq.w	8006a84 <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <HAL_UART_IRQHandler+0xa2>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ec:	f043 0201 	orr.w	r2, r3, #1
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d010      	beq.n	8006922 <HAL_UART_IRQHandler+0xce>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2202      	movs	r2, #2
 8006910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006918:	f043 0204 	orr.w	r2, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d010      	beq.n	800694e <HAL_UART_IRQHandler+0xfa>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00b      	beq.n	800694e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2204      	movs	r2, #4
 800693c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006944:	f043 0202 	orr.w	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d104      	bne.n	800696c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00b      	beq.n	8006984 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2208      	movs	r2, #8
 8006972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697a:	f043 0208 	orr.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800698a:	2b00      	cmp	r3, #0
 800698c:	d011      	beq.n	80069b2 <HAL_UART_IRQHandler+0x15e>
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8141 	beq.w	8006c40 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d004      	beq.n	8006a02 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d031      	beq.n	8006a66 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fd1b 	bl	800743e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d123      	bne.n	8006a5e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a24:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d013      	beq.n	8006a56 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <HAL_UART_IRQHandler+0x22c>)
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd f919 	bl	8003c72 <HAL_DMA_Abort_IT>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e00f      	b.n	8006a76 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f906 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	e00b      	b.n	8006a76 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f902 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e007      	b.n	8006a76 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8fe 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006a74:	e0e4      	b.n	8006c40 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a76:	bf00      	nop
    return;
 8006a78:	e0e2      	b.n	8006c40 <HAL_UART_IRQHandler+0x3ec>
 8006a7a:	bf00      	nop
 8006a7c:	04000120 	.word	0x04000120
 8006a80:	0800749d 	.word	0x0800749d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f040 80a3 	bne.w	8006bd4 <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 809d 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8097 	beq.w	8006bd4 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d152      	bne.n	8006b62 <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006ac6:	893b      	ldrh	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 80bb 	beq.w	8006c44 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ad4:	893a      	ldrh	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f080 80b4 	bcs.w	8006c44 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	893a      	ldrh	r2, [r7, #8]
 8006ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aee:	d02a      	beq.n	8006b46 <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006afe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0210 	bic.w	r2, r2, #16
 8006b3a:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd f826 	bl	8003b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f88e 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b60:	e070      	b.n	8006c44 <HAL_UART_IRQHandler+0x3f0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d063      	beq.n	8006c48 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8006b80:	897b      	ldrh	r3, [r7, #10]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d060      	beq.n	8006c48 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b94:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0210 	bic.w	r2, r2, #16
 8006bc6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc8:	897b      	ldrh	r3, [r7, #10]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f855 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd2:	e039      	b.n	8006c48 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <HAL_UART_IRQHandler+0x3a6>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f84e 	bl	8006c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf8:	e029      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00d      	beq.n	8006c20 <HAL_UART_IRQHandler+0x3cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <HAL_UART_IRQHandler+0x3cc>
  {
    if (huart->TxISR != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01a      	beq.n	8006c4c <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    }
    return;
 8006c1e:	e015      	b.n	8006c4c <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d011      	beq.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00c      	beq.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fc47 	bl	80074c8 <UART_EndTransmit_IT>
    return;
 8006c3a:	e008      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
      return;
 8006c3c:	bf00      	nop
 8006c3e:	e006      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
    return;
 8006c40:	bf00      	nop
 8006c42:	e004      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
      return;
 8006c44:	bf00      	nop
 8006c46:	e002      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
      return;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <HAL_UART_IRQHandler+0x3fa>
    return;
 8006c4c:	bf00      	nop
  }

}
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	4ba6      	ldr	r3, [pc, #664]	; (8006f6c <UART_SetConfig+0x2c4>)
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a94      	ldr	r2, [pc, #592]	; (8006f70 <UART_SetConfig+0x2c8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d120      	bne.n	8006d66 <UART_SetConfig+0xbe>
 8006d24:	4b93      	ldr	r3, [pc, #588]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d816      	bhi.n	8006d60 <UART_SetConfig+0xb8>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x90>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006d55 	.word	0x08006d55
 8006d40:	08006d4f 	.word	0x08006d4f
 8006d44:	08006d5b 	.word	0x08006d5b
 8006d48:	2301      	movs	r3, #1
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e150      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e14d      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006d54:	2304      	movs	r3, #4
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e14a      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e147      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006d60:	2310      	movs	r3, #16
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e144      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a83      	ldr	r2, [pc, #524]	; (8006f78 <UART_SetConfig+0x2d0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d132      	bne.n	8006dd6 <UART_SetConfig+0x12e>
 8006d70:	4b80      	ldr	r3, [pc, #512]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b0c      	cmp	r3, #12
 8006d7c:	d828      	bhi.n	8006dd0 <UART_SetConfig+0x128>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0xdc>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006dd1 	.word	0x08006dd1
 8006d8c:	08006dd1 	.word	0x08006dd1
 8006d90:	08006dd1 	.word	0x08006dd1
 8006d94:	08006dc5 	.word	0x08006dc5
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006dd1 	.word	0x08006dd1
 8006da0:	08006dd1 	.word	0x08006dd1
 8006da4:	08006dbf 	.word	0x08006dbf
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dcb 	.word	0x08006dcb
 8006db8:	2300      	movs	r3, #0
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e118      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e115      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e112      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	77fb      	strb	r3, [r7, #31]
 8006dce:	e10f      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	77fb      	strb	r3, [r7, #31]
 8006dd4:	e10c      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <UART_SetConfig+0x2d4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d120      	bne.n	8006e22 <UART_SetConfig+0x17a>
 8006de0:	4b64      	ldr	r3, [pc, #400]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dea:	2b30      	cmp	r3, #48	; 0x30
 8006dec:	d013      	beq.n	8006e16 <UART_SetConfig+0x16e>
 8006dee:	2b30      	cmp	r3, #48	; 0x30
 8006df0:	d814      	bhi.n	8006e1c <UART_SetConfig+0x174>
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d009      	beq.n	8006e0a <UART_SetConfig+0x162>
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d810      	bhi.n	8006e1c <UART_SetConfig+0x174>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <UART_SetConfig+0x15c>
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d006      	beq.n	8006e10 <UART_SetConfig+0x168>
 8006e02:	e00b      	b.n	8006e1c <UART_SetConfig+0x174>
 8006e04:	2300      	movs	r3, #0
 8006e06:	77fb      	strb	r3, [r7, #31]
 8006e08:	e0f2      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	77fb      	strb	r3, [r7, #31]
 8006e0e:	e0ef      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e10:	2304      	movs	r3, #4
 8006e12:	77fb      	strb	r3, [r7, #31]
 8006e14:	e0ec      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e16:	2308      	movs	r3, #8
 8006e18:	77fb      	strb	r3, [r7, #31]
 8006e1a:	e0e9      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	77fb      	strb	r3, [r7, #31]
 8006e20:	e0e6      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a56      	ldr	r2, [pc, #344]	; (8006f80 <UART_SetConfig+0x2d8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d120      	bne.n	8006e6e <UART_SetConfig+0x1c6>
 8006e2c:	4b51      	ldr	r3, [pc, #324]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e36:	2bc0      	cmp	r3, #192	; 0xc0
 8006e38:	d013      	beq.n	8006e62 <UART_SetConfig+0x1ba>
 8006e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e3c:	d814      	bhi.n	8006e68 <UART_SetConfig+0x1c0>
 8006e3e:	2b80      	cmp	r3, #128	; 0x80
 8006e40:	d009      	beq.n	8006e56 <UART_SetConfig+0x1ae>
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d810      	bhi.n	8006e68 <UART_SetConfig+0x1c0>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <UART_SetConfig+0x1a8>
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d006      	beq.n	8006e5c <UART_SetConfig+0x1b4>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x1c0>
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e0cc      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e0c9      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e0c6      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e0c3      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e0c0      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a44      	ldr	r2, [pc, #272]	; (8006f84 <UART_SetConfig+0x2dc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d125      	bne.n	8006ec4 <UART_SetConfig+0x21c>
 8006e78:	4b3e      	ldr	r3, [pc, #248]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e86:	d017      	beq.n	8006eb8 <UART_SetConfig+0x210>
 8006e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8c:	d817      	bhi.n	8006ebe <UART_SetConfig+0x216>
 8006e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e92:	d00b      	beq.n	8006eac <UART_SetConfig+0x204>
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d811      	bhi.n	8006ebe <UART_SetConfig+0x216>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <UART_SetConfig+0x1fe>
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea2:	d006      	beq.n	8006eb2 <UART_SetConfig+0x20a>
 8006ea4:	e00b      	b.n	8006ebe <UART_SetConfig+0x216>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	e0a1      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006eac:	2302      	movs	r3, #2
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e09e      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006eb2:	2304      	movs	r3, #4
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	e09b      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006eb8:	2308      	movs	r3, #8
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e098      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006ebe:	2310      	movs	r3, #16
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e095      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a2f      	ldr	r2, [pc, #188]	; (8006f88 <UART_SetConfig+0x2e0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d125      	bne.n	8006f1a <UART_SetConfig+0x272>
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006edc:	d017      	beq.n	8006f0e <UART_SetConfig+0x266>
 8006ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee2:	d817      	bhi.n	8006f14 <UART_SetConfig+0x26c>
 8006ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee8:	d00b      	beq.n	8006f02 <UART_SetConfig+0x25a>
 8006eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eee:	d811      	bhi.n	8006f14 <UART_SetConfig+0x26c>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <UART_SetConfig+0x254>
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef8:	d006      	beq.n	8006f08 <UART_SetConfig+0x260>
 8006efa:	e00b      	b.n	8006f14 <UART_SetConfig+0x26c>
 8006efc:	2301      	movs	r3, #1
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e076      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f02:	2302      	movs	r3, #2
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e073      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f08:	2304      	movs	r3, #4
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e070      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f0e:	2308      	movs	r3, #8
 8006f10:	77fb      	strb	r3, [r7, #31]
 8006f12:	e06d      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f14:	2310      	movs	r3, #16
 8006f16:	77fb      	strb	r3, [r7, #31]
 8006f18:	e06a      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	; (8006f8c <UART_SetConfig+0x2e4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d138      	bne.n	8006f96 <UART_SetConfig+0x2ee>
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <UART_SetConfig+0x2cc>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f32:	d017      	beq.n	8006f64 <UART_SetConfig+0x2bc>
 8006f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f38:	d82a      	bhi.n	8006f90 <UART_SetConfig+0x2e8>
 8006f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f3e:	d00b      	beq.n	8006f58 <UART_SetConfig+0x2b0>
 8006f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f44:	d824      	bhi.n	8006f90 <UART_SetConfig+0x2e8>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <UART_SetConfig+0x2aa>
 8006f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4e:	d006      	beq.n	8006f5e <UART_SetConfig+0x2b6>
 8006f50:	e01e      	b.n	8006f90 <UART_SetConfig+0x2e8>
 8006f52:	2300      	movs	r3, #0
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e04b      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e048      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f5e:	2304      	movs	r3, #4
 8006f60:	77fb      	strb	r3, [r7, #31]
 8006f62:	e045      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f64:	2308      	movs	r3, #8
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e042      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f6a:	bf00      	nop
 8006f6c:	efff69f3 	.word	0xefff69f3
 8006f70:	40011000 	.word	0x40011000
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40004400 	.word	0x40004400
 8006f7c:	40004800 	.word	0x40004800
 8006f80:	40004c00 	.word	0x40004c00
 8006f84:	40005000 	.word	0x40005000
 8006f88:	40011400 	.word	0x40011400
 8006f8c:	40007800 	.word	0x40007800
 8006f90:	2310      	movs	r3, #16
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e02c      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a72      	ldr	r2, [pc, #456]	; (8007164 <UART_SetConfig+0x4bc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d125      	bne.n	8006fec <UART_SetConfig+0x344>
 8006fa0:	4b71      	ldr	r3, [pc, #452]	; (8007168 <UART_SetConfig+0x4c0>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006faa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fae:	d017      	beq.n	8006fe0 <UART_SetConfig+0x338>
 8006fb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006fb4:	d817      	bhi.n	8006fe6 <UART_SetConfig+0x33e>
 8006fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fba:	d00b      	beq.n	8006fd4 <UART_SetConfig+0x32c>
 8006fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc0:	d811      	bhi.n	8006fe6 <UART_SetConfig+0x33e>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <UART_SetConfig+0x326>
 8006fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fca:	d006      	beq.n	8006fda <UART_SetConfig+0x332>
 8006fcc:	e00b      	b.n	8006fe6 <UART_SetConfig+0x33e>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e00d      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e00a      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006fda:	2304      	movs	r3, #4
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e007      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006fe0:	2308      	movs	r3, #8
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e004      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006fe6:	2310      	movs	r3, #16
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e001      	b.n	8006ff0 <UART_SetConfig+0x348>
 8006fec:	2310      	movs	r3, #16
 8006fee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff8:	d15c      	bne.n	80070b4 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006ffa:	7ffb      	ldrb	r3, [r7, #31]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d828      	bhi.n	8007052 <UART_SetConfig+0x3aa>
 8007000:	a201      	add	r2, pc, #4	; (adr r2, 8007008 <UART_SetConfig+0x360>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	0800702d 	.word	0x0800702d
 800700c:	08007035 	.word	0x08007035
 8007010:	0800703d 	.word	0x0800703d
 8007014:	08007053 	.word	0x08007053
 8007018:	08007043 	.word	0x08007043
 800701c:	08007053 	.word	0x08007053
 8007020:	08007053 	.word	0x08007053
 8007024:	08007053 	.word	0x08007053
 8007028:	0800704b 	.word	0x0800704b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702c:	f7fd fe6e 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8007030:	61b8      	str	r0, [r7, #24]
        break;
 8007032:	e013      	b.n	800705c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007034:	f7fd fe7e 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8007038:	61b8      	str	r0, [r7, #24]
        break;
 800703a:	e00f      	b.n	800705c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800703c:	4b4b      	ldr	r3, [pc, #300]	; (800716c <UART_SetConfig+0x4c4>)
 800703e:	61bb      	str	r3, [r7, #24]
        break;
 8007040:	e00c      	b.n	800705c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007042:	f7fd fd51 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8007046:	61b8      	str	r0, [r7, #24]
        break;
 8007048:	e008      	b.n	800705c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	61bb      	str	r3, [r7, #24]
        break;
 8007050:	e004      	b.n	800705c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	77bb      	strb	r3, [r7, #30]
        break;
 800705a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d074      	beq.n	800714c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	005a      	lsls	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	441a      	add	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	b29b      	uxth	r3, r3
 8007078:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d916      	bls.n	80070ae <UART_SetConfig+0x406>
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d212      	bcs.n	80070ae <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f023 030f 	bic.w	r3, r3, #15
 8007090:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	b29b      	uxth	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	b29a      	uxth	r2, r3
 800709e:	89fb      	ldrh	r3, [r7, #14]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	89fa      	ldrh	r2, [r7, #14]
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e04e      	b.n	800714c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	77bb      	strb	r3, [r7, #30]
 80070b2:	e04b      	b.n	800714c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b4:	7ffb      	ldrb	r3, [r7, #31]
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d827      	bhi.n	800710a <UART_SetConfig+0x462>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <UART_SetConfig+0x418>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070ed 	.word	0x080070ed
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	0800710b 	.word	0x0800710b
 80070d0:	080070fb 	.word	0x080070fb
 80070d4:	0800710b 	.word	0x0800710b
 80070d8:	0800710b 	.word	0x0800710b
 80070dc:	0800710b 	.word	0x0800710b
 80070e0:	08007103 	.word	0x08007103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fd fe12 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 80070e8:	61b8      	str	r0, [r7, #24]
        break;
 80070ea:	e013      	b.n	8007114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ec:	f7fd fe22 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 80070f0:	61b8      	str	r0, [r7, #24]
        break;
 80070f2:	e00f      	b.n	8007114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <UART_SetConfig+0x4c4>)
 80070f6:	61bb      	str	r3, [r7, #24]
        break;
 80070f8:	e00c      	b.n	8007114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fa:	f7fd fcf5 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 80070fe:	61b8      	str	r0, [r7, #24]
        break;
 8007100:	e008      	b.n	8007114 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007106:	61bb      	str	r3, [r7, #24]
        break;
 8007108:	e004      	b.n	8007114 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	77bb      	strb	r3, [r7, #30]
        break;
 8007112:	bf00      	nop
    }

    if (pclk != 0U)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d018      	beq.n	800714c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	085a      	lsrs	r2, r3, #1
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	441a      	add	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	fbb2 f3f3 	udiv	r3, r2, r3
 800712c:	b29b      	uxth	r3, r3
 800712e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b0f      	cmp	r3, #15
 8007134:	d908      	bls.n	8007148 <UART_SetConfig+0x4a0>
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713c:	d204      	bcs.n	8007148 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	60da      	str	r2, [r3, #12]
 8007146:	e001      	b.n	800714c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007158:	7fbb      	ldrb	r3, [r7, #30]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	40007c00 	.word	0x40007c00
 8007168:	40023800 	.word	0x40023800
 800716c:	00f42400 	.word	0x00f42400

08007170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01a      	beq.n	8007286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726e:	d10a      	bne.n	8007286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c4:	f7fb ff36 	bl	8003134 <HAL_GetTick>
 80072c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d10e      	bne.n	80072f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f82d 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e023      	b.n	800733e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b04      	cmp	r3, #4
 8007302:	d10e      	bne.n	8007322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f817 	bl	8007346 <UART_WaitOnFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e00d      	b.n	800733e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	603b      	str	r3, [r7, #0]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007356:	e05e      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d05a      	beq.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007360:	f7fb fee8 	bl	8003134 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	d302      	bcc.n	8007376 <UART_WaitOnFlagUntilTimeout+0x30>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d11b      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007384:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e043      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d02c      	beq.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ca:	d124      	bne.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0201 	bic.w	r2, r2, #1
 80073f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2220      	movs	r2, #32
 80073fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e00f      	b.n	8007436 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	429a      	cmp	r2, r3
 8007424:	bf0c      	ite	eq
 8007426:	2301      	moveq	r3, #1
 8007428:	2300      	movne	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	429a      	cmp	r2, r3
 8007432:	d091      	beq.n	8007358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007454:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0210 	bic.w	r2, r2, #16
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fbd4 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fbb1 	bl	8006c54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <__cvt>:
 80074fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fc:	ed2d 8b02 	vpush	{d8}
 8007500:	eeb0 8b40 	vmov.f64	d8, d0
 8007504:	b085      	sub	sp, #20
 8007506:	4617      	mov	r7, r2
 8007508:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800750a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800750c:	ee18 2a90 	vmov	r2, s17
 8007510:	f025 0520 	bic.w	r5, r5, #32
 8007514:	2a00      	cmp	r2, #0
 8007516:	bfb6      	itet	lt
 8007518:	222d      	movlt	r2, #45	; 0x2d
 800751a:	2200      	movge	r2, #0
 800751c:	eeb1 8b40 	vneglt.f64	d8, d0
 8007520:	2d46      	cmp	r5, #70	; 0x46
 8007522:	460c      	mov	r4, r1
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	d004      	beq.n	8007532 <__cvt+0x38>
 8007528:	2d45      	cmp	r5, #69	; 0x45
 800752a:	d100      	bne.n	800752e <__cvt+0x34>
 800752c:	3401      	adds	r4, #1
 800752e:	2102      	movs	r1, #2
 8007530:	e000      	b.n	8007534 <__cvt+0x3a>
 8007532:	2103      	movs	r1, #3
 8007534:	ab03      	add	r3, sp, #12
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	ab02      	add	r3, sp, #8
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	4622      	mov	r2, r4
 800753e:	4633      	mov	r3, r6
 8007540:	eeb0 0b48 	vmov.f64	d0, d8
 8007544:	f000 fe30 	bl	80081a8 <_dtoa_r>
 8007548:	2d47      	cmp	r5, #71	; 0x47
 800754a:	d101      	bne.n	8007550 <__cvt+0x56>
 800754c:	07fb      	lsls	r3, r7, #31
 800754e:	d51a      	bpl.n	8007586 <__cvt+0x8c>
 8007550:	2d46      	cmp	r5, #70	; 0x46
 8007552:	eb00 0204 	add.w	r2, r0, r4
 8007556:	d10c      	bne.n	8007572 <__cvt+0x78>
 8007558:	7803      	ldrb	r3, [r0, #0]
 800755a:	2b30      	cmp	r3, #48	; 0x30
 800755c:	d107      	bne.n	800756e <__cvt+0x74>
 800755e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007566:	bf1c      	itt	ne
 8007568:	f1c4 0401 	rsbne	r4, r4, #1
 800756c:	6034      	strne	r4, [r6, #0]
 800756e:	6833      	ldr	r3, [r6, #0]
 8007570:	441a      	add	r2, r3
 8007572:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757a:	bf08      	it	eq
 800757c:	9203      	streq	r2, [sp, #12]
 800757e:	2130      	movs	r1, #48	; 0x30
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	4293      	cmp	r3, r2
 8007584:	d307      	bcc.n	8007596 <__cvt+0x9c>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800758a:	1a1b      	subs	r3, r3, r0
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	b005      	add	sp, #20
 8007590:	ecbd 8b02 	vpop	{d8}
 8007594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007596:	1c5c      	adds	r4, r3, #1
 8007598:	9403      	str	r4, [sp, #12]
 800759a:	7019      	strb	r1, [r3, #0]
 800759c:	e7f0      	b.n	8007580 <__cvt+0x86>

0800759e <__exponent>:
 800759e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075a0:	4603      	mov	r3, r0
 80075a2:	2900      	cmp	r1, #0
 80075a4:	bfb8      	it	lt
 80075a6:	4249      	neglt	r1, r1
 80075a8:	f803 2b02 	strb.w	r2, [r3], #2
 80075ac:	bfb4      	ite	lt
 80075ae:	222d      	movlt	r2, #45	; 0x2d
 80075b0:	222b      	movge	r2, #43	; 0x2b
 80075b2:	2909      	cmp	r1, #9
 80075b4:	7042      	strb	r2, [r0, #1]
 80075b6:	dd2a      	ble.n	800760e <__exponent+0x70>
 80075b8:	f10d 0207 	add.w	r2, sp, #7
 80075bc:	4617      	mov	r7, r2
 80075be:	260a      	movs	r6, #10
 80075c0:	4694      	mov	ip, r2
 80075c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80075c6:	fb06 1415 	mls	r4, r6, r5, r1
 80075ca:	3430      	adds	r4, #48	; 0x30
 80075cc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80075d0:	460c      	mov	r4, r1
 80075d2:	2c63      	cmp	r4, #99	; 0x63
 80075d4:	f102 32ff 	add.w	r2, r2, #4294967295
 80075d8:	4629      	mov	r1, r5
 80075da:	dcf1      	bgt.n	80075c0 <__exponent+0x22>
 80075dc:	3130      	adds	r1, #48	; 0x30
 80075de:	f1ac 0402 	sub.w	r4, ip, #2
 80075e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80075e6:	1c41      	adds	r1, r0, #1
 80075e8:	4622      	mov	r2, r4
 80075ea:	42ba      	cmp	r2, r7
 80075ec:	d30a      	bcc.n	8007604 <__exponent+0x66>
 80075ee:	f10d 0209 	add.w	r2, sp, #9
 80075f2:	eba2 020c 	sub.w	r2, r2, ip
 80075f6:	42bc      	cmp	r4, r7
 80075f8:	bf88      	it	hi
 80075fa:	2200      	movhi	r2, #0
 80075fc:	4413      	add	r3, r2
 80075fe:	1a18      	subs	r0, r3, r0
 8007600:	b003      	add	sp, #12
 8007602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007604:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007608:	f801 5f01 	strb.w	r5, [r1, #1]!
 800760c:	e7ed      	b.n	80075ea <__exponent+0x4c>
 800760e:	2330      	movs	r3, #48	; 0x30
 8007610:	3130      	adds	r1, #48	; 0x30
 8007612:	7083      	strb	r3, [r0, #2]
 8007614:	70c1      	strb	r1, [r0, #3]
 8007616:	1d03      	adds	r3, r0, #4
 8007618:	e7f1      	b.n	80075fe <__exponent+0x60>
 800761a:	0000      	movs	r0, r0
 800761c:	0000      	movs	r0, r0
	...

08007620 <_printf_float>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	b08b      	sub	sp, #44	; 0x2c
 8007626:	460c      	mov	r4, r1
 8007628:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800762c:	4616      	mov	r6, r2
 800762e:	461f      	mov	r7, r3
 8007630:	4605      	mov	r5, r0
 8007632:	f000 fcbb 	bl	8007fac <_localeconv_r>
 8007636:	f8d0 b000 	ldr.w	fp, [r0]
 800763a:	4658      	mov	r0, fp
 800763c:	f7f8 fe50 	bl	80002e0 <strlen>
 8007640:	2300      	movs	r3, #0
 8007642:	9308      	str	r3, [sp, #32]
 8007644:	f8d8 3000 	ldr.w	r3, [r8]
 8007648:	f894 9018 	ldrb.w	r9, [r4, #24]
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	3307      	adds	r3, #7
 8007650:	f023 0307 	bic.w	r3, r3, #7
 8007654:	f103 0108 	add.w	r1, r3, #8
 8007658:	f8c8 1000 	str.w	r1, [r8]
 800765c:	ed93 0b00 	vldr	d0, [r3]
 8007660:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80078c0 <_printf_float+0x2a0>
 8007664:	eeb0 7bc0 	vabs.f64	d7, d0
 8007668:	eeb4 7b46 	vcmp.f64	d7, d6
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8007674:	4682      	mov	sl, r0
 8007676:	dd24      	ble.n	80076c2 <_printf_float+0xa2>
 8007678:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	d502      	bpl.n	8007688 <_printf_float+0x68>
 8007682:	232d      	movs	r3, #45	; 0x2d
 8007684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007688:	498f      	ldr	r1, [pc, #572]	; (80078c8 <_printf_float+0x2a8>)
 800768a:	4b90      	ldr	r3, [pc, #576]	; (80078cc <_printf_float+0x2ac>)
 800768c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007690:	bf94      	ite	ls
 8007692:	4688      	movls	r8, r1
 8007694:	4698      	movhi	r8, r3
 8007696:	2303      	movs	r3, #3
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	f022 0204 	bic.w	r2, r2, #4
 800769e:	2300      	movs	r3, #0
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	9700      	str	r7, [sp, #0]
 80076a6:	4633      	mov	r3, r6
 80076a8:	aa09      	add	r2, sp, #36	; 0x24
 80076aa:	4621      	mov	r1, r4
 80076ac:	4628      	mov	r0, r5
 80076ae:	f000 f9d1 	bl	8007a54 <_printf_common>
 80076b2:	3001      	adds	r0, #1
 80076b4:	f040 808a 	bne.w	80077cc <_printf_float+0x1ac>
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	b00b      	add	sp, #44	; 0x2c
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d709      	bvc.n	80076e0 <_printf_float+0xc0>
 80076cc:	ee10 3a90 	vmov	r3, s1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bfbc      	itt	lt
 80076d4:	232d      	movlt	r3, #45	; 0x2d
 80076d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076da:	497d      	ldr	r1, [pc, #500]	; (80078d0 <_printf_float+0x2b0>)
 80076dc:	4b7d      	ldr	r3, [pc, #500]	; (80078d4 <_printf_float+0x2b4>)
 80076de:	e7d5      	b.n	800768c <_printf_float+0x6c>
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80076e6:	9104      	str	r1, [sp, #16]
 80076e8:	1c59      	adds	r1, r3, #1
 80076ea:	d13c      	bne.n	8007766 <_printf_float+0x146>
 80076ec:	2306      	movs	r3, #6
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	2300      	movs	r3, #0
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	ab08      	add	r3, sp, #32
 80076f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80076fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076fe:	ab07      	add	r3, sp, #28
 8007700:	6861      	ldr	r1, [r4, #4]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	6022      	str	r2, [r4, #0]
 8007706:	f10d 031b 	add.w	r3, sp, #27
 800770a:	4628      	mov	r0, r5
 800770c:	f7ff fef5 	bl	80074fa <__cvt>
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	9907      	ldr	r1, [sp, #28]
 8007714:	2b47      	cmp	r3, #71	; 0x47
 8007716:	4680      	mov	r8, r0
 8007718:	d108      	bne.n	800772c <_printf_float+0x10c>
 800771a:	1cc8      	adds	r0, r1, #3
 800771c:	db02      	blt.n	8007724 <_printf_float+0x104>
 800771e:	6863      	ldr	r3, [r4, #4]
 8007720:	4299      	cmp	r1, r3
 8007722:	dd41      	ble.n	80077a8 <_printf_float+0x188>
 8007724:	f1a9 0902 	sub.w	r9, r9, #2
 8007728:	fa5f f989 	uxtb.w	r9, r9
 800772c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007730:	d820      	bhi.n	8007774 <_printf_float+0x154>
 8007732:	3901      	subs	r1, #1
 8007734:	464a      	mov	r2, r9
 8007736:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800773a:	9107      	str	r1, [sp, #28]
 800773c:	f7ff ff2f 	bl	800759e <__exponent>
 8007740:	9a08      	ldr	r2, [sp, #32]
 8007742:	9004      	str	r0, [sp, #16]
 8007744:	1813      	adds	r3, r2, r0
 8007746:	2a01      	cmp	r2, #1
 8007748:	6123      	str	r3, [r4, #16]
 800774a:	dc02      	bgt.n	8007752 <_printf_float+0x132>
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	07d2      	lsls	r2, r2, #31
 8007750:	d501      	bpl.n	8007756 <_printf_float+0x136>
 8007752:	3301      	adds	r3, #1
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0a2      	beq.n	80076a4 <_printf_float+0x84>
 800775e:	232d      	movs	r3, #45	; 0x2d
 8007760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007764:	e79e      	b.n	80076a4 <_printf_float+0x84>
 8007766:	9904      	ldr	r1, [sp, #16]
 8007768:	2947      	cmp	r1, #71	; 0x47
 800776a:	d1c1      	bne.n	80076f0 <_printf_float+0xd0>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1bf      	bne.n	80076f0 <_printf_float+0xd0>
 8007770:	2301      	movs	r3, #1
 8007772:	e7bc      	b.n	80076ee <_printf_float+0xce>
 8007774:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007778:	d118      	bne.n	80077ac <_printf_float+0x18c>
 800777a:	2900      	cmp	r1, #0
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	dd0b      	ble.n	8007798 <_printf_float+0x178>
 8007780:	6121      	str	r1, [r4, #16]
 8007782:	b913      	cbnz	r3, 800778a <_printf_float+0x16a>
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	07d0      	lsls	r0, r2, #31
 8007788:	d502      	bpl.n	8007790 <_printf_float+0x170>
 800778a:	3301      	adds	r3, #1
 800778c:	440b      	add	r3, r1
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	2300      	movs	r3, #0
 8007792:	65a1      	str	r1, [r4, #88]	; 0x58
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	e7de      	b.n	8007756 <_printf_float+0x136>
 8007798:	b913      	cbnz	r3, 80077a0 <_printf_float+0x180>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	07d2      	lsls	r2, r2, #31
 800779e:	d501      	bpl.n	80077a4 <_printf_float+0x184>
 80077a0:	3302      	adds	r3, #2
 80077a2:	e7f4      	b.n	800778e <_printf_float+0x16e>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e7f2      	b.n	800778e <_printf_float+0x16e>
 80077a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80077ac:	9b08      	ldr	r3, [sp, #32]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	db05      	blt.n	80077be <_printf_float+0x19e>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	6121      	str	r1, [r4, #16]
 80077b6:	07d8      	lsls	r0, r3, #31
 80077b8:	d5ea      	bpl.n	8007790 <_printf_float+0x170>
 80077ba:	1c4b      	adds	r3, r1, #1
 80077bc:	e7e7      	b.n	800778e <_printf_float+0x16e>
 80077be:	2900      	cmp	r1, #0
 80077c0:	bfd4      	ite	le
 80077c2:	f1c1 0202 	rsble	r2, r1, #2
 80077c6:	2201      	movgt	r2, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	e7e0      	b.n	800778e <_printf_float+0x16e>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	055a      	lsls	r2, r3, #21
 80077d0:	d407      	bmi.n	80077e2 <_printf_float+0x1c2>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	4642      	mov	r2, r8
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	d12a      	bne.n	8007836 <_printf_float+0x216>
 80077e0:	e76a      	b.n	80076b8 <_printf_float+0x98>
 80077e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077e6:	f240 80e0 	bls.w	80079aa <_printf_float+0x38a>
 80077ea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80077ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f6:	d133      	bne.n	8007860 <_printf_float+0x240>
 80077f8:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <_printf_float+0x2b8>)
 80077fa:	2301      	movs	r3, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f af58 	beq.w	80076b8 <_printf_float+0x98>
 8007808:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800780c:	429a      	cmp	r2, r3
 800780e:	db02      	blt.n	8007816 <_printf_float+0x1f6>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07d8      	lsls	r0, r3, #31
 8007814:	d50f      	bpl.n	8007836 <_printf_float+0x216>
 8007816:	4653      	mov	r3, sl
 8007818:	465a      	mov	r2, fp
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	f43f af49 	beq.w	80076b8 <_printf_float+0x98>
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	f104 091a 	add.w	r9, r4, #26
 800782e:	9b08      	ldr	r3, [sp, #32]
 8007830:	3b01      	subs	r3, #1
 8007832:	4543      	cmp	r3, r8
 8007834:	dc09      	bgt.n	800784a <_printf_float+0x22a>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	079b      	lsls	r3, r3, #30
 800783a:	f100 8106 	bmi.w	8007a4a <_printf_float+0x42a>
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007842:	4298      	cmp	r0, r3
 8007844:	bfb8      	it	lt
 8007846:	4618      	movlt	r0, r3
 8007848:	e738      	b.n	80076bc <_printf_float+0x9c>
 800784a:	2301      	movs	r3, #1
 800784c:	464a      	mov	r2, r9
 800784e:	4631      	mov	r1, r6
 8007850:	4628      	mov	r0, r5
 8007852:	47b8      	blx	r7
 8007854:	3001      	adds	r0, #1
 8007856:	f43f af2f 	beq.w	80076b8 <_printf_float+0x98>
 800785a:	f108 0801 	add.w	r8, r8, #1
 800785e:	e7e6      	b.n	800782e <_printf_float+0x20e>
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc3a      	bgt.n	80078dc <_printf_float+0x2bc>
 8007866:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <_printf_float+0x2b8>)
 8007868:	2301      	movs	r3, #1
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f af21 	beq.w	80076b8 <_printf_float+0x98>
 8007876:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800787a:	4313      	orrs	r3, r2
 800787c:	d102      	bne.n	8007884 <_printf_float+0x264>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	07d9      	lsls	r1, r3, #31
 8007882:	d5d8      	bpl.n	8007836 <_printf_float+0x216>
 8007884:	4653      	mov	r3, sl
 8007886:	465a      	mov	r2, fp
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	f43f af12 	beq.w	80076b8 <_printf_float+0x98>
 8007894:	f04f 0900 	mov.w	r9, #0
 8007898:	f104 0a1a 	add.w	sl, r4, #26
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	425b      	negs	r3, r3
 80078a0:	454b      	cmp	r3, r9
 80078a2:	dc01      	bgt.n	80078a8 <_printf_float+0x288>
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	e795      	b.n	80077d4 <_printf_float+0x1b4>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4652      	mov	r2, sl
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af00 	beq.w	80076b8 <_printf_float+0x98>
 80078b8:	f109 0901 	add.w	r9, r9, #1
 80078bc:	e7ee      	b.n	800789c <_printf_float+0x27c>
 80078be:	bf00      	nop
 80078c0:	ffffffff 	.word	0xffffffff
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	0800a9d8 	.word	0x0800a9d8
 80078cc:	0800a9dc 	.word	0x0800a9dc
 80078d0:	0800a9e0 	.word	0x0800a9e0
 80078d4:	0800a9e4 	.word	0x0800a9e4
 80078d8:	0800a9e8 	.word	0x0800a9e8
 80078dc:	9a08      	ldr	r2, [sp, #32]
 80078de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bfa8      	it	ge
 80078e4:	461a      	movge	r2, r3
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	4691      	mov	r9, r2
 80078ea:	dc38      	bgt.n	800795e <_printf_float+0x33e>
 80078ec:	2300      	movs	r3, #0
 80078ee:	9305      	str	r3, [sp, #20]
 80078f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f4:	f104 021a 	add.w	r2, r4, #26
 80078f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fa:	9905      	ldr	r1, [sp, #20]
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	eba3 0309 	sub.w	r3, r3, r9
 8007902:	428b      	cmp	r3, r1
 8007904:	dc33      	bgt.n	800796e <_printf_float+0x34e>
 8007906:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800790a:	429a      	cmp	r2, r3
 800790c:	db3c      	blt.n	8007988 <_printf_float+0x368>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	07da      	lsls	r2, r3, #31
 8007912:	d439      	bmi.n	8007988 <_printf_float+0x368>
 8007914:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007918:	eba2 0903 	sub.w	r9, r2, r3
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	4591      	cmp	r9, r2
 8007922:	bfa8      	it	ge
 8007924:	4691      	movge	r9, r2
 8007926:	f1b9 0f00 	cmp.w	r9, #0
 800792a:	dc35      	bgt.n	8007998 <_printf_float+0x378>
 800792c:	f04f 0800 	mov.w	r8, #0
 8007930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007934:	f104 0a1a 	add.w	sl, r4, #26
 8007938:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	eba3 0309 	sub.w	r3, r3, r9
 8007942:	4543      	cmp	r3, r8
 8007944:	f77f af77 	ble.w	8007836 <_printf_float+0x216>
 8007948:	2301      	movs	r3, #1
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f aeb0 	beq.w	80076b8 <_printf_float+0x98>
 8007958:	f108 0801 	add.w	r8, r8, #1
 800795c:	e7ec      	b.n	8007938 <_printf_float+0x318>
 800795e:	4613      	mov	r3, r2
 8007960:	4631      	mov	r1, r6
 8007962:	4642      	mov	r2, r8
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d1bf      	bne.n	80078ec <_printf_float+0x2cc>
 800796c:	e6a4      	b.n	80076b8 <_printf_float+0x98>
 800796e:	2301      	movs	r3, #1
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	9204      	str	r2, [sp, #16]
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae9d 	beq.w	80076b8 <_printf_float+0x98>
 800797e:	9b05      	ldr	r3, [sp, #20]
 8007980:	9a04      	ldr	r2, [sp, #16]
 8007982:	3301      	adds	r3, #1
 8007984:	9305      	str	r3, [sp, #20]
 8007986:	e7b7      	b.n	80078f8 <_printf_float+0x2d8>
 8007988:	4653      	mov	r3, sl
 800798a:	465a      	mov	r2, fp
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	d1be      	bne.n	8007914 <_printf_float+0x2f4>
 8007996:	e68f      	b.n	80076b8 <_printf_float+0x98>
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	464b      	mov	r3, r9
 800799c:	4442      	add	r2, r8
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1c1      	bne.n	800792c <_printf_float+0x30c>
 80079a8:	e686      	b.n	80076b8 <_printf_float+0x98>
 80079aa:	9a08      	ldr	r2, [sp, #32]
 80079ac:	2a01      	cmp	r2, #1
 80079ae:	dc01      	bgt.n	80079b4 <_printf_float+0x394>
 80079b0:	07db      	lsls	r3, r3, #31
 80079b2:	d537      	bpl.n	8007a24 <_printf_float+0x404>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4642      	mov	r2, r8
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	3001      	adds	r0, #1
 80079c0:	f43f ae7a 	beq.w	80076b8 <_printf_float+0x98>
 80079c4:	4653      	mov	r3, sl
 80079c6:	465a      	mov	r2, fp
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f ae72 	beq.w	80076b8 <_printf_float+0x98>
 80079d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80079d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	d01a      	beq.n	8007a1a <_printf_float+0x3fa>
 80079e4:	3b01      	subs	r3, #1
 80079e6:	f108 0201 	add.w	r2, r8, #1
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d10e      	bne.n	8007a12 <_printf_float+0x3f2>
 80079f4:	e660      	b.n	80076b8 <_printf_float+0x98>
 80079f6:	2301      	movs	r3, #1
 80079f8:	464a      	mov	r2, r9
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae59 	beq.w	80076b8 <_printf_float+0x98>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4543      	cmp	r3, r8
 8007a10:	dcf1      	bgt.n	80079f6 <_printf_float+0x3d6>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a18:	e6dd      	b.n	80077d6 <_printf_float+0x1b6>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	f104 091a 	add.w	r9, r4, #26
 8007a22:	e7f2      	b.n	8007a0a <_printf_float+0x3ea>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4642      	mov	r2, r8
 8007a28:	e7df      	b.n	80079ea <_printf_float+0x3ca>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	464a      	mov	r2, r9
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f ae3f 	beq.w	80076b8 <_printf_float+0x98>
 8007a3a:	f108 0801 	add.w	r8, r8, #1
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a42:	1a5b      	subs	r3, r3, r1
 8007a44:	4543      	cmp	r3, r8
 8007a46:	dcf0      	bgt.n	8007a2a <_printf_float+0x40a>
 8007a48:	e6f9      	b.n	800783e <_printf_float+0x21e>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	f104 0919 	add.w	r9, r4, #25
 8007a52:	e7f4      	b.n	8007a3e <_printf_float+0x41e>

08007a54 <_printf_common>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	4616      	mov	r6, r2
 8007a5a:	4699      	mov	r9, r3
 8007a5c:	688a      	ldr	r2, [r1, #8]
 8007a5e:	690b      	ldr	r3, [r1, #16]
 8007a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	bfb8      	it	lt
 8007a68:	4613      	movlt	r3, r2
 8007a6a:	6033      	str	r3, [r6, #0]
 8007a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a70:	4607      	mov	r7, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	b10a      	cbz	r2, 8007a7a <_printf_common+0x26>
 8007a76:	3301      	adds	r3, #1
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	0699      	lsls	r1, r3, #26
 8007a7e:	bf42      	ittt	mi
 8007a80:	6833      	ldrmi	r3, [r6, #0]
 8007a82:	3302      	addmi	r3, #2
 8007a84:	6033      	strmi	r3, [r6, #0]
 8007a86:	6825      	ldr	r5, [r4, #0]
 8007a88:	f015 0506 	ands.w	r5, r5, #6
 8007a8c:	d106      	bne.n	8007a9c <_printf_common+0x48>
 8007a8e:	f104 0a19 	add.w	sl, r4, #25
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	6832      	ldr	r2, [r6, #0]
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	42ab      	cmp	r3, r5
 8007a9a:	dc26      	bgt.n	8007aea <_printf_common+0x96>
 8007a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa0:	1e13      	subs	r3, r2, #0
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	bf18      	it	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	0692      	lsls	r2, r2, #26
 8007aaa:	d42b      	bmi.n	8007b04 <_printf_common+0xb0>
 8007aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c0      	blx	r8
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d01e      	beq.n	8007af8 <_printf_common+0xa4>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	6922      	ldr	r2, [r4, #16]
 8007abe:	f003 0306 	and.w	r3, r3, #6
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	bf02      	ittt	eq
 8007ac6:	68e5      	ldreq	r5, [r4, #12]
 8007ac8:	6833      	ldreq	r3, [r6, #0]
 8007aca:	1aed      	subeq	r5, r5, r3
 8007acc:	68a3      	ldr	r3, [r4, #8]
 8007ace:	bf0c      	ite	eq
 8007ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad4:	2500      	movne	r5, #0
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bfc4      	itt	gt
 8007ada:	1a9b      	subgt	r3, r3, r2
 8007adc:	18ed      	addgt	r5, r5, r3
 8007ade:	2600      	movs	r6, #0
 8007ae0:	341a      	adds	r4, #26
 8007ae2:	42b5      	cmp	r5, r6
 8007ae4:	d11a      	bne.n	8007b1c <_printf_common+0xc8>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e008      	b.n	8007afc <_printf_common+0xa8>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4652      	mov	r2, sl
 8007aee:	4649      	mov	r1, r9
 8007af0:	4638      	mov	r0, r7
 8007af2:	47c0      	blx	r8
 8007af4:	3001      	adds	r0, #1
 8007af6:	d103      	bne.n	8007b00 <_printf_common+0xac>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	3501      	adds	r5, #1
 8007b02:	e7c6      	b.n	8007a92 <_printf_common+0x3e>
 8007b04:	18e1      	adds	r1, r4, r3
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	2030      	movs	r0, #48	; 0x30
 8007b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b0e:	4422      	add	r2, r4
 8007b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b18:	3302      	adds	r3, #2
 8007b1a:	e7c7      	b.n	8007aac <_printf_common+0x58>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4649      	mov	r1, r9
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c0      	blx	r8
 8007b26:	3001      	adds	r0, #1
 8007b28:	d0e6      	beq.n	8007af8 <_printf_common+0xa4>
 8007b2a:	3601      	adds	r6, #1
 8007b2c:	e7d9      	b.n	8007ae2 <_printf_common+0x8e>
	...

08007b30 <_printf_i>:
 8007b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	7e0f      	ldrb	r7, [r1, #24]
 8007b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b38:	2f78      	cmp	r7, #120	; 0x78
 8007b3a:	4691      	mov	r9, r2
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	469a      	mov	sl, r3
 8007b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b46:	d807      	bhi.n	8007b58 <_printf_i+0x28>
 8007b48:	2f62      	cmp	r7, #98	; 0x62
 8007b4a:	d80a      	bhi.n	8007b62 <_printf_i+0x32>
 8007b4c:	2f00      	cmp	r7, #0
 8007b4e:	f000 80d4 	beq.w	8007cfa <_printf_i+0x1ca>
 8007b52:	2f58      	cmp	r7, #88	; 0x58
 8007b54:	f000 80c0 	beq.w	8007cd8 <_printf_i+0x1a8>
 8007b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b60:	e03a      	b.n	8007bd8 <_printf_i+0xa8>
 8007b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b66:	2b15      	cmp	r3, #21
 8007b68:	d8f6      	bhi.n	8007b58 <_printf_i+0x28>
 8007b6a:	a101      	add	r1, pc, #4	; (adr r1, 8007b70 <_printf_i+0x40>)
 8007b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b70:	08007bc9 	.word	0x08007bc9
 8007b74:	08007bdd 	.word	0x08007bdd
 8007b78:	08007b59 	.word	0x08007b59
 8007b7c:	08007b59 	.word	0x08007b59
 8007b80:	08007b59 	.word	0x08007b59
 8007b84:	08007b59 	.word	0x08007b59
 8007b88:	08007bdd 	.word	0x08007bdd
 8007b8c:	08007b59 	.word	0x08007b59
 8007b90:	08007b59 	.word	0x08007b59
 8007b94:	08007b59 	.word	0x08007b59
 8007b98:	08007b59 	.word	0x08007b59
 8007b9c:	08007ce1 	.word	0x08007ce1
 8007ba0:	08007c09 	.word	0x08007c09
 8007ba4:	08007c9b 	.word	0x08007c9b
 8007ba8:	08007b59 	.word	0x08007b59
 8007bac:	08007b59 	.word	0x08007b59
 8007bb0:	08007d03 	.word	0x08007d03
 8007bb4:	08007b59 	.word	0x08007b59
 8007bb8:	08007c09 	.word	0x08007c09
 8007bbc:	08007b59 	.word	0x08007b59
 8007bc0:	08007b59 	.word	0x08007b59
 8007bc4:	08007ca3 	.word	0x08007ca3
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	602a      	str	r2, [r5, #0]
 8007bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e09f      	b.n	8007d1c <_printf_i+0x1ec>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	0607      	lsls	r7, r0, #24
 8007be2:	f103 0104 	add.w	r1, r3, #4
 8007be6:	6029      	str	r1, [r5, #0]
 8007be8:	d501      	bpl.n	8007bee <_printf_i+0xbe>
 8007bea:	681e      	ldr	r6, [r3, #0]
 8007bec:	e003      	b.n	8007bf6 <_printf_i+0xc6>
 8007bee:	0646      	lsls	r6, r0, #25
 8007bf0:	d5fb      	bpl.n	8007bea <_printf_i+0xba>
 8007bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	da03      	bge.n	8007c02 <_printf_i+0xd2>
 8007bfa:	232d      	movs	r3, #45	; 0x2d
 8007bfc:	4276      	negs	r6, r6
 8007bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c02:	485a      	ldr	r0, [pc, #360]	; (8007d6c <_printf_i+0x23c>)
 8007c04:	230a      	movs	r3, #10
 8007c06:	e012      	b.n	8007c2e <_printf_i+0xfe>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1d19      	adds	r1, r3, #4
 8007c0e:	6029      	str	r1, [r5, #0]
 8007c10:	0605      	lsls	r5, r0, #24
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0xe8>
 8007c14:	681e      	ldr	r6, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0xee>
 8007c18:	0641      	lsls	r1, r0, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0xe4>
 8007c1c:	881e      	ldrh	r6, [r3, #0]
 8007c1e:	4853      	ldr	r0, [pc, #332]	; (8007d6c <_printf_i+0x23c>)
 8007c20:	2f6f      	cmp	r7, #111	; 0x6f
 8007c22:	bf0c      	ite	eq
 8007c24:	2308      	moveq	r3, #8
 8007c26:	230a      	movne	r3, #10
 8007c28:	2100      	movs	r1, #0
 8007c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c2e:	6865      	ldr	r5, [r4, #4]
 8007c30:	60a5      	str	r5, [r4, #8]
 8007c32:	2d00      	cmp	r5, #0
 8007c34:	bfa2      	ittt	ge
 8007c36:	6821      	ldrge	r1, [r4, #0]
 8007c38:	f021 0104 	bicge.w	r1, r1, #4
 8007c3c:	6021      	strge	r1, [r4, #0]
 8007c3e:	b90e      	cbnz	r6, 8007c44 <_printf_i+0x114>
 8007c40:	2d00      	cmp	r5, #0
 8007c42:	d04b      	beq.n	8007cdc <_printf_i+0x1ac>
 8007c44:	4615      	mov	r5, r2
 8007c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8007c4e:	5dc7      	ldrb	r7, [r0, r7]
 8007c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c54:	4637      	mov	r7, r6
 8007c56:	42bb      	cmp	r3, r7
 8007c58:	460e      	mov	r6, r1
 8007c5a:	d9f4      	bls.n	8007c46 <_printf_i+0x116>
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d10b      	bne.n	8007c78 <_printf_i+0x148>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	07de      	lsls	r6, r3, #31
 8007c64:	d508      	bpl.n	8007c78 <_printf_i+0x148>
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6861      	ldr	r1, [r4, #4]
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	bfde      	ittt	le
 8007c6e:	2330      	movle	r3, #48	; 0x30
 8007c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c78:	1b52      	subs	r2, r2, r5
 8007c7a:	6122      	str	r2, [r4, #16]
 8007c7c:	f8cd a000 	str.w	sl, [sp]
 8007c80:	464b      	mov	r3, r9
 8007c82:	aa03      	add	r2, sp, #12
 8007c84:	4621      	mov	r1, r4
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fee4 	bl	8007a54 <_printf_common>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d14a      	bne.n	8007d26 <_printf_i+0x1f6>
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	b004      	add	sp, #16
 8007c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	f043 0320 	orr.w	r3, r3, #32
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	4833      	ldr	r0, [pc, #204]	; (8007d70 <_printf_i+0x240>)
 8007ca4:	2778      	movs	r7, #120	; 0x78
 8007ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	6829      	ldr	r1, [r5, #0]
 8007cae:	061f      	lsls	r7, r3, #24
 8007cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cb4:	d402      	bmi.n	8007cbc <_printf_i+0x18c>
 8007cb6:	065f      	lsls	r7, r3, #25
 8007cb8:	bf48      	it	mi
 8007cba:	b2b6      	uxthmi	r6, r6
 8007cbc:	07df      	lsls	r7, r3, #31
 8007cbe:	bf48      	it	mi
 8007cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8007cc4:	6029      	str	r1, [r5, #0]
 8007cc6:	bf48      	it	mi
 8007cc8:	6023      	strmi	r3, [r4, #0]
 8007cca:	b91e      	cbnz	r6, 8007cd4 <_printf_i+0x1a4>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	f023 0320 	bic.w	r3, r3, #32
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	e7a7      	b.n	8007c28 <_printf_i+0xf8>
 8007cd8:	4824      	ldr	r0, [pc, #144]	; (8007d6c <_printf_i+0x23c>)
 8007cda:	e7e4      	b.n	8007ca6 <_printf_i+0x176>
 8007cdc:	4615      	mov	r5, r2
 8007cde:	e7bd      	b.n	8007c5c <_printf_i+0x12c>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	6826      	ldr	r6, [r4, #0]
 8007ce4:	6961      	ldr	r1, [r4, #20]
 8007ce6:	1d18      	adds	r0, r3, #4
 8007ce8:	6028      	str	r0, [r5, #0]
 8007cea:	0635      	lsls	r5, r6, #24
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0x1c4>
 8007cf0:	6019      	str	r1, [r3, #0]
 8007cf2:	e002      	b.n	8007cfa <_printf_i+0x1ca>
 8007cf4:	0670      	lsls	r0, r6, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0x1c0>
 8007cf8:	8019      	strh	r1, [r3, #0]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	4615      	mov	r5, r2
 8007d00:	e7bc      	b.n	8007c7c <_printf_i+0x14c>
 8007d02:	682b      	ldr	r3, [r5, #0]
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	602a      	str	r2, [r5, #0]
 8007d08:	681d      	ldr	r5, [r3, #0]
 8007d0a:	6862      	ldr	r2, [r4, #4]
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f7f8 fa96 	bl	8000240 <memchr>
 8007d14:	b108      	cbz	r0, 8007d1a <_printf_i+0x1ea>
 8007d16:	1b40      	subs	r0, r0, r5
 8007d18:	6060      	str	r0, [r4, #4]
 8007d1a:	6863      	ldr	r3, [r4, #4]
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d24:	e7aa      	b.n	8007c7c <_printf_i+0x14c>
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	4640      	mov	r0, r8
 8007d2e:	47d0      	blx	sl
 8007d30:	3001      	adds	r0, #1
 8007d32:	d0ad      	beq.n	8007c90 <_printf_i+0x160>
 8007d34:	6823      	ldr	r3, [r4, #0]
 8007d36:	079b      	lsls	r3, r3, #30
 8007d38:	d413      	bmi.n	8007d62 <_printf_i+0x232>
 8007d3a:	68e0      	ldr	r0, [r4, #12]
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	4298      	cmp	r0, r3
 8007d40:	bfb8      	it	lt
 8007d42:	4618      	movlt	r0, r3
 8007d44:	e7a6      	b.n	8007c94 <_printf_i+0x164>
 8007d46:	2301      	movs	r3, #1
 8007d48:	4632      	mov	r2, r6
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	47d0      	blx	sl
 8007d50:	3001      	adds	r0, #1
 8007d52:	d09d      	beq.n	8007c90 <_printf_i+0x160>
 8007d54:	3501      	adds	r5, #1
 8007d56:	68e3      	ldr	r3, [r4, #12]
 8007d58:	9903      	ldr	r1, [sp, #12]
 8007d5a:	1a5b      	subs	r3, r3, r1
 8007d5c:	42ab      	cmp	r3, r5
 8007d5e:	dcf2      	bgt.n	8007d46 <_printf_i+0x216>
 8007d60:	e7eb      	b.n	8007d3a <_printf_i+0x20a>
 8007d62:	2500      	movs	r5, #0
 8007d64:	f104 0619 	add.w	r6, r4, #25
 8007d68:	e7f5      	b.n	8007d56 <_printf_i+0x226>
 8007d6a:	bf00      	nop
 8007d6c:	0800a9ea 	.word	0x0800a9ea
 8007d70:	0800a9fb 	.word	0x0800a9fb

08007d74 <std>:
 8007d74:	2300      	movs	r3, #0
 8007d76:	b510      	push	{r4, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d82:	6083      	str	r3, [r0, #8]
 8007d84:	8181      	strh	r1, [r0, #12]
 8007d86:	6643      	str	r3, [r0, #100]	; 0x64
 8007d88:	81c2      	strh	r2, [r0, #14]
 8007d8a:	6183      	str	r3, [r0, #24]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	2208      	movs	r2, #8
 8007d90:	305c      	adds	r0, #92	; 0x5c
 8007d92:	f000 f902 	bl	8007f9a <memset>
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <std+0x38>)
 8007d98:	6263      	str	r3, [r4, #36]	; 0x24
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <std+0x3c>)
 8007d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d9e:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <std+0x40>)
 8007da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007da2:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <std+0x44>)
 8007da4:	6224      	str	r4, [r4, #32]
 8007da6:	6323      	str	r3, [r4, #48]	; 0x30
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	08007f15 	.word	0x08007f15
 8007db0:	08007f37 	.word	0x08007f37
 8007db4:	08007f6f 	.word	0x08007f6f
 8007db8:	08007f93 	.word	0x08007f93

08007dbc <stdio_exit_handler>:
 8007dbc:	4a02      	ldr	r2, [pc, #8]	; (8007dc8 <stdio_exit_handler+0xc>)
 8007dbe:	4903      	ldr	r1, [pc, #12]	; (8007dcc <stdio_exit_handler+0x10>)
 8007dc0:	4803      	ldr	r0, [pc, #12]	; (8007dd0 <stdio_exit_handler+0x14>)
 8007dc2:	f000 b869 	b.w	8007e98 <_fwalk_sglue>
 8007dc6:	bf00      	nop
 8007dc8:	20000018 	.word	0x20000018
 8007dcc:	08009935 	.word	0x08009935
 8007dd0:	20000024 	.word	0x20000024

08007dd4 <cleanup_stdio>:
 8007dd4:	6841      	ldr	r1, [r0, #4]
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <cleanup_stdio+0x34>)
 8007dd8:	4299      	cmp	r1, r3
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	4604      	mov	r4, r0
 8007dde:	d001      	beq.n	8007de4 <cleanup_stdio+0x10>
 8007de0:	f001 fda8 	bl	8009934 <_fflush_r>
 8007de4:	68a1      	ldr	r1, [r4, #8]
 8007de6:	4b09      	ldr	r3, [pc, #36]	; (8007e0c <cleanup_stdio+0x38>)
 8007de8:	4299      	cmp	r1, r3
 8007dea:	d002      	beq.n	8007df2 <cleanup_stdio+0x1e>
 8007dec:	4620      	mov	r0, r4
 8007dee:	f001 fda1 	bl	8009934 <_fflush_r>
 8007df2:	68e1      	ldr	r1, [r4, #12]
 8007df4:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <cleanup_stdio+0x3c>)
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d004      	beq.n	8007e04 <cleanup_stdio+0x30>
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e00:	f001 bd98 	b.w	8009934 <_fflush_r>
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	200004cc 	.word	0x200004cc
 8007e0c:	20000534 	.word	0x20000534
 8007e10:	2000059c 	.word	0x2000059c

08007e14 <global_stdio_init.part.0>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <global_stdio_init.part.0+0x30>)
 8007e18:	4c0b      	ldr	r4, [pc, #44]	; (8007e48 <global_stdio_init.part.0+0x34>)
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <global_stdio_init.part.0+0x38>)
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	2200      	movs	r2, #0
 8007e22:	2104      	movs	r1, #4
 8007e24:	f7ff ffa6 	bl	8007d74 <std>
 8007e28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	2109      	movs	r1, #9
 8007e30:	f7ff ffa0 	bl	8007d74 <std>
 8007e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e38:	2202      	movs	r2, #2
 8007e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3e:	2112      	movs	r1, #18
 8007e40:	f7ff bf98 	b.w	8007d74 <std>
 8007e44:	20000604 	.word	0x20000604
 8007e48:	200004cc 	.word	0x200004cc
 8007e4c:	08007dbd 	.word	0x08007dbd

08007e50 <__sfp_lock_acquire>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sfp_lock_acquire+0x8>)
 8007e52:	f000 b91f 	b.w	8008094 <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	2000060d 	.word	0x2000060d

08007e5c <__sfp_lock_release>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sfp_lock_release+0x8>)
 8007e5e:	f000 b91a 	b.w	8008096 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	2000060d 	.word	0x2000060d

08007e68 <__sinit>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	f7ff fff0 	bl	8007e50 <__sfp_lock_acquire>
 8007e70:	6a23      	ldr	r3, [r4, #32]
 8007e72:	b11b      	cbz	r3, 8007e7c <__sinit+0x14>
 8007e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e78:	f7ff bff0 	b.w	8007e5c <__sfp_lock_release>
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <__sinit+0x28>)
 8007e7e:	6223      	str	r3, [r4, #32]
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <__sinit+0x2c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f5      	bne.n	8007e74 <__sinit+0xc>
 8007e88:	f7ff ffc4 	bl	8007e14 <global_stdio_init.part.0>
 8007e8c:	e7f2      	b.n	8007e74 <__sinit+0xc>
 8007e8e:	bf00      	nop
 8007e90:	08007dd5 	.word	0x08007dd5
 8007e94:	20000604 	.word	0x20000604

08007e98 <_fwalk_sglue>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	4688      	mov	r8, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	2600      	movs	r6, #0
 8007ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8007eac:	d505      	bpl.n	8007eba <_fwalk_sglue+0x22>
 8007eae:	6824      	ldr	r4, [r4, #0]
 8007eb0:	2c00      	cmp	r4, #0
 8007eb2:	d1f7      	bne.n	8007ea4 <_fwalk_sglue+0xc>
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d907      	bls.n	8007ed0 <_fwalk_sglue+0x38>
 8007ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	d003      	beq.n	8007ed0 <_fwalk_sglue+0x38>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4638      	mov	r0, r7
 8007ecc:	47c0      	blx	r8
 8007ece:	4306      	orrs	r6, r0
 8007ed0:	3568      	adds	r5, #104	; 0x68
 8007ed2:	e7e9      	b.n	8007ea8 <_fwalk_sglue+0x10>

08007ed4 <siprintf>:
 8007ed4:	b40e      	push	{r1, r2, r3}
 8007ed6:	b500      	push	{lr}
 8007ed8:	b09c      	sub	sp, #112	; 0x70
 8007eda:	ab1d      	add	r3, sp, #116	; 0x74
 8007edc:	9002      	str	r0, [sp, #8]
 8007ede:	9006      	str	r0, [sp, #24]
 8007ee0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ee4:	4809      	ldr	r0, [pc, #36]	; (8007f0c <siprintf+0x38>)
 8007ee6:	9107      	str	r1, [sp, #28]
 8007ee8:	9104      	str	r1, [sp, #16]
 8007eea:	4909      	ldr	r1, [pc, #36]	; (8007f10 <siprintf+0x3c>)
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	a902      	add	r1, sp, #8
 8007ef8:	f001 fb98 	bl	800962c <_svfiprintf_r>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	b01c      	add	sp, #112	; 0x70
 8007f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f08:	b003      	add	sp, #12
 8007f0a:	4770      	bx	lr
 8007f0c:	20000070 	.word	0x20000070
 8007f10:	ffff0208 	.word	0xffff0208

08007f14 <__sread>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	460c      	mov	r4, r1
 8007f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1c:	f000 f86c 	bl	8007ff8 <_read_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	bfab      	itete	ge
 8007f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f26:	89a3      	ldrhlt	r3, [r4, #12]
 8007f28:	181b      	addge	r3, r3, r0
 8007f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f2e:	bfac      	ite	ge
 8007f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f32:	81a3      	strhlt	r3, [r4, #12]
 8007f34:	bd10      	pop	{r4, pc}

08007f36 <__swrite>:
 8007f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	461f      	mov	r7, r3
 8007f3c:	898b      	ldrh	r3, [r1, #12]
 8007f3e:	05db      	lsls	r3, r3, #23
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	4616      	mov	r6, r2
 8007f46:	d505      	bpl.n	8007f54 <__swrite+0x1e>
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f000 f840 	bl	8007fd4 <_lseek_r>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f5e:	81a3      	strh	r3, [r4, #12]
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	4628      	mov	r0, r5
 8007f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6a:	f000 b857 	b.w	800801c <_write_r>

08007f6e <__sseek>:
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	460c      	mov	r4, r1
 8007f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f76:	f000 f82d 	bl	8007fd4 <_lseek_r>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	bf15      	itete	ne
 8007f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f8a:	81a3      	strheq	r3, [r4, #12]
 8007f8c:	bf18      	it	ne
 8007f8e:	81a3      	strhne	r3, [r4, #12]
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <__sclose>:
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 b80d 	b.w	8007fb4 <_close_r>

08007f9a <memset>:
 8007f9a:	4402      	add	r2, r0
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d100      	bne.n	8007fa4 <memset+0xa>
 8007fa2:	4770      	bx	lr
 8007fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa8:	e7f9      	b.n	8007f9e <memset+0x4>
	...

08007fac <_localeconv_r>:
 8007fac:	4800      	ldr	r0, [pc, #0]	; (8007fb0 <_localeconv_r+0x4>)
 8007fae:	4770      	bx	lr
 8007fb0:	20000164 	.word	0x20000164

08007fb4 <_close_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d06      	ldr	r5, [pc, #24]	; (8007fd0 <_close_r+0x1c>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	f7f9 ff1d 	bl	8001dfe <_close>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_close_r+0x1a>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_close_r+0x1a>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20000608 	.word	0x20000608

08007fd4 <_lseek_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	; (8007ff4 <_lseek_r+0x20>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7f9 ff32 	bl	8001e4c <_lseek>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_lseek_r+0x1e>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_lseek_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000608 	.word	0x20000608

08007ff8 <_read_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d07      	ldr	r5, [pc, #28]	; (8008018 <_read_r+0x20>)
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	4608      	mov	r0, r1
 8008000:	4611      	mov	r1, r2
 8008002:	2200      	movs	r2, #0
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f7f9 fec0 	bl	8001d8c <_read>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_read_r+0x1e>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_read_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	20000608 	.word	0x20000608

0800801c <_write_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d07      	ldr	r5, [pc, #28]	; (800803c <_write_r+0x20>)
 8008020:	4604      	mov	r4, r0
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	2200      	movs	r2, #0
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	f7f9 fecb 	bl	8001dc6 <_write>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_write_r+0x1e>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_write_r+0x1e>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	20000608 	.word	0x20000608

08008040 <__errno>:
 8008040:	4b01      	ldr	r3, [pc, #4]	; (8008048 <__errno+0x8>)
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000070 	.word	0x20000070

0800804c <__libc_init_array>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4d0d      	ldr	r5, [pc, #52]	; (8008084 <__libc_init_array+0x38>)
 8008050:	4c0d      	ldr	r4, [pc, #52]	; (8008088 <__libc_init_array+0x3c>)
 8008052:	1b64      	subs	r4, r4, r5
 8008054:	10a4      	asrs	r4, r4, #2
 8008056:	2600      	movs	r6, #0
 8008058:	42a6      	cmp	r6, r4
 800805a:	d109      	bne.n	8008070 <__libc_init_array+0x24>
 800805c:	4d0b      	ldr	r5, [pc, #44]	; (800808c <__libc_init_array+0x40>)
 800805e:	4c0c      	ldr	r4, [pc, #48]	; (8008090 <__libc_init_array+0x44>)
 8008060:	f002 fb26 	bl	800a6b0 <_init>
 8008064:	1b64      	subs	r4, r4, r5
 8008066:	10a4      	asrs	r4, r4, #2
 8008068:	2600      	movs	r6, #0
 800806a:	42a6      	cmp	r6, r4
 800806c:	d105      	bne.n	800807a <__libc_init_array+0x2e>
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	f855 3b04 	ldr.w	r3, [r5], #4
 8008074:	4798      	blx	r3
 8008076:	3601      	adds	r6, #1
 8008078:	e7ee      	b.n	8008058 <__libc_init_array+0xc>
 800807a:	f855 3b04 	ldr.w	r3, [r5], #4
 800807e:	4798      	blx	r3
 8008080:	3601      	adds	r6, #1
 8008082:	e7f2      	b.n	800806a <__libc_init_array+0x1e>
 8008084:	0800c610 	.word	0x0800c610
 8008088:	0800c610 	.word	0x0800c610
 800808c:	0800c610 	.word	0x0800c610
 8008090:	0800c614 	.word	0x0800c614

08008094 <__retarget_lock_acquire_recursive>:
 8008094:	4770      	bx	lr

08008096 <__retarget_lock_release_recursive>:
 8008096:	4770      	bx	lr

08008098 <quorem>:
 8008098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	6903      	ldr	r3, [r0, #16]
 800809e:	690c      	ldr	r4, [r1, #16]
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	4607      	mov	r7, r0
 80080a4:	db7e      	blt.n	80081a4 <quorem+0x10c>
 80080a6:	3c01      	subs	r4, #1
 80080a8:	f101 0814 	add.w	r8, r1, #20
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080be:	3301      	adds	r3, #1
 80080c0:	429a      	cmp	r2, r3
 80080c2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80080ce:	d331      	bcc.n	8008134 <quorem+0x9c>
 80080d0:	f04f 0e00 	mov.w	lr, #0
 80080d4:	4640      	mov	r0, r8
 80080d6:	46ac      	mov	ip, r5
 80080d8:	46f2      	mov	sl, lr
 80080da:	f850 2b04 	ldr.w	r2, [r0], #4
 80080de:	b293      	uxth	r3, r2
 80080e0:	fb06 e303 	mla	r3, r6, r3, lr
 80080e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080e8:	0c1a      	lsrs	r2, r3, #16
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	ebaa 0303 	sub.w	r3, sl, r3
 80080f0:	f8dc a000 	ldr.w	sl, [ip]
 80080f4:	fa13 f38a 	uxtah	r3, r3, sl
 80080f8:	fb06 220e 	mla	r2, r6, lr, r2
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008104:	b292      	uxth	r2, r2
 8008106:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800810a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800810e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008112:	4581      	cmp	r9, r0
 8008114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008118:	f84c 3b04 	str.w	r3, [ip], #4
 800811c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008120:	d2db      	bcs.n	80080da <quorem+0x42>
 8008122:	f855 300b 	ldr.w	r3, [r5, fp]
 8008126:	b92b      	cbnz	r3, 8008134 <quorem+0x9c>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	3b04      	subs	r3, #4
 800812c:	429d      	cmp	r5, r3
 800812e:	461a      	mov	r2, r3
 8008130:	d32c      	bcc.n	800818c <quorem+0xf4>
 8008132:	613c      	str	r4, [r7, #16]
 8008134:	4638      	mov	r0, r7
 8008136:	f001 f91f 	bl	8009378 <__mcmp>
 800813a:	2800      	cmp	r0, #0
 800813c:	db22      	blt.n	8008184 <quorem+0xec>
 800813e:	3601      	adds	r6, #1
 8008140:	4629      	mov	r1, r5
 8008142:	2000      	movs	r0, #0
 8008144:	f858 2b04 	ldr.w	r2, [r8], #4
 8008148:	f8d1 c000 	ldr.w	ip, [r1]
 800814c:	b293      	uxth	r3, r2
 800814e:	1ac3      	subs	r3, r0, r3
 8008150:	0c12      	lsrs	r2, r2, #16
 8008152:	fa13 f38c 	uxtah	r3, r3, ip
 8008156:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800815a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008164:	45c1      	cmp	r9, r8
 8008166:	f841 3b04 	str.w	r3, [r1], #4
 800816a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800816e:	d2e9      	bcs.n	8008144 <quorem+0xac>
 8008170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008178:	b922      	cbnz	r2, 8008184 <quorem+0xec>
 800817a:	3b04      	subs	r3, #4
 800817c:	429d      	cmp	r5, r3
 800817e:	461a      	mov	r2, r3
 8008180:	d30a      	bcc.n	8008198 <quorem+0x100>
 8008182:	613c      	str	r4, [r7, #16]
 8008184:	4630      	mov	r0, r6
 8008186:	b003      	add	sp, #12
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	6812      	ldr	r2, [r2, #0]
 800818e:	3b04      	subs	r3, #4
 8008190:	2a00      	cmp	r2, #0
 8008192:	d1ce      	bne.n	8008132 <quorem+0x9a>
 8008194:	3c01      	subs	r4, #1
 8008196:	e7c9      	b.n	800812c <quorem+0x94>
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	3b04      	subs	r3, #4
 800819c:	2a00      	cmp	r2, #0
 800819e:	d1f0      	bne.n	8008182 <quorem+0xea>
 80081a0:	3c01      	subs	r4, #1
 80081a2:	e7eb      	b.n	800817c <quorem+0xe4>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e7ee      	b.n	8008186 <quorem+0xee>

080081a8 <_dtoa_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	ed2d 8b02 	vpush	{d8}
 80081b0:	69c5      	ldr	r5, [r0, #28]
 80081b2:	b091      	sub	sp, #68	; 0x44
 80081b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081b8:	ec59 8b10 	vmov	r8, r9, d0
 80081bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80081be:	9106      	str	r1, [sp, #24]
 80081c0:	4606      	mov	r6, r0
 80081c2:	9208      	str	r2, [sp, #32]
 80081c4:	930c      	str	r3, [sp, #48]	; 0x30
 80081c6:	b975      	cbnz	r5, 80081e6 <_dtoa_r+0x3e>
 80081c8:	2010      	movs	r0, #16
 80081ca:	f000 fda5 	bl	8008d18 <malloc>
 80081ce:	4602      	mov	r2, r0
 80081d0:	61f0      	str	r0, [r6, #28]
 80081d2:	b920      	cbnz	r0, 80081de <_dtoa_r+0x36>
 80081d4:	4ba6      	ldr	r3, [pc, #664]	; (8008470 <_dtoa_r+0x2c8>)
 80081d6:	21ef      	movs	r1, #239	; 0xef
 80081d8:	48a6      	ldr	r0, [pc, #664]	; (8008474 <_dtoa_r+0x2cc>)
 80081da:	f001 fc0b 	bl	80099f4 <__assert_func>
 80081de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081e2:	6005      	str	r5, [r0, #0]
 80081e4:	60c5      	str	r5, [r0, #12]
 80081e6:	69f3      	ldr	r3, [r6, #28]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	b151      	cbz	r1, 8008202 <_dtoa_r+0x5a>
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	604a      	str	r2, [r1, #4]
 80081f0:	2301      	movs	r3, #1
 80081f2:	4093      	lsls	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	4630      	mov	r0, r6
 80081f8:	f000 fe82 	bl	8008f00 <_Bfree>
 80081fc:	69f3      	ldr	r3, [r6, #28]
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	f1b9 0300 	subs.w	r3, r9, #0
 8008206:	bfbb      	ittet	lt
 8008208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800820c:	9303      	strlt	r3, [sp, #12]
 800820e:	2300      	movge	r3, #0
 8008210:	2201      	movlt	r2, #1
 8008212:	bfac      	ite	ge
 8008214:	6023      	strge	r3, [r4, #0]
 8008216:	6022      	strlt	r2, [r4, #0]
 8008218:	4b97      	ldr	r3, [pc, #604]	; (8008478 <_dtoa_r+0x2d0>)
 800821a:	9c03      	ldr	r4, [sp, #12]
 800821c:	43a3      	bics	r3, r4
 800821e:	d11c      	bne.n	800825a <_dtoa_r+0xb2>
 8008220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008222:	f242 730f 	movw	r3, #9999	; 0x270f
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800822c:	ea53 0308 	orrs.w	r3, r3, r8
 8008230:	f000 84fb 	beq.w	8008c2a <_dtoa_r+0xa82>
 8008234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008236:	b963      	cbnz	r3, 8008252 <_dtoa_r+0xaa>
 8008238:	4b90      	ldr	r3, [pc, #576]	; (800847c <_dtoa_r+0x2d4>)
 800823a:	e020      	b.n	800827e <_dtoa_r+0xd6>
 800823c:	4b90      	ldr	r3, [pc, #576]	; (8008480 <_dtoa_r+0x2d8>)
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	3308      	adds	r3, #8
 8008242:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	9801      	ldr	r0, [sp, #4]
 8008248:	b011      	add	sp, #68	; 0x44
 800824a:	ecbd 8b02 	vpop	{d8}
 800824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008252:	4b8a      	ldr	r3, [pc, #552]	; (800847c <_dtoa_r+0x2d4>)
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	3303      	adds	r3, #3
 8008258:	e7f3      	b.n	8008242 <_dtoa_r+0x9a>
 800825a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800825e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008266:	d10c      	bne.n	8008282 <_dtoa_r+0xda>
 8008268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800826a:	2301      	movs	r3, #1
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 84d7 	beq.w	8008c24 <_dtoa_r+0xa7c>
 8008276:	4b83      	ldr	r3, [pc, #524]	; (8008484 <_dtoa_r+0x2dc>)
 8008278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	3b01      	subs	r3, #1
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	e7e1      	b.n	8008246 <_dtoa_r+0x9e>
 8008282:	aa0e      	add	r2, sp, #56	; 0x38
 8008284:	a90f      	add	r1, sp, #60	; 0x3c
 8008286:	4630      	mov	r0, r6
 8008288:	eeb0 0b48 	vmov.f64	d0, d8
 800828c:	f001 f91a 	bl	80094c4 <__d2b>
 8008290:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008296:	4605      	mov	r5, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d046      	beq.n	800832a <_dtoa_r+0x182>
 800829c:	eeb0 7b48 	vmov.f64	d7, d8
 80082a0:	ee18 1a90 	vmov	r1, s17
 80082a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80082a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80082ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80082b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082b4:	2000      	movs	r0, #0
 80082b6:	ee07 1a90 	vmov	s15, r1
 80082ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80082be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008458 <_dtoa_r+0x2b0>
 80082c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80082c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008460 <_dtoa_r+0x2b8>
 80082ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80082ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008468 <_dtoa_r+0x2c0>
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80082da:	eeb0 7b46 	vmov.f64	d7, d6
 80082de:	eea4 7b05 	vfma.f64	d7, d4, d5
 80082e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80082e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	ee16 ba90 	vmov	fp, s13
 80082f2:	9009      	str	r0, [sp, #36]	; 0x24
 80082f4:	d508      	bpl.n	8008308 <_dtoa_r+0x160>
 80082f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80082fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80082fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008302:	bf18      	it	ne
 8008304:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008308:	f1bb 0f16 	cmp.w	fp, #22
 800830c:	d82b      	bhi.n	8008366 <_dtoa_r+0x1be>
 800830e:	495e      	ldr	r1, [pc, #376]	; (8008488 <_dtoa_r+0x2e0>)
 8008310:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008314:	ed91 7b00 	vldr	d7, [r1]
 8008318:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008320:	d501      	bpl.n	8008326 <_dtoa_r+0x17e>
 8008322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008326:	2100      	movs	r1, #0
 8008328:	e01e      	b.n	8008368 <_dtoa_r+0x1c0>
 800832a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800832c:	4413      	add	r3, r2
 800832e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008332:	2920      	cmp	r1, #32
 8008334:	bfc1      	itttt	gt
 8008336:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800833a:	408c      	lslgt	r4, r1
 800833c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008340:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008344:	bfd6      	itet	le
 8008346:	f1c1 0120 	rsble	r1, r1, #32
 800834a:	4321      	orrgt	r1, r4
 800834c:	fa08 f101 	lslle.w	r1, r8, r1
 8008350:	ee07 1a90 	vmov	s15, r1
 8008354:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008358:	3b01      	subs	r3, #1
 800835a:	ee17 1a90 	vmov	r1, s15
 800835e:	2001      	movs	r0, #1
 8008360:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008364:	e7a7      	b.n	80082b6 <_dtoa_r+0x10e>
 8008366:	2101      	movs	r1, #1
 8008368:	1ad2      	subs	r2, r2, r3
 800836a:	1e53      	subs	r3, r2, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	bf45      	ittet	mi
 8008370:	f1c2 0301 	rsbmi	r3, r2, #1
 8008374:	9304      	strmi	r3, [sp, #16]
 8008376:	2300      	movpl	r3, #0
 8008378:	2300      	movmi	r3, #0
 800837a:	bf4c      	ite	mi
 800837c:	9305      	strmi	r3, [sp, #20]
 800837e:	9304      	strpl	r3, [sp, #16]
 8008380:	f1bb 0f00 	cmp.w	fp, #0
 8008384:	910b      	str	r1, [sp, #44]	; 0x2c
 8008386:	db18      	blt.n	80083ba <_dtoa_r+0x212>
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800838e:	445b      	add	r3, fp
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	2300      	movs	r3, #0
 8008394:	9a06      	ldr	r2, [sp, #24]
 8008396:	2a09      	cmp	r2, #9
 8008398:	d848      	bhi.n	800842c <_dtoa_r+0x284>
 800839a:	2a05      	cmp	r2, #5
 800839c:	bfc4      	itt	gt
 800839e:	3a04      	subgt	r2, #4
 80083a0:	9206      	strgt	r2, [sp, #24]
 80083a2:	9a06      	ldr	r2, [sp, #24]
 80083a4:	f1a2 0202 	sub.w	r2, r2, #2
 80083a8:	bfcc      	ite	gt
 80083aa:	2400      	movgt	r4, #0
 80083ac:	2401      	movle	r4, #1
 80083ae:	2a03      	cmp	r2, #3
 80083b0:	d847      	bhi.n	8008442 <_dtoa_r+0x29a>
 80083b2:	e8df f002 	tbb	[pc, r2]
 80083b6:	2d0b      	.short	0x2d0b
 80083b8:	392b      	.short	0x392b
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2200      	movs	r2, #0
 80083be:	eba3 030b 	sub.w	r3, r3, fp
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	920a      	str	r2, [sp, #40]	; 0x28
 80083c6:	f1cb 0300 	rsb	r3, fp, #0
 80083ca:	e7e3      	b.n	8008394 <_dtoa_r+0x1ec>
 80083cc:	2200      	movs	r2, #0
 80083ce:	9207      	str	r2, [sp, #28]
 80083d0:	9a08      	ldr	r2, [sp, #32]
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	dc38      	bgt.n	8008448 <_dtoa_r+0x2a0>
 80083d6:	f04f 0a01 	mov.w	sl, #1
 80083da:	46d1      	mov	r9, sl
 80083dc:	4652      	mov	r2, sl
 80083de:	f8cd a020 	str.w	sl, [sp, #32]
 80083e2:	69f7      	ldr	r7, [r6, #28]
 80083e4:	2100      	movs	r1, #0
 80083e6:	2004      	movs	r0, #4
 80083e8:	f100 0c14 	add.w	ip, r0, #20
 80083ec:	4594      	cmp	ip, r2
 80083ee:	d930      	bls.n	8008452 <_dtoa_r+0x2aa>
 80083f0:	6079      	str	r1, [r7, #4]
 80083f2:	4630      	mov	r0, r6
 80083f4:	930d      	str	r3, [sp, #52]	; 0x34
 80083f6:	f000 fd43 	bl	8008e80 <_Balloc>
 80083fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083fc:	9001      	str	r0, [sp, #4]
 80083fe:	4602      	mov	r2, r0
 8008400:	2800      	cmp	r0, #0
 8008402:	d145      	bne.n	8008490 <_dtoa_r+0x2e8>
 8008404:	4b21      	ldr	r3, [pc, #132]	; (800848c <_dtoa_r+0x2e4>)
 8008406:	f240 11af 	movw	r1, #431	; 0x1af
 800840a:	e6e5      	b.n	80081d8 <_dtoa_r+0x30>
 800840c:	2201      	movs	r2, #1
 800840e:	e7de      	b.n	80083ce <_dtoa_r+0x226>
 8008410:	2200      	movs	r2, #0
 8008412:	9207      	str	r2, [sp, #28]
 8008414:	9a08      	ldr	r2, [sp, #32]
 8008416:	eb0b 0a02 	add.w	sl, fp, r2
 800841a:	f10a 0901 	add.w	r9, sl, #1
 800841e:	464a      	mov	r2, r9
 8008420:	2a01      	cmp	r2, #1
 8008422:	bfb8      	it	lt
 8008424:	2201      	movlt	r2, #1
 8008426:	e7dc      	b.n	80083e2 <_dtoa_r+0x23a>
 8008428:	2201      	movs	r2, #1
 800842a:	e7f2      	b.n	8008412 <_dtoa_r+0x26a>
 800842c:	2401      	movs	r4, #1
 800842e:	2200      	movs	r2, #0
 8008430:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008434:	f04f 3aff 	mov.w	sl, #4294967295
 8008438:	2100      	movs	r1, #0
 800843a:	46d1      	mov	r9, sl
 800843c:	2212      	movs	r2, #18
 800843e:	9108      	str	r1, [sp, #32]
 8008440:	e7cf      	b.n	80083e2 <_dtoa_r+0x23a>
 8008442:	2201      	movs	r2, #1
 8008444:	9207      	str	r2, [sp, #28]
 8008446:	e7f5      	b.n	8008434 <_dtoa_r+0x28c>
 8008448:	f8dd a020 	ldr.w	sl, [sp, #32]
 800844c:	46d1      	mov	r9, sl
 800844e:	4652      	mov	r2, sl
 8008450:	e7c7      	b.n	80083e2 <_dtoa_r+0x23a>
 8008452:	3101      	adds	r1, #1
 8008454:	0040      	lsls	r0, r0, #1
 8008456:	e7c7      	b.n	80083e8 <_dtoa_r+0x240>
 8008458:	636f4361 	.word	0x636f4361
 800845c:	3fd287a7 	.word	0x3fd287a7
 8008460:	8b60c8b3 	.word	0x8b60c8b3
 8008464:	3fc68a28 	.word	0x3fc68a28
 8008468:	509f79fb 	.word	0x509f79fb
 800846c:	3fd34413 	.word	0x3fd34413
 8008470:	0800aa19 	.word	0x0800aa19
 8008474:	0800aa30 	.word	0x0800aa30
 8008478:	7ff00000 	.word	0x7ff00000
 800847c:	0800aa15 	.word	0x0800aa15
 8008480:	0800aa0c 	.word	0x0800aa0c
 8008484:	0800a9e9 	.word	0x0800a9e9
 8008488:	0800ab20 	.word	0x0800ab20
 800848c:	0800aa88 	.word	0x0800aa88
 8008490:	69f2      	ldr	r2, [r6, #28]
 8008492:	9901      	ldr	r1, [sp, #4]
 8008494:	6011      	str	r1, [r2, #0]
 8008496:	f1b9 0f0e 	cmp.w	r9, #14
 800849a:	d86c      	bhi.n	8008576 <_dtoa_r+0x3ce>
 800849c:	2c00      	cmp	r4, #0
 800849e:	d06a      	beq.n	8008576 <_dtoa_r+0x3ce>
 80084a0:	f1bb 0f00 	cmp.w	fp, #0
 80084a4:	f340 80a0 	ble.w	80085e8 <_dtoa_r+0x440>
 80084a8:	4ac1      	ldr	r2, [pc, #772]	; (80087b0 <_dtoa_r+0x608>)
 80084aa:	f00b 010f 	and.w	r1, fp, #15
 80084ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80084b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084b6:	ed92 7b00 	vldr	d7, [r2]
 80084ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 80084be:	f000 8087 	beq.w	80085d0 <_dtoa_r+0x428>
 80084c2:	49bc      	ldr	r1, [pc, #752]	; (80087b4 <_dtoa_r+0x60c>)
 80084c4:	ed91 6b08 	vldr	d6, [r1, #32]
 80084c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80084cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084d0:	f002 020f 	and.w	r2, r2, #15
 80084d4:	2103      	movs	r1, #3
 80084d6:	48b7      	ldr	r0, [pc, #732]	; (80087b4 <_dtoa_r+0x60c>)
 80084d8:	2a00      	cmp	r2, #0
 80084da:	d17b      	bne.n	80085d4 <_dtoa_r+0x42c>
 80084dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	f000 80a0 	beq.w	8008634 <_dtoa_r+0x48c>
 80084f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80084f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	f140 8098 	bpl.w	8008634 <_dtoa_r+0x48c>
 8008504:	f1b9 0f00 	cmp.w	r9, #0
 8008508:	f000 8094 	beq.w	8008634 <_dtoa_r+0x48c>
 800850c:	f1ba 0f00 	cmp.w	sl, #0
 8008510:	dd2f      	ble.n	8008572 <_dtoa_r+0x3ca>
 8008512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800851a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800851e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008522:	3101      	adds	r1, #1
 8008524:	4654      	mov	r4, sl
 8008526:	ed9d 6b02 	vldr	d6, [sp, #8]
 800852a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800852e:	ee07 1a90 	vmov	s15, r1
 8008532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008536:	eea7 5b06 	vfma.f64	d5, d7, d6
 800853a:	ee15 7a90 	vmov	r7, s11
 800853e:	ec51 0b15 	vmov	r0, r1, d5
 8008542:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008546:	2c00      	cmp	r4, #0
 8008548:	d177      	bne.n	800863a <_dtoa_r+0x492>
 800854a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800854e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008552:	ec41 0b17 	vmov	d7, r0, r1
 8008556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800855a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855e:	f300 826a 	bgt.w	8008a36 <_dtoa_r+0x88e>
 8008562:	eeb1 7b47 	vneg.f64	d7, d7
 8008566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856e:	f100 8260 	bmi.w	8008a32 <_dtoa_r+0x88a>
 8008572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008578:	2a00      	cmp	r2, #0
 800857a:	f2c0 811d 	blt.w	80087b8 <_dtoa_r+0x610>
 800857e:	f1bb 0f0e 	cmp.w	fp, #14
 8008582:	f300 8119 	bgt.w	80087b8 <_dtoa_r+0x610>
 8008586:	4b8a      	ldr	r3, [pc, #552]	; (80087b0 <_dtoa_r+0x608>)
 8008588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800858c:	ed93 6b00 	vldr	d6, [r3]
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f280 80b7 	bge.w	8008706 <_dtoa_r+0x55e>
 8008598:	f1b9 0f00 	cmp.w	r9, #0
 800859c:	f300 80b3 	bgt.w	8008706 <_dtoa_r+0x55e>
 80085a0:	f040 8246 	bne.w	8008a30 <_dtoa_r+0x888>
 80085a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80085ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b8:	464c      	mov	r4, r9
 80085ba:	464f      	mov	r7, r9
 80085bc:	f280 821c 	bge.w	80089f8 <_dtoa_r+0x850>
 80085c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085c4:	2331      	movs	r3, #49	; 0x31
 80085c6:	f808 3b01 	strb.w	r3, [r8], #1
 80085ca:	f10b 0b01 	add.w	fp, fp, #1
 80085ce:	e218      	b.n	8008a02 <_dtoa_r+0x85a>
 80085d0:	2102      	movs	r1, #2
 80085d2:	e780      	b.n	80084d6 <_dtoa_r+0x32e>
 80085d4:	07d4      	lsls	r4, r2, #31
 80085d6:	d504      	bpl.n	80085e2 <_dtoa_r+0x43a>
 80085d8:	ed90 6b00 	vldr	d6, [r0]
 80085dc:	3101      	adds	r1, #1
 80085de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085e2:	1052      	asrs	r2, r2, #1
 80085e4:	3008      	adds	r0, #8
 80085e6:	e777      	b.n	80084d8 <_dtoa_r+0x330>
 80085e8:	d022      	beq.n	8008630 <_dtoa_r+0x488>
 80085ea:	f1cb 0200 	rsb	r2, fp, #0
 80085ee:	4970      	ldr	r1, [pc, #448]	; (80087b0 <_dtoa_r+0x608>)
 80085f0:	f002 000f 	and.w	r0, r2, #15
 80085f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80085f8:	ed91 7b00 	vldr	d7, [r1]
 80085fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008600:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008604:	486b      	ldr	r0, [pc, #428]	; (80087b4 <_dtoa_r+0x60c>)
 8008606:	1112      	asrs	r2, r2, #4
 8008608:	2400      	movs	r4, #0
 800860a:	2102      	movs	r1, #2
 800860c:	b92a      	cbnz	r2, 800861a <_dtoa_r+0x472>
 800860e:	2c00      	cmp	r4, #0
 8008610:	f43f af6a 	beq.w	80084e8 <_dtoa_r+0x340>
 8008614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008618:	e766      	b.n	80084e8 <_dtoa_r+0x340>
 800861a:	07d7      	lsls	r7, r2, #31
 800861c:	d505      	bpl.n	800862a <_dtoa_r+0x482>
 800861e:	ed90 6b00 	vldr	d6, [r0]
 8008622:	3101      	adds	r1, #1
 8008624:	2401      	movs	r4, #1
 8008626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800862a:	1052      	asrs	r2, r2, #1
 800862c:	3008      	adds	r0, #8
 800862e:	e7ed      	b.n	800860c <_dtoa_r+0x464>
 8008630:	2102      	movs	r1, #2
 8008632:	e759      	b.n	80084e8 <_dtoa_r+0x340>
 8008634:	465a      	mov	r2, fp
 8008636:	464c      	mov	r4, r9
 8008638:	e775      	b.n	8008526 <_dtoa_r+0x37e>
 800863a:	ec41 0b17 	vmov	d7, r0, r1
 800863e:	495c      	ldr	r1, [pc, #368]	; (80087b0 <_dtoa_r+0x608>)
 8008640:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008644:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	440c      	add	r4, r1
 800864c:	9907      	ldr	r1, [sp, #28]
 800864e:	b351      	cbz	r1, 80086a6 <_dtoa_r+0x4fe>
 8008650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800865c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008664:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800866c:	ee14 1a90 	vmov	r1, s9
 8008670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008674:	3130      	adds	r1, #48	; 0x30
 8008676:	ee36 6b45 	vsub.f64	d6, d6, d5
 800867a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800867e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008682:	f808 1b01 	strb.w	r1, [r8], #1
 8008686:	d439      	bmi.n	80086fc <_dtoa_r+0x554>
 8008688:	ee32 5b46 	vsub.f64	d5, d2, d6
 800868c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008694:	d472      	bmi.n	800877c <_dtoa_r+0x5d4>
 8008696:	45a0      	cmp	r8, r4
 8008698:	f43f af6b 	beq.w	8008572 <_dtoa_r+0x3ca>
 800869c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80086a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086a4:	e7e0      	b.n	8008668 <_dtoa_r+0x4c0>
 80086a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80086ae:	4620      	mov	r0, r4
 80086b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80086b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80086b8:	ee14 1a90 	vmov	r1, s9
 80086bc:	3130      	adds	r1, #48	; 0x30
 80086be:	f808 1b01 	strb.w	r1, [r8], #1
 80086c2:	45a0      	cmp	r8, r4
 80086c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086cc:	d118      	bne.n	8008700 <_dtoa_r+0x558>
 80086ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80086d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80086d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80086da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086de:	dc4d      	bgt.n	800877c <_dtoa_r+0x5d4>
 80086e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80086e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80086e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ec:	f57f af41 	bpl.w	8008572 <_dtoa_r+0x3ca>
 80086f0:	4680      	mov	r8, r0
 80086f2:	3801      	subs	r0, #1
 80086f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80086f8:	2b30      	cmp	r3, #48	; 0x30
 80086fa:	d0f9      	beq.n	80086f0 <_dtoa_r+0x548>
 80086fc:	4693      	mov	fp, r2
 80086fe:	e02a      	b.n	8008756 <_dtoa_r+0x5ae>
 8008700:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008704:	e7d6      	b.n	80086b4 <_dtoa_r+0x50c>
 8008706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800870a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800870e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800871a:	ee15 3a10 	vmov	r3, s10
 800871e:	3330      	adds	r3, #48	; 0x30
 8008720:	f808 3b01 	strb.w	r3, [r8], #1
 8008724:	9b01      	ldr	r3, [sp, #4]
 8008726:	eba8 0303 	sub.w	r3, r8, r3
 800872a:	4599      	cmp	r9, r3
 800872c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008730:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008734:	d133      	bne.n	800879e <_dtoa_r+0x5f6>
 8008736:	ee37 7b07 	vadd.f64	d7, d7, d7
 800873a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800873e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008742:	dc1a      	bgt.n	800877a <_dtoa_r+0x5d2>
 8008744:	eeb4 7b46 	vcmp.f64	d7, d6
 8008748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874c:	d103      	bne.n	8008756 <_dtoa_r+0x5ae>
 800874e:	ee15 3a10 	vmov	r3, s10
 8008752:	07d9      	lsls	r1, r3, #31
 8008754:	d411      	bmi.n	800877a <_dtoa_r+0x5d2>
 8008756:	4629      	mov	r1, r5
 8008758:	4630      	mov	r0, r6
 800875a:	f000 fbd1 	bl	8008f00 <_Bfree>
 800875e:	2300      	movs	r3, #0
 8008760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008762:	f888 3000 	strb.w	r3, [r8]
 8008766:	f10b 0301 	add.w	r3, fp, #1
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800876e:	2b00      	cmp	r3, #0
 8008770:	f43f ad69 	beq.w	8008246 <_dtoa_r+0x9e>
 8008774:	f8c3 8000 	str.w	r8, [r3]
 8008778:	e565      	b.n	8008246 <_dtoa_r+0x9e>
 800877a:	465a      	mov	r2, fp
 800877c:	4643      	mov	r3, r8
 800877e:	4698      	mov	r8, r3
 8008780:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008784:	2939      	cmp	r1, #57	; 0x39
 8008786:	d106      	bne.n	8008796 <_dtoa_r+0x5ee>
 8008788:	9901      	ldr	r1, [sp, #4]
 800878a:	4299      	cmp	r1, r3
 800878c:	d1f7      	bne.n	800877e <_dtoa_r+0x5d6>
 800878e:	9801      	ldr	r0, [sp, #4]
 8008790:	2130      	movs	r1, #48	; 0x30
 8008792:	3201      	adds	r2, #1
 8008794:	7001      	strb	r1, [r0, #0]
 8008796:	7819      	ldrb	r1, [r3, #0]
 8008798:	3101      	adds	r1, #1
 800879a:	7019      	strb	r1, [r3, #0]
 800879c:	e7ae      	b.n	80086fc <_dtoa_r+0x554>
 800879e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087aa:	d1b2      	bne.n	8008712 <_dtoa_r+0x56a>
 80087ac:	e7d3      	b.n	8008756 <_dtoa_r+0x5ae>
 80087ae:	bf00      	nop
 80087b0:	0800ab20 	.word	0x0800ab20
 80087b4:	0800aaf8 	.word	0x0800aaf8
 80087b8:	9907      	ldr	r1, [sp, #28]
 80087ba:	2900      	cmp	r1, #0
 80087bc:	f000 80d0 	beq.w	8008960 <_dtoa_r+0x7b8>
 80087c0:	9906      	ldr	r1, [sp, #24]
 80087c2:	2901      	cmp	r1, #1
 80087c4:	f300 80b4 	bgt.w	8008930 <_dtoa_r+0x788>
 80087c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ca:	2900      	cmp	r1, #0
 80087cc:	f000 80ac 	beq.w	8008928 <_dtoa_r+0x780>
 80087d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80087d8:	461c      	mov	r4, r3
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	2101      	movs	r1, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	4630      	mov	r0, r6
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	f000 fc3e 	bl	800906c <__i2b>
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	4607      	mov	r7, r0
 80087f4:	f1b8 0f00 	cmp.w	r8, #0
 80087f8:	d00d      	beq.n	8008816 <_dtoa_r+0x66e>
 80087fa:	9a05      	ldr	r2, [sp, #20]
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	dd0a      	ble.n	8008816 <_dtoa_r+0x66e>
 8008800:	4542      	cmp	r2, r8
 8008802:	9904      	ldr	r1, [sp, #16]
 8008804:	bfa8      	it	ge
 8008806:	4642      	movge	r2, r8
 8008808:	1a89      	subs	r1, r1, r2
 800880a:	9104      	str	r1, [sp, #16]
 800880c:	9905      	ldr	r1, [sp, #20]
 800880e:	eba8 0802 	sub.w	r8, r8, r2
 8008812:	1a8a      	subs	r2, r1, r2
 8008814:	9205      	str	r2, [sp, #20]
 8008816:	b303      	cbz	r3, 800885a <_dtoa_r+0x6b2>
 8008818:	9a07      	ldr	r2, [sp, #28]
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 80a5 	beq.w	800896a <_dtoa_r+0x7c2>
 8008820:	2c00      	cmp	r4, #0
 8008822:	dd13      	ble.n	800884c <_dtoa_r+0x6a4>
 8008824:	4639      	mov	r1, r7
 8008826:	4622      	mov	r2, r4
 8008828:	4630      	mov	r0, r6
 800882a:	930d      	str	r3, [sp, #52]	; 0x34
 800882c:	f000 fcde 	bl	80091ec <__pow5mult>
 8008830:	462a      	mov	r2, r5
 8008832:	4601      	mov	r1, r0
 8008834:	4607      	mov	r7, r0
 8008836:	4630      	mov	r0, r6
 8008838:	f000 fc2e 	bl	8009098 <__multiply>
 800883c:	4629      	mov	r1, r5
 800883e:	9009      	str	r0, [sp, #36]	; 0x24
 8008840:	4630      	mov	r0, r6
 8008842:	f000 fb5d 	bl	8008f00 <_Bfree>
 8008846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800884a:	4615      	mov	r5, r2
 800884c:	1b1a      	subs	r2, r3, r4
 800884e:	d004      	beq.n	800885a <_dtoa_r+0x6b2>
 8008850:	4629      	mov	r1, r5
 8008852:	4630      	mov	r0, r6
 8008854:	f000 fcca 	bl	80091ec <__pow5mult>
 8008858:	4605      	mov	r5, r0
 800885a:	2101      	movs	r1, #1
 800885c:	4630      	mov	r0, r6
 800885e:	f000 fc05 	bl	800906c <__i2b>
 8008862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	f340 8081 	ble.w	800896e <_dtoa_r+0x7c6>
 800886c:	461a      	mov	r2, r3
 800886e:	4601      	mov	r1, r0
 8008870:	4630      	mov	r0, r6
 8008872:	f000 fcbb 	bl	80091ec <__pow5mult>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b01      	cmp	r3, #1
 800887a:	4604      	mov	r4, r0
 800887c:	dd7a      	ble.n	8008974 <_dtoa_r+0x7cc>
 800887e:	2300      	movs	r3, #0
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	6922      	ldr	r2, [r4, #16]
 8008884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008888:	6910      	ldr	r0, [r2, #16]
 800888a:	f000 fba1 	bl	8008fd0 <__hi0bits>
 800888e:	f1c0 0020 	rsb	r0, r0, #32
 8008892:	9b05      	ldr	r3, [sp, #20]
 8008894:	4418      	add	r0, r3
 8008896:	f010 001f 	ands.w	r0, r0, #31
 800889a:	f000 8093 	beq.w	80089c4 <_dtoa_r+0x81c>
 800889e:	f1c0 0220 	rsb	r2, r0, #32
 80088a2:	2a04      	cmp	r2, #4
 80088a4:	f340 8085 	ble.w	80089b2 <_dtoa_r+0x80a>
 80088a8:	9b04      	ldr	r3, [sp, #16]
 80088aa:	f1c0 001c 	rsb	r0, r0, #28
 80088ae:	4403      	add	r3, r0
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	9b05      	ldr	r3, [sp, #20]
 80088b4:	4480      	add	r8, r0
 80088b6:	4403      	add	r3, r0
 80088b8:	9305      	str	r3, [sp, #20]
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd05      	ble.n	80088cc <_dtoa_r+0x724>
 80088c0:	4629      	mov	r1, r5
 80088c2:	461a      	mov	r2, r3
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 fceb 	bl	80092a0 <__lshift>
 80088ca:	4605      	mov	r5, r0
 80088cc:	9b05      	ldr	r3, [sp, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd05      	ble.n	80088de <_dtoa_r+0x736>
 80088d2:	4621      	mov	r1, r4
 80088d4:	461a      	mov	r2, r3
 80088d6:	4630      	mov	r0, r6
 80088d8:	f000 fce2 	bl	80092a0 <__lshift>
 80088dc:	4604      	mov	r4, r0
 80088de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d071      	beq.n	80089c8 <_dtoa_r+0x820>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 fd46 	bl	8009378 <__mcmp>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	da6b      	bge.n	80089c8 <_dtoa_r+0x820>
 80088f0:	2300      	movs	r3, #0
 80088f2:	4629      	mov	r1, r5
 80088f4:	220a      	movs	r2, #10
 80088f6:	4630      	mov	r0, r6
 80088f8:	f000 fb24 	bl	8008f44 <__multadd>
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008902:	4605      	mov	r5, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8197 	beq.w	8008c38 <_dtoa_r+0xa90>
 800890a:	4639      	mov	r1, r7
 800890c:	2300      	movs	r3, #0
 800890e:	220a      	movs	r2, #10
 8008910:	4630      	mov	r0, r6
 8008912:	f000 fb17 	bl	8008f44 <__multadd>
 8008916:	f1ba 0f00 	cmp.w	sl, #0
 800891a:	4607      	mov	r7, r0
 800891c:	f300 8093 	bgt.w	8008a46 <_dtoa_r+0x89e>
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	2b02      	cmp	r3, #2
 8008924:	dc57      	bgt.n	80089d6 <_dtoa_r+0x82e>
 8008926:	e08e      	b.n	8008a46 <_dtoa_r+0x89e>
 8008928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800892e:	e751      	b.n	80087d4 <_dtoa_r+0x62c>
 8008930:	f109 34ff 	add.w	r4, r9, #4294967295
 8008934:	42a3      	cmp	r3, r4
 8008936:	bfbf      	itttt	lt
 8008938:	1ae2      	sublt	r2, r4, r3
 800893a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800893c:	189b      	addlt	r3, r3, r2
 800893e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008940:	bfae      	itee	ge
 8008942:	1b1c      	subge	r4, r3, r4
 8008944:	4623      	movlt	r3, r4
 8008946:	2400      	movlt	r4, #0
 8008948:	f1b9 0f00 	cmp.w	r9, #0
 800894c:	bfb5      	itete	lt
 800894e:	9a04      	ldrlt	r2, [sp, #16]
 8008950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008954:	eba2 0809 	sublt.w	r8, r2, r9
 8008958:	464a      	movge	r2, r9
 800895a:	bfb8      	it	lt
 800895c:	2200      	movlt	r2, #0
 800895e:	e73c      	b.n	80087da <_dtoa_r+0x632>
 8008960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008964:	9f07      	ldr	r7, [sp, #28]
 8008966:	461c      	mov	r4, r3
 8008968:	e744      	b.n	80087f4 <_dtoa_r+0x64c>
 800896a:	461a      	mov	r2, r3
 800896c:	e770      	b.n	8008850 <_dtoa_r+0x6a8>
 800896e:	9b06      	ldr	r3, [sp, #24]
 8008970:	2b01      	cmp	r3, #1
 8008972:	dc18      	bgt.n	80089a6 <_dtoa_r+0x7fe>
 8008974:	9b02      	ldr	r3, [sp, #8]
 8008976:	b9b3      	cbnz	r3, 80089a6 <_dtoa_r+0x7fe>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800897e:	b9a2      	cbnz	r2, 80089aa <_dtoa_r+0x802>
 8008980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008984:	0d12      	lsrs	r2, r2, #20
 8008986:	0512      	lsls	r2, r2, #20
 8008988:	b18a      	cbz	r2, 80089ae <_dtoa_r+0x806>
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	3301      	adds	r3, #1
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	3301      	adds	r3, #1
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	2301      	movs	r3, #1
 8008998:	9309      	str	r3, [sp, #36]	; 0x24
 800899a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899c:	2b00      	cmp	r3, #0
 800899e:	f47f af70 	bne.w	8008882 <_dtoa_r+0x6da>
 80089a2:	2001      	movs	r0, #1
 80089a4:	e775      	b.n	8008892 <_dtoa_r+0x6ea>
 80089a6:	2300      	movs	r3, #0
 80089a8:	e7f6      	b.n	8008998 <_dtoa_r+0x7f0>
 80089aa:	9b02      	ldr	r3, [sp, #8]
 80089ac:	e7f4      	b.n	8008998 <_dtoa_r+0x7f0>
 80089ae:	9209      	str	r2, [sp, #36]	; 0x24
 80089b0:	e7f3      	b.n	800899a <_dtoa_r+0x7f2>
 80089b2:	d082      	beq.n	80088ba <_dtoa_r+0x712>
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	321c      	adds	r2, #28
 80089b8:	4413      	add	r3, r2
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	9b05      	ldr	r3, [sp, #20]
 80089be:	4490      	add	r8, r2
 80089c0:	4413      	add	r3, r2
 80089c2:	e779      	b.n	80088b8 <_dtoa_r+0x710>
 80089c4:	4602      	mov	r2, r0
 80089c6:	e7f5      	b.n	80089b4 <_dtoa_r+0x80c>
 80089c8:	f1b9 0f00 	cmp.w	r9, #0
 80089cc:	dc36      	bgt.n	8008a3c <_dtoa_r+0x894>
 80089ce:	9b06      	ldr	r3, [sp, #24]
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	dd33      	ble.n	8008a3c <_dtoa_r+0x894>
 80089d4:	46ca      	mov	sl, r9
 80089d6:	f1ba 0f00 	cmp.w	sl, #0
 80089da:	d10d      	bne.n	80089f8 <_dtoa_r+0x850>
 80089dc:	4621      	mov	r1, r4
 80089de:	4653      	mov	r3, sl
 80089e0:	2205      	movs	r2, #5
 80089e2:	4630      	mov	r0, r6
 80089e4:	f000 faae 	bl	8008f44 <__multadd>
 80089e8:	4601      	mov	r1, r0
 80089ea:	4604      	mov	r4, r0
 80089ec:	4628      	mov	r0, r5
 80089ee:	f000 fcc3 	bl	8009378 <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f73f ade4 	bgt.w	80085c0 <_dtoa_r+0x418>
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089fe:	ea6f 0b03 	mvn.w	fp, r3
 8008a02:	f04f 0900 	mov.w	r9, #0
 8008a06:	4621      	mov	r1, r4
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 fa79 	bl	8008f00 <_Bfree>
 8008a0e:	2f00      	cmp	r7, #0
 8008a10:	f43f aea1 	beq.w	8008756 <_dtoa_r+0x5ae>
 8008a14:	f1b9 0f00 	cmp.w	r9, #0
 8008a18:	d005      	beq.n	8008a26 <_dtoa_r+0x87e>
 8008a1a:	45b9      	cmp	r9, r7
 8008a1c:	d003      	beq.n	8008a26 <_dtoa_r+0x87e>
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 fa6d 	bl	8008f00 <_Bfree>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 fa69 	bl	8008f00 <_Bfree>
 8008a2e:	e692      	b.n	8008756 <_dtoa_r+0x5ae>
 8008a30:	2400      	movs	r4, #0
 8008a32:	4627      	mov	r7, r4
 8008a34:	e7e0      	b.n	80089f8 <_dtoa_r+0x850>
 8008a36:	4693      	mov	fp, r2
 8008a38:	4627      	mov	r7, r4
 8008a3a:	e5c1      	b.n	80085c0 <_dtoa_r+0x418>
 8008a3c:	9b07      	ldr	r3, [sp, #28]
 8008a3e:	46ca      	mov	sl, r9
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8100 	beq.w	8008c46 <_dtoa_r+0xa9e>
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	dd05      	ble.n	8008a58 <_dtoa_r+0x8b0>
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4642      	mov	r2, r8
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 fc25 	bl	80092a0 <__lshift>
 8008a56:	4607      	mov	r7, r0
 8008a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d05d      	beq.n	8008b1a <_dtoa_r+0x972>
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 fa0d 	bl	8008e80 <_Balloc>
 8008a66:	4680      	mov	r8, r0
 8008a68:	b928      	cbnz	r0, 8008a76 <_dtoa_r+0x8ce>
 8008a6a:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <_dtoa_r+0xacc>)
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a72:	f7ff bbb1 	b.w	80081d8 <_dtoa_r+0x30>
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	3202      	adds	r2, #2
 8008a7a:	0092      	lsls	r2, r2, #2
 8008a7c:	f107 010c 	add.w	r1, r7, #12
 8008a80:	300c      	adds	r0, #12
 8008a82:	f000 ffa9 	bl	80099d8 <memcpy>
 8008a86:	2201      	movs	r2, #1
 8008a88:	4641      	mov	r1, r8
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f000 fc08 	bl	80092a0 <__lshift>
 8008a90:	9b01      	ldr	r3, [sp, #4]
 8008a92:	3301      	adds	r3, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	4453      	add	r3, sl
 8008a9a:	9308      	str	r3, [sp, #32]
 8008a9c:	9b02      	ldr	r3, [sp, #8]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	46b9      	mov	r9, r7
 8008aa4:	9307      	str	r3, [sp, #28]
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	9b04      	ldr	r3, [sp, #16]
 8008aaa:	4621      	mov	r1, r4
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4628      	mov	r0, r5
 8008ab0:	9302      	str	r3, [sp, #8]
 8008ab2:	f7ff faf1 	bl	8008098 <quorem>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	3330      	adds	r3, #48	; 0x30
 8008aba:	9005      	str	r0, [sp, #20]
 8008abc:	4649      	mov	r1, r9
 8008abe:	4628      	mov	r0, r5
 8008ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac2:	f000 fc59 	bl	8009378 <__mcmp>
 8008ac6:	463a      	mov	r2, r7
 8008ac8:	4682      	mov	sl, r0
 8008aca:	4621      	mov	r1, r4
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 fc6f 	bl	80093b0 <__mdiff>
 8008ad2:	68c2      	ldr	r2, [r0, #12]
 8008ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	bb0a      	cbnz	r2, 8008b1e <_dtoa_r+0x976>
 8008ada:	4601      	mov	r1, r0
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fc4b 	bl	8009378 <__mcmp>
 8008ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	4630      	mov	r0, r6
 8008aea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008aee:	f000 fa07 	bl	8008f00 <_Bfree>
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008afa:	ea43 0102 	orr.w	r1, r3, r2
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	4319      	orrs	r1, r3
 8008b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b04:	d10d      	bne.n	8008b22 <_dtoa_r+0x97a>
 8008b06:	2b39      	cmp	r3, #57	; 0x39
 8008b08:	d029      	beq.n	8008b5e <_dtoa_r+0x9b6>
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	dd01      	ble.n	8008b14 <_dtoa_r+0x96c>
 8008b10:	9b05      	ldr	r3, [sp, #20]
 8008b12:	3331      	adds	r3, #49	; 0x31
 8008b14:	9a02      	ldr	r2, [sp, #8]
 8008b16:	7013      	strb	r3, [r2, #0]
 8008b18:	e775      	b.n	8008a06 <_dtoa_r+0x85e>
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	e7b8      	b.n	8008a90 <_dtoa_r+0x8e8>
 8008b1e:	2201      	movs	r2, #1
 8008b20:	e7e1      	b.n	8008ae6 <_dtoa_r+0x93e>
 8008b22:	f1ba 0f00 	cmp.w	sl, #0
 8008b26:	db06      	blt.n	8008b36 <_dtoa_r+0x98e>
 8008b28:	9906      	ldr	r1, [sp, #24]
 8008b2a:	ea41 0a0a 	orr.w	sl, r1, sl
 8008b2e:	9907      	ldr	r1, [sp, #28]
 8008b30:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008b34:	d120      	bne.n	8008b78 <_dtoa_r+0x9d0>
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	ddec      	ble.n	8008b14 <_dtoa_r+0x96c>
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	4630      	mov	r0, r6
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	f000 fbad 	bl	80092a0 <__lshift>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4605      	mov	r5, r0
 8008b4a:	f000 fc15 	bl	8009378 <__mcmp>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	dc02      	bgt.n	8008b5a <_dtoa_r+0x9b2>
 8008b54:	d1de      	bne.n	8008b14 <_dtoa_r+0x96c>
 8008b56:	07da      	lsls	r2, r3, #31
 8008b58:	d5dc      	bpl.n	8008b14 <_dtoa_r+0x96c>
 8008b5a:	2b39      	cmp	r3, #57	; 0x39
 8008b5c:	d1d8      	bne.n	8008b10 <_dtoa_r+0x968>
 8008b5e:	9a02      	ldr	r2, [sp, #8]
 8008b60:	2339      	movs	r3, #57	; 0x39
 8008b62:	7013      	strb	r3, [r2, #0]
 8008b64:	4643      	mov	r3, r8
 8008b66:	4698      	mov	r8, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008b6e:	2a39      	cmp	r2, #57	; 0x39
 8008b70:	d051      	beq.n	8008c16 <_dtoa_r+0xa6e>
 8008b72:	3201      	adds	r2, #1
 8008b74:	701a      	strb	r2, [r3, #0]
 8008b76:	e746      	b.n	8008a06 <_dtoa_r+0x85e>
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	dd03      	ble.n	8008b84 <_dtoa_r+0x9dc>
 8008b7c:	2b39      	cmp	r3, #57	; 0x39
 8008b7e:	d0ee      	beq.n	8008b5e <_dtoa_r+0x9b6>
 8008b80:	3301      	adds	r3, #1
 8008b82:	e7c7      	b.n	8008b14 <_dtoa_r+0x96c>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	9908      	ldr	r1, [sp, #32]
 8008b88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b8c:	428a      	cmp	r2, r1
 8008b8e:	d02b      	beq.n	8008be8 <_dtoa_r+0xa40>
 8008b90:	4629      	mov	r1, r5
 8008b92:	2300      	movs	r3, #0
 8008b94:	220a      	movs	r2, #10
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 f9d4 	bl	8008f44 <__multadd>
 8008b9c:	45b9      	cmp	r9, r7
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	f04f 0300 	mov.w	r3, #0
 8008ba4:	f04f 020a 	mov.w	r2, #10
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4630      	mov	r0, r6
 8008bac:	d107      	bne.n	8008bbe <_dtoa_r+0xa16>
 8008bae:	f000 f9c9 	bl	8008f44 <__multadd>
 8008bb2:	4681      	mov	r9, r0
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	9b04      	ldr	r3, [sp, #16]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	e774      	b.n	8008aa8 <_dtoa_r+0x900>
 8008bbe:	f000 f9c1 	bl	8008f44 <__multadd>
 8008bc2:	4639      	mov	r1, r7
 8008bc4:	4681      	mov	r9, r0
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	220a      	movs	r2, #10
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 f9ba 	bl	8008f44 <__multadd>
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	e7f0      	b.n	8008bb6 <_dtoa_r+0xa0e>
 8008bd4:	f1ba 0f00 	cmp.w	sl, #0
 8008bd8:	9a01      	ldr	r2, [sp, #4]
 8008bda:	bfcc      	ite	gt
 8008bdc:	46d0      	movgt	r8, sl
 8008bde:	f04f 0801 	movle.w	r8, #1
 8008be2:	4490      	add	r8, r2
 8008be4:	f04f 0900 	mov.w	r9, #0
 8008be8:	4629      	mov	r1, r5
 8008bea:	2201      	movs	r2, #1
 8008bec:	4630      	mov	r0, r6
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	f000 fb56 	bl	80092a0 <__lshift>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	f000 fbbe 	bl	8009378 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	dcb1      	bgt.n	8008b64 <_dtoa_r+0x9bc>
 8008c00:	d102      	bne.n	8008c08 <_dtoa_r+0xa60>
 8008c02:	9b02      	ldr	r3, [sp, #8]
 8008c04:	07db      	lsls	r3, r3, #31
 8008c06:	d4ad      	bmi.n	8008b64 <_dtoa_r+0x9bc>
 8008c08:	4643      	mov	r3, r8
 8008c0a:	4698      	mov	r8, r3
 8008c0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c10:	2a30      	cmp	r2, #48	; 0x30
 8008c12:	d0fa      	beq.n	8008c0a <_dtoa_r+0xa62>
 8008c14:	e6f7      	b.n	8008a06 <_dtoa_r+0x85e>
 8008c16:	9a01      	ldr	r2, [sp, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d1a4      	bne.n	8008b66 <_dtoa_r+0x9be>
 8008c1c:	f10b 0b01 	add.w	fp, fp, #1
 8008c20:	2331      	movs	r3, #49	; 0x31
 8008c22:	e778      	b.n	8008b16 <_dtoa_r+0x96e>
 8008c24:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <_dtoa_r+0xad0>)
 8008c26:	f7ff bb2a 	b.w	800827e <_dtoa_r+0xd6>
 8008c2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f47f ab05 	bne.w	800823c <_dtoa_r+0x94>
 8008c32:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <_dtoa_r+0xad4>)
 8008c34:	f7ff bb23 	b.w	800827e <_dtoa_r+0xd6>
 8008c38:	f1ba 0f00 	cmp.w	sl, #0
 8008c3c:	dc03      	bgt.n	8008c46 <_dtoa_r+0xa9e>
 8008c3e:	9b06      	ldr	r3, [sp, #24]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	f73f aec8 	bgt.w	80089d6 <_dtoa_r+0x82e>
 8008c46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff fa23 	bl	8008098 <quorem>
 8008c52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c56:	f808 3b01 	strb.w	r3, [r8], #1
 8008c5a:	9a01      	ldr	r2, [sp, #4]
 8008c5c:	eba8 0202 	sub.w	r2, r8, r2
 8008c60:	4592      	cmp	sl, r2
 8008c62:	ddb7      	ble.n	8008bd4 <_dtoa_r+0xa2c>
 8008c64:	4629      	mov	r1, r5
 8008c66:	2300      	movs	r3, #0
 8008c68:	220a      	movs	r2, #10
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f96a 	bl	8008f44 <__multadd>
 8008c70:	4605      	mov	r5, r0
 8008c72:	e7ea      	b.n	8008c4a <_dtoa_r+0xaa2>
 8008c74:	0800aa88 	.word	0x0800aa88
 8008c78:	0800a9e8 	.word	0x0800a9e8
 8008c7c:	0800aa0c 	.word	0x0800aa0c

08008c80 <_free_r>:
 8008c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d044      	beq.n	8008d10 <_free_r+0x90>
 8008c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8a:	9001      	str	r0, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c92:	bfb8      	it	lt
 8008c94:	18e4      	addlt	r4, r4, r3
 8008c96:	f000 f8e7 	bl	8008e68 <__malloc_lock>
 8008c9a:	4a1e      	ldr	r2, [pc, #120]	; (8008d14 <_free_r+0x94>)
 8008c9c:	9801      	ldr	r0, [sp, #4]
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	b933      	cbnz	r3, 8008cb0 <_free_r+0x30>
 8008ca2:	6063      	str	r3, [r4, #4]
 8008ca4:	6014      	str	r4, [r2, #0]
 8008ca6:	b003      	add	sp, #12
 8008ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cac:	f000 b8e2 	b.w	8008e74 <__malloc_unlock>
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	d908      	bls.n	8008cc6 <_free_r+0x46>
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1961      	adds	r1, r4, r5
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf01      	itttt	eq
 8008cbc:	6819      	ldreq	r1, [r3, #0]
 8008cbe:	685b      	ldreq	r3, [r3, #4]
 8008cc0:	1949      	addeq	r1, r1, r5
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	e7ed      	b.n	8008ca2 <_free_r+0x22>
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	b10b      	cbz	r3, 8008cd0 <_free_r+0x50>
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	d9fa      	bls.n	8008cc6 <_free_r+0x46>
 8008cd0:	6811      	ldr	r1, [r2, #0]
 8008cd2:	1855      	adds	r5, r2, r1
 8008cd4:	42a5      	cmp	r5, r4
 8008cd6:	d10b      	bne.n	8008cf0 <_free_r+0x70>
 8008cd8:	6824      	ldr	r4, [r4, #0]
 8008cda:	4421      	add	r1, r4
 8008cdc:	1854      	adds	r4, r2, r1
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	d1e0      	bne.n	8008ca6 <_free_r+0x26>
 8008ce4:	681c      	ldr	r4, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	6053      	str	r3, [r2, #4]
 8008cea:	440c      	add	r4, r1
 8008cec:	6014      	str	r4, [r2, #0]
 8008cee:	e7da      	b.n	8008ca6 <_free_r+0x26>
 8008cf0:	d902      	bls.n	8008cf8 <_free_r+0x78>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	6003      	str	r3, [r0, #0]
 8008cf6:	e7d6      	b.n	8008ca6 <_free_r+0x26>
 8008cf8:	6825      	ldr	r5, [r4, #0]
 8008cfa:	1961      	adds	r1, r4, r5
 8008cfc:	428b      	cmp	r3, r1
 8008cfe:	bf04      	itt	eq
 8008d00:	6819      	ldreq	r1, [r3, #0]
 8008d02:	685b      	ldreq	r3, [r3, #4]
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	bf04      	itt	eq
 8008d08:	1949      	addeq	r1, r1, r5
 8008d0a:	6021      	streq	r1, [r4, #0]
 8008d0c:	6054      	str	r4, [r2, #4]
 8008d0e:	e7ca      	b.n	8008ca6 <_free_r+0x26>
 8008d10:	b003      	add	sp, #12
 8008d12:	bd30      	pop	{r4, r5, pc}
 8008d14:	20000610 	.word	0x20000610

08008d18 <malloc>:
 8008d18:	4b02      	ldr	r3, [pc, #8]	; (8008d24 <malloc+0xc>)
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	f000 b823 	b.w	8008d68 <_malloc_r>
 8008d22:	bf00      	nop
 8008d24:	20000070 	.word	0x20000070

08008d28 <sbrk_aligned>:
 8008d28:	b570      	push	{r4, r5, r6, lr}
 8008d2a:	4e0e      	ldr	r6, [pc, #56]	; (8008d64 <sbrk_aligned+0x3c>)
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	6831      	ldr	r1, [r6, #0]
 8008d30:	4605      	mov	r5, r0
 8008d32:	b911      	cbnz	r1, 8008d3a <sbrk_aligned+0x12>
 8008d34:	f000 fe40 	bl	80099b8 <_sbrk_r>
 8008d38:	6030      	str	r0, [r6, #0]
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f000 fe3b 	bl	80099b8 <_sbrk_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	d00a      	beq.n	8008d5c <sbrk_aligned+0x34>
 8008d46:	1cc4      	adds	r4, r0, #3
 8008d48:	f024 0403 	bic.w	r4, r4, #3
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d007      	beq.n	8008d60 <sbrk_aligned+0x38>
 8008d50:	1a21      	subs	r1, r4, r0
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fe30 	bl	80099b8 <_sbrk_r>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d101      	bne.n	8008d60 <sbrk_aligned+0x38>
 8008d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d60:	4620      	mov	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	20000614 	.word	0x20000614

08008d68 <_malloc_r>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	1ccd      	adds	r5, r1, #3
 8008d6e:	f025 0503 	bic.w	r5, r5, #3
 8008d72:	3508      	adds	r5, #8
 8008d74:	2d0c      	cmp	r5, #12
 8008d76:	bf38      	it	cc
 8008d78:	250c      	movcc	r5, #12
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	4607      	mov	r7, r0
 8008d7e:	db01      	blt.n	8008d84 <_malloc_r+0x1c>
 8008d80:	42a9      	cmp	r1, r5
 8008d82:	d905      	bls.n	8008d90 <_malloc_r+0x28>
 8008d84:	230c      	movs	r3, #12
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	2600      	movs	r6, #0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e64 <_malloc_r+0xfc>
 8008d94:	f000 f868 	bl	8008e68 <__malloc_lock>
 8008d98:	f8d8 3000 	ldr.w	r3, [r8]
 8008d9c:	461c      	mov	r4, r3
 8008d9e:	bb5c      	cbnz	r4, 8008df8 <_malloc_r+0x90>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff ffc0 	bl	8008d28 <sbrk_aligned>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	4604      	mov	r4, r0
 8008dac:	d155      	bne.n	8008e5a <_malloc_r+0xf2>
 8008dae:	f8d8 4000 	ldr.w	r4, [r8]
 8008db2:	4626      	mov	r6, r4
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	d145      	bne.n	8008e44 <_malloc_r+0xdc>
 8008db8:	2c00      	cmp	r4, #0
 8008dba:	d048      	beq.n	8008e4e <_malloc_r+0xe6>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	eb04 0903 	add.w	r9, r4, r3
 8008dc6:	f000 fdf7 	bl	80099b8 <_sbrk_r>
 8008dca:	4581      	cmp	r9, r0
 8008dcc:	d13f      	bne.n	8008e4e <_malloc_r+0xe6>
 8008dce:	6821      	ldr	r1, [r4, #0]
 8008dd0:	1a6d      	subs	r5, r5, r1
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ffa7 	bl	8008d28 <sbrk_aligned>
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d037      	beq.n	8008e4e <_malloc_r+0xe6>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	442b      	add	r3, r5
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	f8d8 3000 	ldr.w	r3, [r8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d038      	beq.n	8008e5e <_malloc_r+0xf6>
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	42a2      	cmp	r2, r4
 8008df0:	d12b      	bne.n	8008e4a <_malloc_r+0xe2>
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	e00f      	b.n	8008e18 <_malloc_r+0xb0>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	1b52      	subs	r2, r2, r5
 8008dfc:	d41f      	bmi.n	8008e3e <_malloc_r+0xd6>
 8008dfe:	2a0b      	cmp	r2, #11
 8008e00:	d917      	bls.n	8008e32 <_malloc_r+0xca>
 8008e02:	1961      	adds	r1, r4, r5
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	6025      	str	r5, [r4, #0]
 8008e08:	bf18      	it	ne
 8008e0a:	6059      	strne	r1, [r3, #4]
 8008e0c:	6863      	ldr	r3, [r4, #4]
 8008e0e:	bf08      	it	eq
 8008e10:	f8c8 1000 	streq.w	r1, [r8]
 8008e14:	5162      	str	r2, [r4, r5]
 8008e16:	604b      	str	r3, [r1, #4]
 8008e18:	4638      	mov	r0, r7
 8008e1a:	f104 060b 	add.w	r6, r4, #11
 8008e1e:	f000 f829 	bl	8008e74 <__malloc_unlock>
 8008e22:	f026 0607 	bic.w	r6, r6, #7
 8008e26:	1d23      	adds	r3, r4, #4
 8008e28:	1af2      	subs	r2, r6, r3
 8008e2a:	d0ae      	beq.n	8008d8a <_malloc_r+0x22>
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	50a3      	str	r3, [r4, r2]
 8008e30:	e7ab      	b.n	8008d8a <_malloc_r+0x22>
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	6862      	ldr	r2, [r4, #4]
 8008e36:	d1dd      	bne.n	8008df4 <_malloc_r+0x8c>
 8008e38:	f8c8 2000 	str.w	r2, [r8]
 8008e3c:	e7ec      	b.n	8008e18 <_malloc_r+0xb0>
 8008e3e:	4623      	mov	r3, r4
 8008e40:	6864      	ldr	r4, [r4, #4]
 8008e42:	e7ac      	b.n	8008d9e <_malloc_r+0x36>
 8008e44:	4634      	mov	r4, r6
 8008e46:	6876      	ldr	r6, [r6, #4]
 8008e48:	e7b4      	b.n	8008db4 <_malloc_r+0x4c>
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	e7cc      	b.n	8008de8 <_malloc_r+0x80>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	4638      	mov	r0, r7
 8008e54:	f000 f80e 	bl	8008e74 <__malloc_unlock>
 8008e58:	e797      	b.n	8008d8a <_malloc_r+0x22>
 8008e5a:	6025      	str	r5, [r4, #0]
 8008e5c:	e7dc      	b.n	8008e18 <_malloc_r+0xb0>
 8008e5e:	605b      	str	r3, [r3, #4]
 8008e60:	deff      	udf	#255	; 0xff
 8008e62:	bf00      	nop
 8008e64:	20000610 	.word	0x20000610

08008e68 <__malloc_lock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_lock+0x8>)
 8008e6a:	f7ff b913 	b.w	8008094 <__retarget_lock_acquire_recursive>
 8008e6e:	bf00      	nop
 8008e70:	2000060c 	.word	0x2000060c

08008e74 <__malloc_unlock>:
 8008e74:	4801      	ldr	r0, [pc, #4]	; (8008e7c <__malloc_unlock+0x8>)
 8008e76:	f7ff b90e 	b.w	8008096 <__retarget_lock_release_recursive>
 8008e7a:	bf00      	nop
 8008e7c:	2000060c 	.word	0x2000060c

08008e80 <_Balloc>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	69c6      	ldr	r6, [r0, #28]
 8008e84:	4604      	mov	r4, r0
 8008e86:	460d      	mov	r5, r1
 8008e88:	b976      	cbnz	r6, 8008ea8 <_Balloc+0x28>
 8008e8a:	2010      	movs	r0, #16
 8008e8c:	f7ff ff44 	bl	8008d18 <malloc>
 8008e90:	4602      	mov	r2, r0
 8008e92:	61e0      	str	r0, [r4, #28]
 8008e94:	b920      	cbnz	r0, 8008ea0 <_Balloc+0x20>
 8008e96:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <_Balloc+0x78>)
 8008e98:	4818      	ldr	r0, [pc, #96]	; (8008efc <_Balloc+0x7c>)
 8008e9a:	216b      	movs	r1, #107	; 0x6b
 8008e9c:	f000 fdaa 	bl	80099f4 <__assert_func>
 8008ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ea4:	6006      	str	r6, [r0, #0]
 8008ea6:	60c6      	str	r6, [r0, #12]
 8008ea8:	69e6      	ldr	r6, [r4, #28]
 8008eaa:	68f3      	ldr	r3, [r6, #12]
 8008eac:	b183      	cbz	r3, 8008ed0 <_Balloc+0x50>
 8008eae:	69e3      	ldr	r3, [r4, #28]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008eb6:	b9b8      	cbnz	r0, 8008ee8 <_Balloc+0x68>
 8008eb8:	2101      	movs	r1, #1
 8008eba:	fa01 f605 	lsl.w	r6, r1, r5
 8008ebe:	1d72      	adds	r2, r6, #5
 8008ec0:	0092      	lsls	r2, r2, #2
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 fdb4 	bl	8009a30 <_calloc_r>
 8008ec8:	b160      	cbz	r0, 8008ee4 <_Balloc+0x64>
 8008eca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ece:	e00e      	b.n	8008eee <_Balloc+0x6e>
 8008ed0:	2221      	movs	r2, #33	; 0x21
 8008ed2:	2104      	movs	r1, #4
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fdab 	bl	8009a30 <_calloc_r>
 8008eda:	69e3      	ldr	r3, [r4, #28]
 8008edc:	60f0      	str	r0, [r6, #12]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e4      	bne.n	8008eae <_Balloc+0x2e>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	6802      	ldr	r2, [r0, #0]
 8008eea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ef4:	e7f7      	b.n	8008ee6 <_Balloc+0x66>
 8008ef6:	bf00      	nop
 8008ef8:	0800aa19 	.word	0x0800aa19
 8008efc:	0800aa99 	.word	0x0800aa99

08008f00 <_Bfree>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	69c6      	ldr	r6, [r0, #28]
 8008f04:	4605      	mov	r5, r0
 8008f06:	460c      	mov	r4, r1
 8008f08:	b976      	cbnz	r6, 8008f28 <_Bfree+0x28>
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	f7ff ff04 	bl	8008d18 <malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	61e8      	str	r0, [r5, #28]
 8008f14:	b920      	cbnz	r0, 8008f20 <_Bfree+0x20>
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <_Bfree+0x3c>)
 8008f18:	4809      	ldr	r0, [pc, #36]	; (8008f40 <_Bfree+0x40>)
 8008f1a:	218f      	movs	r1, #143	; 0x8f
 8008f1c:	f000 fd6a 	bl	80099f4 <__assert_func>
 8008f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f24:	6006      	str	r6, [r0, #0]
 8008f26:	60c6      	str	r6, [r0, #12]
 8008f28:	b13c      	cbz	r4, 8008f3a <_Bfree+0x3a>
 8008f2a:	69eb      	ldr	r3, [r5, #28]
 8008f2c:	6862      	ldr	r2, [r4, #4]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f34:	6021      	str	r1, [r4, #0]
 8008f36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	0800aa19 	.word	0x0800aa19
 8008f40:	0800aa99 	.word	0x0800aa99

08008f44 <__multadd>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	690d      	ldr	r5, [r1, #16]
 8008f4a:	4607      	mov	r7, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	461e      	mov	r6, r3
 8008f50:	f101 0c14 	add.w	ip, r1, #20
 8008f54:	2000      	movs	r0, #0
 8008f56:	f8dc 3000 	ldr.w	r3, [ip]
 8008f5a:	b299      	uxth	r1, r3
 8008f5c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f60:	0c1e      	lsrs	r6, r3, #16
 8008f62:	0c0b      	lsrs	r3, r1, #16
 8008f64:	fb02 3306 	mla	r3, r2, r6, r3
 8008f68:	b289      	uxth	r1, r1
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f70:	4285      	cmp	r5, r0
 8008f72:	f84c 1b04 	str.w	r1, [ip], #4
 8008f76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f7a:	dcec      	bgt.n	8008f56 <__multadd+0x12>
 8008f7c:	b30e      	cbz	r6, 8008fc2 <__multadd+0x7e>
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	42ab      	cmp	r3, r5
 8008f82:	dc19      	bgt.n	8008fb8 <__multadd+0x74>
 8008f84:	6861      	ldr	r1, [r4, #4]
 8008f86:	4638      	mov	r0, r7
 8008f88:	3101      	adds	r1, #1
 8008f8a:	f7ff ff79 	bl	8008e80 <_Balloc>
 8008f8e:	4680      	mov	r8, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <__multadd+0x5a>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <__multadd+0x84>)
 8008f96:	480d      	ldr	r0, [pc, #52]	; (8008fcc <__multadd+0x88>)
 8008f98:	21ba      	movs	r1, #186	; 0xba
 8008f9a:	f000 fd2b 	bl	80099f4 <__assert_func>
 8008f9e:	6922      	ldr	r2, [r4, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	f104 010c 	add.w	r1, r4, #12
 8008fa6:	0092      	lsls	r2, r2, #2
 8008fa8:	300c      	adds	r0, #12
 8008faa:	f000 fd15 	bl	80099d8 <memcpy>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	f7ff ffa5 	bl	8008f00 <_Bfree>
 8008fb6:	4644      	mov	r4, r8
 8008fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	615e      	str	r6, [r3, #20]
 8008fc0:	6125      	str	r5, [r4, #16]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	0800aa88 	.word	0x0800aa88
 8008fcc:	0800aa99 	.word	0x0800aa99

08008fd0 <__hi0bits>:
 8008fd0:	0c03      	lsrs	r3, r0, #16
 8008fd2:	041b      	lsls	r3, r3, #16
 8008fd4:	b9d3      	cbnz	r3, 800900c <__hi0bits+0x3c>
 8008fd6:	0400      	lsls	r0, r0, #16
 8008fd8:	2310      	movs	r3, #16
 8008fda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fde:	bf04      	itt	eq
 8008fe0:	0200      	lsleq	r0, r0, #8
 8008fe2:	3308      	addeq	r3, #8
 8008fe4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fe8:	bf04      	itt	eq
 8008fea:	0100      	lsleq	r0, r0, #4
 8008fec:	3304      	addeq	r3, #4
 8008fee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ff2:	bf04      	itt	eq
 8008ff4:	0080      	lsleq	r0, r0, #2
 8008ff6:	3302      	addeq	r3, #2
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	db05      	blt.n	8009008 <__hi0bits+0x38>
 8008ffc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009000:	f103 0301 	add.w	r3, r3, #1
 8009004:	bf08      	it	eq
 8009006:	2320      	moveq	r3, #32
 8009008:	4618      	mov	r0, r3
 800900a:	4770      	bx	lr
 800900c:	2300      	movs	r3, #0
 800900e:	e7e4      	b.n	8008fda <__hi0bits+0xa>

08009010 <__lo0bits>:
 8009010:	6803      	ldr	r3, [r0, #0]
 8009012:	f013 0207 	ands.w	r2, r3, #7
 8009016:	d00c      	beq.n	8009032 <__lo0bits+0x22>
 8009018:	07d9      	lsls	r1, r3, #31
 800901a:	d422      	bmi.n	8009062 <__lo0bits+0x52>
 800901c:	079a      	lsls	r2, r3, #30
 800901e:	bf49      	itett	mi
 8009020:	085b      	lsrmi	r3, r3, #1
 8009022:	089b      	lsrpl	r3, r3, #2
 8009024:	6003      	strmi	r3, [r0, #0]
 8009026:	2201      	movmi	r2, #1
 8009028:	bf5c      	itt	pl
 800902a:	6003      	strpl	r3, [r0, #0]
 800902c:	2202      	movpl	r2, #2
 800902e:	4610      	mov	r0, r2
 8009030:	4770      	bx	lr
 8009032:	b299      	uxth	r1, r3
 8009034:	b909      	cbnz	r1, 800903a <__lo0bits+0x2a>
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	2210      	movs	r2, #16
 800903a:	b2d9      	uxtb	r1, r3
 800903c:	b909      	cbnz	r1, 8009042 <__lo0bits+0x32>
 800903e:	3208      	adds	r2, #8
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	0719      	lsls	r1, r3, #28
 8009044:	bf04      	itt	eq
 8009046:	091b      	lsreq	r3, r3, #4
 8009048:	3204      	addeq	r2, #4
 800904a:	0799      	lsls	r1, r3, #30
 800904c:	bf04      	itt	eq
 800904e:	089b      	lsreq	r3, r3, #2
 8009050:	3202      	addeq	r2, #2
 8009052:	07d9      	lsls	r1, r3, #31
 8009054:	d403      	bmi.n	800905e <__lo0bits+0x4e>
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	f102 0201 	add.w	r2, r2, #1
 800905c:	d003      	beq.n	8009066 <__lo0bits+0x56>
 800905e:	6003      	str	r3, [r0, #0]
 8009060:	e7e5      	b.n	800902e <__lo0bits+0x1e>
 8009062:	2200      	movs	r2, #0
 8009064:	e7e3      	b.n	800902e <__lo0bits+0x1e>
 8009066:	2220      	movs	r2, #32
 8009068:	e7e1      	b.n	800902e <__lo0bits+0x1e>
	...

0800906c <__i2b>:
 800906c:	b510      	push	{r4, lr}
 800906e:	460c      	mov	r4, r1
 8009070:	2101      	movs	r1, #1
 8009072:	f7ff ff05 	bl	8008e80 <_Balloc>
 8009076:	4602      	mov	r2, r0
 8009078:	b928      	cbnz	r0, 8009086 <__i2b+0x1a>
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <__i2b+0x24>)
 800907c:	4805      	ldr	r0, [pc, #20]	; (8009094 <__i2b+0x28>)
 800907e:	f240 1145 	movw	r1, #325	; 0x145
 8009082:	f000 fcb7 	bl	80099f4 <__assert_func>
 8009086:	2301      	movs	r3, #1
 8009088:	6144      	str	r4, [r0, #20]
 800908a:	6103      	str	r3, [r0, #16]
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	0800aa88 	.word	0x0800aa88
 8009094:	0800aa99 	.word	0x0800aa99

08009098 <__multiply>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	4691      	mov	r9, r2
 800909e:	690a      	ldr	r2, [r1, #16]
 80090a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	bfb8      	it	lt
 80090a8:	460b      	movlt	r3, r1
 80090aa:	460c      	mov	r4, r1
 80090ac:	bfbc      	itt	lt
 80090ae:	464c      	movlt	r4, r9
 80090b0:	4699      	movlt	r9, r3
 80090b2:	6927      	ldr	r7, [r4, #16]
 80090b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090b8:	68a3      	ldr	r3, [r4, #8]
 80090ba:	6861      	ldr	r1, [r4, #4]
 80090bc:	eb07 060a 	add.w	r6, r7, sl
 80090c0:	42b3      	cmp	r3, r6
 80090c2:	b085      	sub	sp, #20
 80090c4:	bfb8      	it	lt
 80090c6:	3101      	addlt	r1, #1
 80090c8:	f7ff feda 	bl	8008e80 <_Balloc>
 80090cc:	b930      	cbnz	r0, 80090dc <__multiply+0x44>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b44      	ldr	r3, [pc, #272]	; (80091e4 <__multiply+0x14c>)
 80090d2:	4845      	ldr	r0, [pc, #276]	; (80091e8 <__multiply+0x150>)
 80090d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090d8:	f000 fc8c 	bl	80099f4 <__assert_func>
 80090dc:	f100 0514 	add.w	r5, r0, #20
 80090e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090e4:	462b      	mov	r3, r5
 80090e6:	2200      	movs	r2, #0
 80090e8:	4543      	cmp	r3, r8
 80090ea:	d321      	bcc.n	8009130 <__multiply+0x98>
 80090ec:	f104 0314 	add.w	r3, r4, #20
 80090f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090f4:	f109 0314 	add.w	r3, r9, #20
 80090f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090fc:	9202      	str	r2, [sp, #8]
 80090fe:	1b3a      	subs	r2, r7, r4
 8009100:	3a15      	subs	r2, #21
 8009102:	f022 0203 	bic.w	r2, r2, #3
 8009106:	3204      	adds	r2, #4
 8009108:	f104 0115 	add.w	r1, r4, #21
 800910c:	428f      	cmp	r7, r1
 800910e:	bf38      	it	cc
 8009110:	2204      	movcc	r2, #4
 8009112:	9201      	str	r2, [sp, #4]
 8009114:	9a02      	ldr	r2, [sp, #8]
 8009116:	9303      	str	r3, [sp, #12]
 8009118:	429a      	cmp	r2, r3
 800911a:	d80c      	bhi.n	8009136 <__multiply+0x9e>
 800911c:	2e00      	cmp	r6, #0
 800911e:	dd03      	ble.n	8009128 <__multiply+0x90>
 8009120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009124:	2b00      	cmp	r3, #0
 8009126:	d05b      	beq.n	80091e0 <__multiply+0x148>
 8009128:	6106      	str	r6, [r0, #16]
 800912a:	b005      	add	sp, #20
 800912c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009130:	f843 2b04 	str.w	r2, [r3], #4
 8009134:	e7d8      	b.n	80090e8 <__multiply+0x50>
 8009136:	f8b3 a000 	ldrh.w	sl, [r3]
 800913a:	f1ba 0f00 	cmp.w	sl, #0
 800913e:	d024      	beq.n	800918a <__multiply+0xf2>
 8009140:	f104 0e14 	add.w	lr, r4, #20
 8009144:	46a9      	mov	r9, r5
 8009146:	f04f 0c00 	mov.w	ip, #0
 800914a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800914e:	f8d9 1000 	ldr.w	r1, [r9]
 8009152:	fa1f fb82 	uxth.w	fp, r2
 8009156:	b289      	uxth	r1, r1
 8009158:	fb0a 110b 	mla	r1, sl, fp, r1
 800915c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009160:	f8d9 2000 	ldr.w	r2, [r9]
 8009164:	4461      	add	r1, ip
 8009166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800916a:	fb0a c20b 	mla	r2, sl, fp, ip
 800916e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009172:	b289      	uxth	r1, r1
 8009174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009178:	4577      	cmp	r7, lr
 800917a:	f849 1b04 	str.w	r1, [r9], #4
 800917e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009182:	d8e2      	bhi.n	800914a <__multiply+0xb2>
 8009184:	9a01      	ldr	r2, [sp, #4]
 8009186:	f845 c002 	str.w	ip, [r5, r2]
 800918a:	9a03      	ldr	r2, [sp, #12]
 800918c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009190:	3304      	adds	r3, #4
 8009192:	f1b9 0f00 	cmp.w	r9, #0
 8009196:	d021      	beq.n	80091dc <__multiply+0x144>
 8009198:	6829      	ldr	r1, [r5, #0]
 800919a:	f104 0c14 	add.w	ip, r4, #20
 800919e:	46ae      	mov	lr, r5
 80091a0:	f04f 0a00 	mov.w	sl, #0
 80091a4:	f8bc b000 	ldrh.w	fp, [ip]
 80091a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80091ac:	fb09 220b 	mla	r2, r9, fp, r2
 80091b0:	4452      	add	r2, sl
 80091b2:	b289      	uxth	r1, r1
 80091b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091b8:	f84e 1b04 	str.w	r1, [lr], #4
 80091bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80091c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091c4:	f8be 1000 	ldrh.w	r1, [lr]
 80091c8:	fb09 110a 	mla	r1, r9, sl, r1
 80091cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80091d0:	4567      	cmp	r7, ip
 80091d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091d6:	d8e5      	bhi.n	80091a4 <__multiply+0x10c>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	50a9      	str	r1, [r5, r2]
 80091dc:	3504      	adds	r5, #4
 80091de:	e799      	b.n	8009114 <__multiply+0x7c>
 80091e0:	3e01      	subs	r6, #1
 80091e2:	e79b      	b.n	800911c <__multiply+0x84>
 80091e4:	0800aa88 	.word	0x0800aa88
 80091e8:	0800aa99 	.word	0x0800aa99

080091ec <__pow5mult>:
 80091ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	4615      	mov	r5, r2
 80091f2:	f012 0203 	ands.w	r2, r2, #3
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	d007      	beq.n	800920c <__pow5mult+0x20>
 80091fc:	4c25      	ldr	r4, [pc, #148]	; (8009294 <__pow5mult+0xa8>)
 80091fe:	3a01      	subs	r2, #1
 8009200:	2300      	movs	r3, #0
 8009202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009206:	f7ff fe9d 	bl	8008f44 <__multadd>
 800920a:	4607      	mov	r7, r0
 800920c:	10ad      	asrs	r5, r5, #2
 800920e:	d03d      	beq.n	800928c <__pow5mult+0xa0>
 8009210:	69f4      	ldr	r4, [r6, #28]
 8009212:	b97c      	cbnz	r4, 8009234 <__pow5mult+0x48>
 8009214:	2010      	movs	r0, #16
 8009216:	f7ff fd7f 	bl	8008d18 <malloc>
 800921a:	4602      	mov	r2, r0
 800921c:	61f0      	str	r0, [r6, #28]
 800921e:	b928      	cbnz	r0, 800922c <__pow5mult+0x40>
 8009220:	4b1d      	ldr	r3, [pc, #116]	; (8009298 <__pow5mult+0xac>)
 8009222:	481e      	ldr	r0, [pc, #120]	; (800929c <__pow5mult+0xb0>)
 8009224:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009228:	f000 fbe4 	bl	80099f4 <__assert_func>
 800922c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009230:	6004      	str	r4, [r0, #0]
 8009232:	60c4      	str	r4, [r0, #12]
 8009234:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800923c:	b94c      	cbnz	r4, 8009252 <__pow5mult+0x66>
 800923e:	f240 2171 	movw	r1, #625	; 0x271
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ff12 	bl	800906c <__i2b>
 8009248:	2300      	movs	r3, #0
 800924a:	f8c8 0008 	str.w	r0, [r8, #8]
 800924e:	4604      	mov	r4, r0
 8009250:	6003      	str	r3, [r0, #0]
 8009252:	f04f 0900 	mov.w	r9, #0
 8009256:	07eb      	lsls	r3, r5, #31
 8009258:	d50a      	bpl.n	8009270 <__pow5mult+0x84>
 800925a:	4639      	mov	r1, r7
 800925c:	4622      	mov	r2, r4
 800925e:	4630      	mov	r0, r6
 8009260:	f7ff ff1a 	bl	8009098 <__multiply>
 8009264:	4639      	mov	r1, r7
 8009266:	4680      	mov	r8, r0
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff fe49 	bl	8008f00 <_Bfree>
 800926e:	4647      	mov	r7, r8
 8009270:	106d      	asrs	r5, r5, #1
 8009272:	d00b      	beq.n	800928c <__pow5mult+0xa0>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	b938      	cbnz	r0, 8009288 <__pow5mult+0x9c>
 8009278:	4622      	mov	r2, r4
 800927a:	4621      	mov	r1, r4
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff ff0b 	bl	8009098 <__multiply>
 8009282:	6020      	str	r0, [r4, #0]
 8009284:	f8c0 9000 	str.w	r9, [r0]
 8009288:	4604      	mov	r4, r0
 800928a:	e7e4      	b.n	8009256 <__pow5mult+0x6a>
 800928c:	4638      	mov	r0, r7
 800928e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009292:	bf00      	nop
 8009294:	0800abe8 	.word	0x0800abe8
 8009298:	0800aa19 	.word	0x0800aa19
 800929c:	0800aa99 	.word	0x0800aa99

080092a0 <__lshift>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	6849      	ldr	r1, [r1, #4]
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	4607      	mov	r7, r0
 80092b2:	4691      	mov	r9, r2
 80092b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092b8:	f108 0601 	add.w	r6, r8, #1
 80092bc:	42b3      	cmp	r3, r6
 80092be:	db0b      	blt.n	80092d8 <__lshift+0x38>
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff fddd 	bl	8008e80 <_Balloc>
 80092c6:	4605      	mov	r5, r0
 80092c8:	b948      	cbnz	r0, 80092de <__lshift+0x3e>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b28      	ldr	r3, [pc, #160]	; (8009370 <__lshift+0xd0>)
 80092ce:	4829      	ldr	r0, [pc, #164]	; (8009374 <__lshift+0xd4>)
 80092d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092d4:	f000 fb8e 	bl	80099f4 <__assert_func>
 80092d8:	3101      	adds	r1, #1
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	e7ee      	b.n	80092bc <__lshift+0x1c>
 80092de:	2300      	movs	r3, #0
 80092e0:	f100 0114 	add.w	r1, r0, #20
 80092e4:	f100 0210 	add.w	r2, r0, #16
 80092e8:	4618      	mov	r0, r3
 80092ea:	4553      	cmp	r3, sl
 80092ec:	db33      	blt.n	8009356 <__lshift+0xb6>
 80092ee:	6920      	ldr	r0, [r4, #16]
 80092f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092f4:	f104 0314 	add.w	r3, r4, #20
 80092f8:	f019 091f 	ands.w	r9, r9, #31
 80092fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009300:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009304:	d02b      	beq.n	800935e <__lshift+0xbe>
 8009306:	f1c9 0e20 	rsb	lr, r9, #32
 800930a:	468a      	mov	sl, r1
 800930c:	2200      	movs	r2, #0
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	fa00 f009 	lsl.w	r0, r0, r9
 8009314:	4310      	orrs	r0, r2
 8009316:	f84a 0b04 	str.w	r0, [sl], #4
 800931a:	f853 2b04 	ldr.w	r2, [r3], #4
 800931e:	459c      	cmp	ip, r3
 8009320:	fa22 f20e 	lsr.w	r2, r2, lr
 8009324:	d8f3      	bhi.n	800930e <__lshift+0x6e>
 8009326:	ebac 0304 	sub.w	r3, ip, r4
 800932a:	3b15      	subs	r3, #21
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	3304      	adds	r3, #4
 8009332:	f104 0015 	add.w	r0, r4, #21
 8009336:	4584      	cmp	ip, r0
 8009338:	bf38      	it	cc
 800933a:	2304      	movcc	r3, #4
 800933c:	50ca      	str	r2, [r1, r3]
 800933e:	b10a      	cbz	r2, 8009344 <__lshift+0xa4>
 8009340:	f108 0602 	add.w	r6, r8, #2
 8009344:	3e01      	subs	r6, #1
 8009346:	4638      	mov	r0, r7
 8009348:	612e      	str	r6, [r5, #16]
 800934a:	4621      	mov	r1, r4
 800934c:	f7ff fdd8 	bl	8008f00 <_Bfree>
 8009350:	4628      	mov	r0, r5
 8009352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009356:	f842 0f04 	str.w	r0, [r2, #4]!
 800935a:	3301      	adds	r3, #1
 800935c:	e7c5      	b.n	80092ea <__lshift+0x4a>
 800935e:	3904      	subs	r1, #4
 8009360:	f853 2b04 	ldr.w	r2, [r3], #4
 8009364:	f841 2f04 	str.w	r2, [r1, #4]!
 8009368:	459c      	cmp	ip, r3
 800936a:	d8f9      	bhi.n	8009360 <__lshift+0xc0>
 800936c:	e7ea      	b.n	8009344 <__lshift+0xa4>
 800936e:	bf00      	nop
 8009370:	0800aa88 	.word	0x0800aa88
 8009374:	0800aa99 	.word	0x0800aa99

08009378 <__mcmp>:
 8009378:	b530      	push	{r4, r5, lr}
 800937a:	6902      	ldr	r2, [r0, #16]
 800937c:	690c      	ldr	r4, [r1, #16]
 800937e:	1b12      	subs	r2, r2, r4
 8009380:	d10e      	bne.n	80093a0 <__mcmp+0x28>
 8009382:	f100 0314 	add.w	r3, r0, #20
 8009386:	3114      	adds	r1, #20
 8009388:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800938c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009390:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009394:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009398:	42a5      	cmp	r5, r4
 800939a:	d003      	beq.n	80093a4 <__mcmp+0x2c>
 800939c:	d305      	bcc.n	80093aa <__mcmp+0x32>
 800939e:	2201      	movs	r2, #1
 80093a0:	4610      	mov	r0, r2
 80093a2:	bd30      	pop	{r4, r5, pc}
 80093a4:	4283      	cmp	r3, r0
 80093a6:	d3f3      	bcc.n	8009390 <__mcmp+0x18>
 80093a8:	e7fa      	b.n	80093a0 <__mcmp+0x28>
 80093aa:	f04f 32ff 	mov.w	r2, #4294967295
 80093ae:	e7f7      	b.n	80093a0 <__mcmp+0x28>

080093b0 <__mdiff>:
 80093b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	4606      	mov	r6, r0
 80093b8:	4611      	mov	r1, r2
 80093ba:	4620      	mov	r0, r4
 80093bc:	4690      	mov	r8, r2
 80093be:	f7ff ffdb 	bl	8009378 <__mcmp>
 80093c2:	1e05      	subs	r5, r0, #0
 80093c4:	d110      	bne.n	80093e8 <__mdiff+0x38>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff fd59 	bl	8008e80 <_Balloc>
 80093ce:	b930      	cbnz	r0, 80093de <__mdiff+0x2e>
 80093d0:	4b3a      	ldr	r3, [pc, #232]	; (80094bc <__mdiff+0x10c>)
 80093d2:	4602      	mov	r2, r0
 80093d4:	f240 2137 	movw	r1, #567	; 0x237
 80093d8:	4839      	ldr	r0, [pc, #228]	; (80094c0 <__mdiff+0x110>)
 80093da:	f000 fb0b 	bl	80099f4 <__assert_func>
 80093de:	2301      	movs	r3, #1
 80093e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	bfa4      	itt	ge
 80093ea:	4643      	movge	r3, r8
 80093ec:	46a0      	movge	r8, r4
 80093ee:	4630      	mov	r0, r6
 80093f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093f4:	bfa6      	itte	ge
 80093f6:	461c      	movge	r4, r3
 80093f8:	2500      	movge	r5, #0
 80093fa:	2501      	movlt	r5, #1
 80093fc:	f7ff fd40 	bl	8008e80 <_Balloc>
 8009400:	b920      	cbnz	r0, 800940c <__mdiff+0x5c>
 8009402:	4b2e      	ldr	r3, [pc, #184]	; (80094bc <__mdiff+0x10c>)
 8009404:	4602      	mov	r2, r0
 8009406:	f240 2145 	movw	r1, #581	; 0x245
 800940a:	e7e5      	b.n	80093d8 <__mdiff+0x28>
 800940c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009410:	6926      	ldr	r6, [r4, #16]
 8009412:	60c5      	str	r5, [r0, #12]
 8009414:	f104 0914 	add.w	r9, r4, #20
 8009418:	f108 0514 	add.w	r5, r8, #20
 800941c:	f100 0e14 	add.w	lr, r0, #20
 8009420:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009424:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009428:	f108 0210 	add.w	r2, r8, #16
 800942c:	46f2      	mov	sl, lr
 800942e:	2100      	movs	r1, #0
 8009430:	f859 3b04 	ldr.w	r3, [r9], #4
 8009434:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009438:	fa11 f88b 	uxtah	r8, r1, fp
 800943c:	b299      	uxth	r1, r3
 800943e:	0c1b      	lsrs	r3, r3, #16
 8009440:	eba8 0801 	sub.w	r8, r8, r1
 8009444:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009448:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800944c:	fa1f f888 	uxth.w	r8, r8
 8009450:	1419      	asrs	r1, r3, #16
 8009452:	454e      	cmp	r6, r9
 8009454:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009458:	f84a 3b04 	str.w	r3, [sl], #4
 800945c:	d8e8      	bhi.n	8009430 <__mdiff+0x80>
 800945e:	1b33      	subs	r3, r6, r4
 8009460:	3b15      	subs	r3, #21
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	3304      	adds	r3, #4
 8009468:	3415      	adds	r4, #21
 800946a:	42a6      	cmp	r6, r4
 800946c:	bf38      	it	cc
 800946e:	2304      	movcc	r3, #4
 8009470:	441d      	add	r5, r3
 8009472:	4473      	add	r3, lr
 8009474:	469e      	mov	lr, r3
 8009476:	462e      	mov	r6, r5
 8009478:	4566      	cmp	r6, ip
 800947a:	d30e      	bcc.n	800949a <__mdiff+0xea>
 800947c:	f10c 0203 	add.w	r2, ip, #3
 8009480:	1b52      	subs	r2, r2, r5
 8009482:	f022 0203 	bic.w	r2, r2, #3
 8009486:	3d03      	subs	r5, #3
 8009488:	45ac      	cmp	ip, r5
 800948a:	bf38      	it	cc
 800948c:	2200      	movcc	r2, #0
 800948e:	4413      	add	r3, r2
 8009490:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009494:	b17a      	cbz	r2, 80094b6 <__mdiff+0x106>
 8009496:	6107      	str	r7, [r0, #16]
 8009498:	e7a4      	b.n	80093e4 <__mdiff+0x34>
 800949a:	f856 8b04 	ldr.w	r8, [r6], #4
 800949e:	fa11 f288 	uxtah	r2, r1, r8
 80094a2:	1414      	asrs	r4, r2, #16
 80094a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80094a8:	b292      	uxth	r2, r2
 80094aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094ae:	f84e 2b04 	str.w	r2, [lr], #4
 80094b2:	1421      	asrs	r1, r4, #16
 80094b4:	e7e0      	b.n	8009478 <__mdiff+0xc8>
 80094b6:	3f01      	subs	r7, #1
 80094b8:	e7ea      	b.n	8009490 <__mdiff+0xe0>
 80094ba:	bf00      	nop
 80094bc:	0800aa88 	.word	0x0800aa88
 80094c0:	0800aa99 	.word	0x0800aa99

080094c4 <__d2b>:
 80094c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	460f      	mov	r7, r1
 80094ca:	2101      	movs	r1, #1
 80094cc:	ec59 8b10 	vmov	r8, r9, d0
 80094d0:	4616      	mov	r6, r2
 80094d2:	f7ff fcd5 	bl	8008e80 <_Balloc>
 80094d6:	4604      	mov	r4, r0
 80094d8:	b930      	cbnz	r0, 80094e8 <__d2b+0x24>
 80094da:	4602      	mov	r2, r0
 80094dc:	4b24      	ldr	r3, [pc, #144]	; (8009570 <__d2b+0xac>)
 80094de:	4825      	ldr	r0, [pc, #148]	; (8009574 <__d2b+0xb0>)
 80094e0:	f240 310f 	movw	r1, #783	; 0x30f
 80094e4:	f000 fa86 	bl	80099f4 <__assert_func>
 80094e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094f0:	bb2d      	cbnz	r5, 800953e <__d2b+0x7a>
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	f1b8 0300 	subs.w	r3, r8, #0
 80094f8:	d026      	beq.n	8009548 <__d2b+0x84>
 80094fa:	4668      	mov	r0, sp
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f7ff fd87 	bl	8009010 <__lo0bits>
 8009502:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009506:	b1e8      	cbz	r0, 8009544 <__d2b+0x80>
 8009508:	f1c0 0320 	rsb	r3, r0, #32
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	430b      	orrs	r3, r1
 8009512:	40c2      	lsrs	r2, r0
 8009514:	6163      	str	r3, [r4, #20]
 8009516:	9201      	str	r2, [sp, #4]
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	61a3      	str	r3, [r4, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf14      	ite	ne
 8009520:	2202      	movne	r2, #2
 8009522:	2201      	moveq	r2, #1
 8009524:	6122      	str	r2, [r4, #16]
 8009526:	b1bd      	cbz	r5, 8009558 <__d2b+0x94>
 8009528:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800952c:	4405      	add	r5, r0
 800952e:	603d      	str	r5, [r7, #0]
 8009530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4620      	mov	r0, r4
 8009538:	b003      	add	sp, #12
 800953a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800953e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009542:	e7d6      	b.n	80094f2 <__d2b+0x2e>
 8009544:	6161      	str	r1, [r4, #20]
 8009546:	e7e7      	b.n	8009518 <__d2b+0x54>
 8009548:	a801      	add	r0, sp, #4
 800954a:	f7ff fd61 	bl	8009010 <__lo0bits>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	6163      	str	r3, [r4, #20]
 8009552:	3020      	adds	r0, #32
 8009554:	2201      	movs	r2, #1
 8009556:	e7e5      	b.n	8009524 <__d2b+0x60>
 8009558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800955c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009560:	6038      	str	r0, [r7, #0]
 8009562:	6918      	ldr	r0, [r3, #16]
 8009564:	f7ff fd34 	bl	8008fd0 <__hi0bits>
 8009568:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800956c:	e7e2      	b.n	8009534 <__d2b+0x70>
 800956e:	bf00      	nop
 8009570:	0800aa88 	.word	0x0800aa88
 8009574:	0800aa99 	.word	0x0800aa99

08009578 <__ssputs_r>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	688e      	ldr	r6, [r1, #8]
 800957e:	461f      	mov	r7, r3
 8009580:	42be      	cmp	r6, r7
 8009582:	680b      	ldr	r3, [r1, #0]
 8009584:	4682      	mov	sl, r0
 8009586:	460c      	mov	r4, r1
 8009588:	4690      	mov	r8, r2
 800958a:	d82c      	bhi.n	80095e6 <__ssputs_r+0x6e>
 800958c:	898a      	ldrh	r2, [r1, #12]
 800958e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009592:	d026      	beq.n	80095e2 <__ssputs_r+0x6a>
 8009594:	6965      	ldr	r5, [r4, #20]
 8009596:	6909      	ldr	r1, [r1, #16]
 8009598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800959c:	eba3 0901 	sub.w	r9, r3, r1
 80095a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095a4:	1c7b      	adds	r3, r7, #1
 80095a6:	444b      	add	r3, r9
 80095a8:	106d      	asrs	r5, r5, #1
 80095aa:	429d      	cmp	r5, r3
 80095ac:	bf38      	it	cc
 80095ae:	461d      	movcc	r5, r3
 80095b0:	0553      	lsls	r3, r2, #21
 80095b2:	d527      	bpl.n	8009604 <__ssputs_r+0x8c>
 80095b4:	4629      	mov	r1, r5
 80095b6:	f7ff fbd7 	bl	8008d68 <_malloc_r>
 80095ba:	4606      	mov	r6, r0
 80095bc:	b360      	cbz	r0, 8009618 <__ssputs_r+0xa0>
 80095be:	6921      	ldr	r1, [r4, #16]
 80095c0:	464a      	mov	r2, r9
 80095c2:	f000 fa09 	bl	80099d8 <memcpy>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	6126      	str	r6, [r4, #16]
 80095d4:	6165      	str	r5, [r4, #20]
 80095d6:	444e      	add	r6, r9
 80095d8:	eba5 0509 	sub.w	r5, r5, r9
 80095dc:	6026      	str	r6, [r4, #0]
 80095de:	60a5      	str	r5, [r4, #8]
 80095e0:	463e      	mov	r6, r7
 80095e2:	42be      	cmp	r6, r7
 80095e4:	d900      	bls.n	80095e8 <__ssputs_r+0x70>
 80095e6:	463e      	mov	r6, r7
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	4632      	mov	r2, r6
 80095ec:	4641      	mov	r1, r8
 80095ee:	f000 f9c9 	bl	8009984 <memmove>
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	1b9b      	subs	r3, r3, r6
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	4433      	add	r3, r6
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	2000      	movs	r0, #0
 8009600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009604:	462a      	mov	r2, r5
 8009606:	f000 fa3b 	bl	8009a80 <_realloc_r>
 800960a:	4606      	mov	r6, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d1e0      	bne.n	80095d2 <__ssputs_r+0x5a>
 8009610:	6921      	ldr	r1, [r4, #16]
 8009612:	4650      	mov	r0, sl
 8009614:	f7ff fb34 	bl	8008c80 <_free_r>
 8009618:	230c      	movs	r3, #12
 800961a:	f8ca 3000 	str.w	r3, [sl]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e7e9      	b.n	8009600 <__ssputs_r+0x88>

0800962c <_svfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4698      	mov	r8, r3
 8009632:	898b      	ldrh	r3, [r1, #12]
 8009634:	061b      	lsls	r3, r3, #24
 8009636:	b09d      	sub	sp, #116	; 0x74
 8009638:	4607      	mov	r7, r0
 800963a:	460d      	mov	r5, r1
 800963c:	4614      	mov	r4, r2
 800963e:	d50e      	bpl.n	800965e <_svfiprintf_r+0x32>
 8009640:	690b      	ldr	r3, [r1, #16]
 8009642:	b963      	cbnz	r3, 800965e <_svfiprintf_r+0x32>
 8009644:	2140      	movs	r1, #64	; 0x40
 8009646:	f7ff fb8f 	bl	8008d68 <_malloc_r>
 800964a:	6028      	str	r0, [r5, #0]
 800964c:	6128      	str	r0, [r5, #16]
 800964e:	b920      	cbnz	r0, 800965a <_svfiprintf_r+0x2e>
 8009650:	230c      	movs	r3, #12
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e0d0      	b.n	80097fc <_svfiprintf_r+0x1d0>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	616b      	str	r3, [r5, #20]
 800965e:	2300      	movs	r3, #0
 8009660:	9309      	str	r3, [sp, #36]	; 0x24
 8009662:	2320      	movs	r3, #32
 8009664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009668:	f8cd 800c 	str.w	r8, [sp, #12]
 800966c:	2330      	movs	r3, #48	; 0x30
 800966e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009814 <_svfiprintf_r+0x1e8>
 8009672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009676:	f04f 0901 	mov.w	r9, #1
 800967a:	4623      	mov	r3, r4
 800967c:	469a      	mov	sl, r3
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	b10a      	cbz	r2, 8009688 <_svfiprintf_r+0x5c>
 8009684:	2a25      	cmp	r2, #37	; 0x25
 8009686:	d1f9      	bne.n	800967c <_svfiprintf_r+0x50>
 8009688:	ebba 0b04 	subs.w	fp, sl, r4
 800968c:	d00b      	beq.n	80096a6 <_svfiprintf_r+0x7a>
 800968e:	465b      	mov	r3, fp
 8009690:	4622      	mov	r2, r4
 8009692:	4629      	mov	r1, r5
 8009694:	4638      	mov	r0, r7
 8009696:	f7ff ff6f 	bl	8009578 <__ssputs_r>
 800969a:	3001      	adds	r0, #1
 800969c:	f000 80a9 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a2:	445a      	add	r2, fp
 80096a4:	9209      	str	r2, [sp, #36]	; 0x24
 80096a6:	f89a 3000 	ldrb.w	r3, [sl]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a1 	beq.w	80097f2 <_svfiprintf_r+0x1c6>
 80096b0:	2300      	movs	r3, #0
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ba:	f10a 0a01 	add.w	sl, sl, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	9307      	str	r3, [sp, #28]
 80096c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c6:	931a      	str	r3, [sp, #104]	; 0x68
 80096c8:	4654      	mov	r4, sl
 80096ca:	2205      	movs	r2, #5
 80096cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d0:	4850      	ldr	r0, [pc, #320]	; (8009814 <_svfiprintf_r+0x1e8>)
 80096d2:	f7f6 fdb5 	bl	8000240 <memchr>
 80096d6:	9a04      	ldr	r2, [sp, #16]
 80096d8:	b9d8      	cbnz	r0, 8009712 <_svfiprintf_r+0xe6>
 80096da:	06d0      	lsls	r0, r2, #27
 80096dc:	bf44      	itt	mi
 80096de:	2320      	movmi	r3, #32
 80096e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e4:	0711      	lsls	r1, r2, #28
 80096e6:	bf44      	itt	mi
 80096e8:	232b      	movmi	r3, #43	; 0x2b
 80096ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d015      	beq.n	8009722 <_svfiprintf_r+0xf6>
 80096f6:	9a07      	ldr	r2, [sp, #28]
 80096f8:	4654      	mov	r4, sl
 80096fa:	2000      	movs	r0, #0
 80096fc:	f04f 0c0a 	mov.w	ip, #10
 8009700:	4621      	mov	r1, r4
 8009702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009706:	3b30      	subs	r3, #48	; 0x30
 8009708:	2b09      	cmp	r3, #9
 800970a:	d94d      	bls.n	80097a8 <_svfiprintf_r+0x17c>
 800970c:	b1b0      	cbz	r0, 800973c <_svfiprintf_r+0x110>
 800970e:	9207      	str	r2, [sp, #28]
 8009710:	e014      	b.n	800973c <_svfiprintf_r+0x110>
 8009712:	eba0 0308 	sub.w	r3, r0, r8
 8009716:	fa09 f303 	lsl.w	r3, r9, r3
 800971a:	4313      	orrs	r3, r2
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	46a2      	mov	sl, r4
 8009720:	e7d2      	b.n	80096c8 <_svfiprintf_r+0x9c>
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	1d19      	adds	r1, r3, #4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	9103      	str	r1, [sp, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfbb      	ittet	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	f042 0202 	orrlt.w	r2, r2, #2
 8009734:	9307      	strge	r3, [sp, #28]
 8009736:	9307      	strlt	r3, [sp, #28]
 8009738:	bfb8      	it	lt
 800973a:	9204      	strlt	r2, [sp, #16]
 800973c:	7823      	ldrb	r3, [r4, #0]
 800973e:	2b2e      	cmp	r3, #46	; 0x2e
 8009740:	d10c      	bne.n	800975c <_svfiprintf_r+0x130>
 8009742:	7863      	ldrb	r3, [r4, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d134      	bne.n	80097b2 <_svfiprintf_r+0x186>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfb8      	it	lt
 8009754:	f04f 33ff 	movlt.w	r3, #4294967295
 8009758:	3402      	adds	r4, #2
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009824 <_svfiprintf_r+0x1f8>
 8009760:	7821      	ldrb	r1, [r4, #0]
 8009762:	2203      	movs	r2, #3
 8009764:	4650      	mov	r0, sl
 8009766:	f7f6 fd6b 	bl	8000240 <memchr>
 800976a:	b138      	cbz	r0, 800977c <_svfiprintf_r+0x150>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	eba0 000a 	sub.w	r0, r0, sl
 8009772:	2240      	movs	r2, #64	; 0x40
 8009774:	4082      	lsls	r2, r0
 8009776:	4313      	orrs	r3, r2
 8009778:	3401      	adds	r4, #1
 800977a:	9304      	str	r3, [sp, #16]
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	4825      	ldr	r0, [pc, #148]	; (8009818 <_svfiprintf_r+0x1ec>)
 8009782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009786:	2206      	movs	r2, #6
 8009788:	f7f6 fd5a 	bl	8000240 <memchr>
 800978c:	2800      	cmp	r0, #0
 800978e:	d038      	beq.n	8009802 <_svfiprintf_r+0x1d6>
 8009790:	4b22      	ldr	r3, [pc, #136]	; (800981c <_svfiprintf_r+0x1f0>)
 8009792:	bb1b      	cbnz	r3, 80097dc <_svfiprintf_r+0x1b0>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	3307      	adds	r3, #7
 8009798:	f023 0307 	bic.w	r3, r3, #7
 800979c:	3308      	adds	r3, #8
 800979e:	9303      	str	r3, [sp, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a2:	4433      	add	r3, r6
 80097a4:	9309      	str	r3, [sp, #36]	; 0x24
 80097a6:	e768      	b.n	800967a <_svfiprintf_r+0x4e>
 80097a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ac:	460c      	mov	r4, r1
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7a6      	b.n	8009700 <_svfiprintf_r+0xd4>
 80097b2:	2300      	movs	r3, #0
 80097b4:	3401      	adds	r4, #1
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	4619      	mov	r1, r3
 80097ba:	f04f 0c0a 	mov.w	ip, #10
 80097be:	4620      	mov	r0, r4
 80097c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c4:	3a30      	subs	r2, #48	; 0x30
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d903      	bls.n	80097d2 <_svfiprintf_r+0x1a6>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0c6      	beq.n	800975c <_svfiprintf_r+0x130>
 80097ce:	9105      	str	r1, [sp, #20]
 80097d0:	e7c4      	b.n	800975c <_svfiprintf_r+0x130>
 80097d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d6:	4604      	mov	r4, r0
 80097d8:	2301      	movs	r3, #1
 80097da:	e7f0      	b.n	80097be <_svfiprintf_r+0x192>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <_svfiprintf_r+0x1f4>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4638      	mov	r0, r7
 80097e8:	f7fd ff1a 	bl	8007620 <_printf_float>
 80097ec:	1c42      	adds	r2, r0, #1
 80097ee:	4606      	mov	r6, r0
 80097f0:	d1d6      	bne.n	80097a0 <_svfiprintf_r+0x174>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	065b      	lsls	r3, r3, #25
 80097f6:	f53f af2d 	bmi.w	8009654 <_svfiprintf_r+0x28>
 80097fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fc:	b01d      	add	sp, #116	; 0x74
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <_svfiprintf_r+0x1f4>)
 800980a:	a904      	add	r1, sp, #16
 800980c:	4638      	mov	r0, r7
 800980e:	f7fe f98f 	bl	8007b30 <_printf_i>
 8009812:	e7eb      	b.n	80097ec <_svfiprintf_r+0x1c0>
 8009814:	0800abf4 	.word	0x0800abf4
 8009818:	0800abfe 	.word	0x0800abfe
 800981c:	08007621 	.word	0x08007621
 8009820:	08009579 	.word	0x08009579
 8009824:	0800abfa 	.word	0x0800abfa

08009828 <__sflush_r>:
 8009828:	898a      	ldrh	r2, [r1, #12]
 800982a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982e:	4605      	mov	r5, r0
 8009830:	0710      	lsls	r0, r2, #28
 8009832:	460c      	mov	r4, r1
 8009834:	d458      	bmi.n	80098e8 <__sflush_r+0xc0>
 8009836:	684b      	ldr	r3, [r1, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc05      	bgt.n	8009848 <__sflush_r+0x20>
 800983c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800983e:	2b00      	cmp	r3, #0
 8009840:	dc02      	bgt.n	8009848 <__sflush_r+0x20>
 8009842:	2000      	movs	r0, #0
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800984a:	2e00      	cmp	r6, #0
 800984c:	d0f9      	beq.n	8009842 <__sflush_r+0x1a>
 800984e:	2300      	movs	r3, #0
 8009850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009854:	682f      	ldr	r7, [r5, #0]
 8009856:	6a21      	ldr	r1, [r4, #32]
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	d032      	beq.n	80098c2 <__sflush_r+0x9a>
 800985c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	075a      	lsls	r2, r3, #29
 8009862:	d505      	bpl.n	8009870 <__sflush_r+0x48>
 8009864:	6863      	ldr	r3, [r4, #4]
 8009866:	1ac0      	subs	r0, r0, r3
 8009868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800986a:	b10b      	cbz	r3, 8009870 <__sflush_r+0x48>
 800986c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800986e:	1ac0      	subs	r0, r0, r3
 8009870:	2300      	movs	r3, #0
 8009872:	4602      	mov	r2, r0
 8009874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009876:	6a21      	ldr	r1, [r4, #32]
 8009878:	4628      	mov	r0, r5
 800987a:	47b0      	blx	r6
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	d106      	bne.n	8009890 <__sflush_r+0x68>
 8009882:	6829      	ldr	r1, [r5, #0]
 8009884:	291d      	cmp	r1, #29
 8009886:	d82b      	bhi.n	80098e0 <__sflush_r+0xb8>
 8009888:	4a29      	ldr	r2, [pc, #164]	; (8009930 <__sflush_r+0x108>)
 800988a:	410a      	asrs	r2, r1
 800988c:	07d6      	lsls	r6, r2, #31
 800988e:	d427      	bmi.n	80098e0 <__sflush_r+0xb8>
 8009890:	2200      	movs	r2, #0
 8009892:	6062      	str	r2, [r4, #4]
 8009894:	04d9      	lsls	r1, r3, #19
 8009896:	6922      	ldr	r2, [r4, #16]
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	d504      	bpl.n	80098a6 <__sflush_r+0x7e>
 800989c:	1c42      	adds	r2, r0, #1
 800989e:	d101      	bne.n	80098a4 <__sflush_r+0x7c>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b903      	cbnz	r3, 80098a6 <__sflush_r+0x7e>
 80098a4:	6560      	str	r0, [r4, #84]	; 0x54
 80098a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098a8:	602f      	str	r7, [r5, #0]
 80098aa:	2900      	cmp	r1, #0
 80098ac:	d0c9      	beq.n	8009842 <__sflush_r+0x1a>
 80098ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098b2:	4299      	cmp	r1, r3
 80098b4:	d002      	beq.n	80098bc <__sflush_r+0x94>
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff f9e2 	bl	8008c80 <_free_r>
 80098bc:	2000      	movs	r0, #0
 80098be:	6360      	str	r0, [r4, #52]	; 0x34
 80098c0:	e7c0      	b.n	8009844 <__sflush_r+0x1c>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b0      	blx	r6
 80098c8:	1c41      	adds	r1, r0, #1
 80098ca:	d1c8      	bne.n	800985e <__sflush_r+0x36>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0c5      	beq.n	800985e <__sflush_r+0x36>
 80098d2:	2b1d      	cmp	r3, #29
 80098d4:	d001      	beq.n	80098da <__sflush_r+0xb2>
 80098d6:	2b16      	cmp	r3, #22
 80098d8:	d101      	bne.n	80098de <__sflush_r+0xb6>
 80098da:	602f      	str	r7, [r5, #0]
 80098dc:	e7b1      	b.n	8009842 <__sflush_r+0x1a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7ad      	b.n	8009844 <__sflush_r+0x1c>
 80098e8:	690f      	ldr	r7, [r1, #16]
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	d0a9      	beq.n	8009842 <__sflush_r+0x1a>
 80098ee:	0793      	lsls	r3, r2, #30
 80098f0:	680e      	ldr	r6, [r1, #0]
 80098f2:	bf08      	it	eq
 80098f4:	694b      	ldreq	r3, [r1, #20]
 80098f6:	600f      	str	r7, [r1, #0]
 80098f8:	bf18      	it	ne
 80098fa:	2300      	movne	r3, #0
 80098fc:	eba6 0807 	sub.w	r8, r6, r7
 8009900:	608b      	str	r3, [r1, #8]
 8009902:	f1b8 0f00 	cmp.w	r8, #0
 8009906:	dd9c      	ble.n	8009842 <__sflush_r+0x1a>
 8009908:	6a21      	ldr	r1, [r4, #32]
 800990a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800990c:	4643      	mov	r3, r8
 800990e:	463a      	mov	r2, r7
 8009910:	4628      	mov	r0, r5
 8009912:	47b0      	blx	r6
 8009914:	2800      	cmp	r0, #0
 8009916:	dc06      	bgt.n	8009926 <__sflush_r+0xfe>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991e:	81a3      	strh	r3, [r4, #12]
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e78e      	b.n	8009844 <__sflush_r+0x1c>
 8009926:	4407      	add	r7, r0
 8009928:	eba8 0800 	sub.w	r8, r8, r0
 800992c:	e7e9      	b.n	8009902 <__sflush_r+0xda>
 800992e:	bf00      	nop
 8009930:	dfbffffe 	.word	0xdfbffffe

08009934 <_fflush_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	690b      	ldr	r3, [r1, #16]
 8009938:	4605      	mov	r5, r0
 800993a:	460c      	mov	r4, r1
 800993c:	b913      	cbnz	r3, 8009944 <_fflush_r+0x10>
 800993e:	2500      	movs	r5, #0
 8009940:	4628      	mov	r0, r5
 8009942:	bd38      	pop	{r3, r4, r5, pc}
 8009944:	b118      	cbz	r0, 800994e <_fflush_r+0x1a>
 8009946:	6a03      	ldr	r3, [r0, #32]
 8009948:	b90b      	cbnz	r3, 800994e <_fflush_r+0x1a>
 800994a:	f7fe fa8d 	bl	8007e68 <__sinit>
 800994e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0f3      	beq.n	800993e <_fflush_r+0xa>
 8009956:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009958:	07d0      	lsls	r0, r2, #31
 800995a:	d404      	bmi.n	8009966 <_fflush_r+0x32>
 800995c:	0599      	lsls	r1, r3, #22
 800995e:	d402      	bmi.n	8009966 <_fflush_r+0x32>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f7fe fb97 	bl	8008094 <__retarget_lock_acquire_recursive>
 8009966:	4628      	mov	r0, r5
 8009968:	4621      	mov	r1, r4
 800996a:	f7ff ff5d 	bl	8009828 <__sflush_r>
 800996e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009970:	07da      	lsls	r2, r3, #31
 8009972:	4605      	mov	r5, r0
 8009974:	d4e4      	bmi.n	8009940 <_fflush_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	059b      	lsls	r3, r3, #22
 800997a:	d4e1      	bmi.n	8009940 <_fflush_r+0xc>
 800997c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800997e:	f7fe fb8a 	bl	8008096 <__retarget_lock_release_recursive>
 8009982:	e7dd      	b.n	8009940 <_fflush_r+0xc>

08009984 <memmove>:
 8009984:	4288      	cmp	r0, r1
 8009986:	b510      	push	{r4, lr}
 8009988:	eb01 0402 	add.w	r4, r1, r2
 800998c:	d902      	bls.n	8009994 <memmove+0x10>
 800998e:	4284      	cmp	r4, r0
 8009990:	4623      	mov	r3, r4
 8009992:	d807      	bhi.n	80099a4 <memmove+0x20>
 8009994:	1e43      	subs	r3, r0, #1
 8009996:	42a1      	cmp	r1, r4
 8009998:	d008      	beq.n	80099ac <memmove+0x28>
 800999a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800999e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099a2:	e7f8      	b.n	8009996 <memmove+0x12>
 80099a4:	4402      	add	r2, r0
 80099a6:	4601      	mov	r1, r0
 80099a8:	428a      	cmp	r2, r1
 80099aa:	d100      	bne.n	80099ae <memmove+0x2a>
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099b6:	e7f7      	b.n	80099a8 <memmove+0x24>

080099b8 <_sbrk_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	; (80099d4 <_sbrk_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7f8 fa50 	bl	8001e68 <_sbrk>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_sbrk_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_sbrk_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000608 	.word	0x20000608

080099d8 <memcpy>:
 80099d8:	440a      	add	r2, r1
 80099da:	4291      	cmp	r1, r2
 80099dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e0:	d100      	bne.n	80099e4 <memcpy+0xc>
 80099e2:	4770      	bx	lr
 80099e4:	b510      	push	{r4, lr}
 80099e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099ee:	4291      	cmp	r1, r2
 80099f0:	d1f9      	bne.n	80099e6 <memcpy+0xe>
 80099f2:	bd10      	pop	{r4, pc}

080099f4 <__assert_func>:
 80099f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099f6:	4614      	mov	r4, r2
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <__assert_func+0x2c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4605      	mov	r5, r0
 8009a00:	68d8      	ldr	r0, [r3, #12]
 8009a02:	b14c      	cbz	r4, 8009a18 <__assert_func+0x24>
 8009a04:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <__assert_func+0x30>)
 8009a06:	9100      	str	r1, [sp, #0]
 8009a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a0c:	4906      	ldr	r1, [pc, #24]	; (8009a28 <__assert_func+0x34>)
 8009a0e:	462b      	mov	r3, r5
 8009a10:	f000 f872 	bl	8009af8 <fiprintf>
 8009a14:	f000 f882 	bl	8009b1c <abort>
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <__assert_func+0x38>)
 8009a1a:	461c      	mov	r4, r3
 8009a1c:	e7f3      	b.n	8009a06 <__assert_func+0x12>
 8009a1e:	bf00      	nop
 8009a20:	20000070 	.word	0x20000070
 8009a24:	0800ac0f 	.word	0x0800ac0f
 8009a28:	0800ac1c 	.word	0x0800ac1c
 8009a2c:	0800ac4a 	.word	0x0800ac4a

08009a30 <_calloc_r>:
 8009a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a32:	fba1 2402 	umull	r2, r4, r1, r2
 8009a36:	b94c      	cbnz	r4, 8009a4c <_calloc_r+0x1c>
 8009a38:	4611      	mov	r1, r2
 8009a3a:	9201      	str	r2, [sp, #4]
 8009a3c:	f7ff f994 	bl	8008d68 <_malloc_r>
 8009a40:	9a01      	ldr	r2, [sp, #4]
 8009a42:	4605      	mov	r5, r0
 8009a44:	b930      	cbnz	r0, 8009a54 <_calloc_r+0x24>
 8009a46:	4628      	mov	r0, r5
 8009a48:	b003      	add	sp, #12
 8009a4a:	bd30      	pop	{r4, r5, pc}
 8009a4c:	220c      	movs	r2, #12
 8009a4e:	6002      	str	r2, [r0, #0]
 8009a50:	2500      	movs	r5, #0
 8009a52:	e7f8      	b.n	8009a46 <_calloc_r+0x16>
 8009a54:	4621      	mov	r1, r4
 8009a56:	f7fe faa0 	bl	8007f9a <memset>
 8009a5a:	e7f4      	b.n	8009a46 <_calloc_r+0x16>

08009a5c <__ascii_mbtowc>:
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	b901      	cbnz	r1, 8009a62 <__ascii_mbtowc+0x6>
 8009a60:	a901      	add	r1, sp, #4
 8009a62:	b142      	cbz	r2, 8009a76 <__ascii_mbtowc+0x1a>
 8009a64:	b14b      	cbz	r3, 8009a7a <__ascii_mbtowc+0x1e>
 8009a66:	7813      	ldrb	r3, [r2, #0]
 8009a68:	600b      	str	r3, [r1, #0]
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	1e10      	subs	r0, r2, #0
 8009a6e:	bf18      	it	ne
 8009a70:	2001      	movne	r0, #1
 8009a72:	b002      	add	sp, #8
 8009a74:	4770      	bx	lr
 8009a76:	4610      	mov	r0, r2
 8009a78:	e7fb      	b.n	8009a72 <__ascii_mbtowc+0x16>
 8009a7a:	f06f 0001 	mvn.w	r0, #1
 8009a7e:	e7f8      	b.n	8009a72 <__ascii_mbtowc+0x16>

08009a80 <_realloc_r>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	4680      	mov	r8, r0
 8009a86:	4614      	mov	r4, r2
 8009a88:	460e      	mov	r6, r1
 8009a8a:	b921      	cbnz	r1, 8009a96 <_realloc_r+0x16>
 8009a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	4611      	mov	r1, r2
 8009a92:	f7ff b969 	b.w	8008d68 <_malloc_r>
 8009a96:	b92a      	cbnz	r2, 8009aa4 <_realloc_r+0x24>
 8009a98:	f7ff f8f2 	bl	8008c80 <_free_r>
 8009a9c:	4625      	mov	r5, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	f000 f841 	bl	8009b2a <_malloc_usable_size_r>
 8009aa8:	4284      	cmp	r4, r0
 8009aaa:	4607      	mov	r7, r0
 8009aac:	d802      	bhi.n	8009ab4 <_realloc_r+0x34>
 8009aae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ab2:	d812      	bhi.n	8009ada <_realloc_r+0x5a>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f7ff f956 	bl	8008d68 <_malloc_r>
 8009abc:	4605      	mov	r5, r0
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d0ed      	beq.n	8009a9e <_realloc_r+0x1e>
 8009ac2:	42bc      	cmp	r4, r7
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	bf28      	it	cs
 8009aca:	463a      	movcs	r2, r7
 8009acc:	f7ff ff84 	bl	80099d8 <memcpy>
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	f7ff f8d4 	bl	8008c80 <_free_r>
 8009ad8:	e7e1      	b.n	8009a9e <_realloc_r+0x1e>
 8009ada:	4635      	mov	r5, r6
 8009adc:	e7df      	b.n	8009a9e <_realloc_r+0x1e>

08009ade <__ascii_wctomb>:
 8009ade:	b149      	cbz	r1, 8009af4 <__ascii_wctomb+0x16>
 8009ae0:	2aff      	cmp	r2, #255	; 0xff
 8009ae2:	bf85      	ittet	hi
 8009ae4:	238a      	movhi	r3, #138	; 0x8a
 8009ae6:	6003      	strhi	r3, [r0, #0]
 8009ae8:	700a      	strbls	r2, [r1, #0]
 8009aea:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aee:	bf98      	it	ls
 8009af0:	2001      	movls	r0, #1
 8009af2:	4770      	bx	lr
 8009af4:	4608      	mov	r0, r1
 8009af6:	4770      	bx	lr

08009af8 <fiprintf>:
 8009af8:	b40e      	push	{r1, r2, r3}
 8009afa:	b503      	push	{r0, r1, lr}
 8009afc:	4601      	mov	r1, r0
 8009afe:	ab03      	add	r3, sp, #12
 8009b00:	4805      	ldr	r0, [pc, #20]	; (8009b18 <fiprintf+0x20>)
 8009b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b06:	6800      	ldr	r0, [r0, #0]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	f000 f83f 	bl	8009b8c <_vfiprintf_r>
 8009b0e:	b002      	add	sp, #8
 8009b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b14:	b003      	add	sp, #12
 8009b16:	4770      	bx	lr
 8009b18:	20000070 	.word	0x20000070

08009b1c <abort>:
 8009b1c:	b508      	push	{r3, lr}
 8009b1e:	2006      	movs	r0, #6
 8009b20:	f000 fa0c 	bl	8009f3c <raise>
 8009b24:	2001      	movs	r0, #1
 8009b26:	f7f8 f927 	bl	8001d78 <_exit>

08009b2a <_malloc_usable_size_r>:
 8009b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2e:	1f18      	subs	r0, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bfbc      	itt	lt
 8009b34:	580b      	ldrlt	r3, [r1, r0]
 8009b36:	18c0      	addlt	r0, r0, r3
 8009b38:	4770      	bx	lr

08009b3a <__sfputc_r>:
 8009b3a:	6893      	ldr	r3, [r2, #8]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	b410      	push	{r4}
 8009b42:	6093      	str	r3, [r2, #8]
 8009b44:	da08      	bge.n	8009b58 <__sfputc_r+0x1e>
 8009b46:	6994      	ldr	r4, [r2, #24]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	db01      	blt.n	8009b50 <__sfputc_r+0x16>
 8009b4c:	290a      	cmp	r1, #10
 8009b4e:	d103      	bne.n	8009b58 <__sfputc_r+0x1e>
 8009b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b54:	f000 b934 	b.w	8009dc0 <__swbuf_r>
 8009b58:	6813      	ldr	r3, [r2, #0]
 8009b5a:	1c58      	adds	r0, r3, #1
 8009b5c:	6010      	str	r0, [r2, #0]
 8009b5e:	7019      	strb	r1, [r3, #0]
 8009b60:	4608      	mov	r0, r1
 8009b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <__sfputs_r>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460f      	mov	r7, r1
 8009b6e:	4614      	mov	r4, r2
 8009b70:	18d5      	adds	r5, r2, r3
 8009b72:	42ac      	cmp	r4, r5
 8009b74:	d101      	bne.n	8009b7a <__sfputs_r+0x12>
 8009b76:	2000      	movs	r0, #0
 8009b78:	e007      	b.n	8009b8a <__sfputs_r+0x22>
 8009b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7e:	463a      	mov	r2, r7
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff ffda 	bl	8009b3a <__sfputc_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d1f3      	bne.n	8009b72 <__sfputs_r+0xa>
 8009b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b8c <_vfiprintf_r>:
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	460d      	mov	r5, r1
 8009b92:	b09d      	sub	sp, #116	; 0x74
 8009b94:	4614      	mov	r4, r2
 8009b96:	4698      	mov	r8, r3
 8009b98:	4606      	mov	r6, r0
 8009b9a:	b118      	cbz	r0, 8009ba4 <_vfiprintf_r+0x18>
 8009b9c:	6a03      	ldr	r3, [r0, #32]
 8009b9e:	b90b      	cbnz	r3, 8009ba4 <_vfiprintf_r+0x18>
 8009ba0:	f7fe f962 	bl	8007e68 <__sinit>
 8009ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d405      	bmi.n	8009bb6 <_vfiprintf_r+0x2a>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	059a      	lsls	r2, r3, #22
 8009bae:	d402      	bmi.n	8009bb6 <_vfiprintf_r+0x2a>
 8009bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb2:	f7fe fa6f 	bl	8008094 <__retarget_lock_acquire_recursive>
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	071b      	lsls	r3, r3, #28
 8009bba:	d501      	bpl.n	8009bc0 <_vfiprintf_r+0x34>
 8009bbc:	692b      	ldr	r3, [r5, #16]
 8009bbe:	b99b      	cbnz	r3, 8009be8 <_vfiprintf_r+0x5c>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f000 f93a 	bl	8009e3c <__swsetup_r>
 8009bc8:	b170      	cbz	r0, 8009be8 <_vfiprintf_r+0x5c>
 8009bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bcc:	07dc      	lsls	r4, r3, #31
 8009bce:	d504      	bpl.n	8009bda <_vfiprintf_r+0x4e>
 8009bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd4:	b01d      	add	sp, #116	; 0x74
 8009bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	0598      	lsls	r0, r3, #22
 8009bde:	d4f7      	bmi.n	8009bd0 <_vfiprintf_r+0x44>
 8009be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009be2:	f7fe fa58 	bl	8008096 <__retarget_lock_release_recursive>
 8009be6:	e7f3      	b.n	8009bd0 <_vfiprintf_r+0x44>
 8009be8:	2300      	movs	r3, #0
 8009bea:	9309      	str	r3, [sp, #36]	; 0x24
 8009bec:	2320      	movs	r3, #32
 8009bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bf6:	2330      	movs	r3, #48	; 0x30
 8009bf8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009dac <_vfiprintf_r+0x220>
 8009bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c00:	f04f 0901 	mov.w	r9, #1
 8009c04:	4623      	mov	r3, r4
 8009c06:	469a      	mov	sl, r3
 8009c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0c:	b10a      	cbz	r2, 8009c12 <_vfiprintf_r+0x86>
 8009c0e:	2a25      	cmp	r2, #37	; 0x25
 8009c10:	d1f9      	bne.n	8009c06 <_vfiprintf_r+0x7a>
 8009c12:	ebba 0b04 	subs.w	fp, sl, r4
 8009c16:	d00b      	beq.n	8009c30 <_vfiprintf_r+0xa4>
 8009c18:	465b      	mov	r3, fp
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ffa2 	bl	8009b68 <__sfputs_r>
 8009c24:	3001      	adds	r0, #1
 8009c26:	f000 80a9 	beq.w	8009d7c <_vfiprintf_r+0x1f0>
 8009c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c2c:	445a      	add	r2, fp
 8009c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c30:	f89a 3000 	ldrb.w	r3, [sl]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 80a1 	beq.w	8009d7c <_vfiprintf_r+0x1f0>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c44:	f10a 0a01 	add.w	sl, sl, #1
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	9307      	str	r3, [sp, #28]
 8009c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c50:	931a      	str	r3, [sp, #104]	; 0x68
 8009c52:	4654      	mov	r4, sl
 8009c54:	2205      	movs	r2, #5
 8009c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5a:	4854      	ldr	r0, [pc, #336]	; (8009dac <_vfiprintf_r+0x220>)
 8009c5c:	f7f6 faf0 	bl	8000240 <memchr>
 8009c60:	9a04      	ldr	r2, [sp, #16]
 8009c62:	b9d8      	cbnz	r0, 8009c9c <_vfiprintf_r+0x110>
 8009c64:	06d1      	lsls	r1, r2, #27
 8009c66:	bf44      	itt	mi
 8009c68:	2320      	movmi	r3, #32
 8009c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c6e:	0713      	lsls	r3, r2, #28
 8009c70:	bf44      	itt	mi
 8009c72:	232b      	movmi	r3, #43	; 0x2b
 8009c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c78:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7e:	d015      	beq.n	8009cac <_vfiprintf_r+0x120>
 8009c80:	9a07      	ldr	r2, [sp, #28]
 8009c82:	4654      	mov	r4, sl
 8009c84:	2000      	movs	r0, #0
 8009c86:	f04f 0c0a 	mov.w	ip, #10
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c90:	3b30      	subs	r3, #48	; 0x30
 8009c92:	2b09      	cmp	r3, #9
 8009c94:	d94d      	bls.n	8009d32 <_vfiprintf_r+0x1a6>
 8009c96:	b1b0      	cbz	r0, 8009cc6 <_vfiprintf_r+0x13a>
 8009c98:	9207      	str	r2, [sp, #28]
 8009c9a:	e014      	b.n	8009cc6 <_vfiprintf_r+0x13a>
 8009c9c:	eba0 0308 	sub.w	r3, r0, r8
 8009ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	46a2      	mov	sl, r4
 8009caa:	e7d2      	b.n	8009c52 <_vfiprintf_r+0xc6>
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	1d19      	adds	r1, r3, #4
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	9103      	str	r1, [sp, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	bfbb      	ittet	lt
 8009cb8:	425b      	neglt	r3, r3
 8009cba:	f042 0202 	orrlt.w	r2, r2, #2
 8009cbe:	9307      	strge	r3, [sp, #28]
 8009cc0:	9307      	strlt	r3, [sp, #28]
 8009cc2:	bfb8      	it	lt
 8009cc4:	9204      	strlt	r2, [sp, #16]
 8009cc6:	7823      	ldrb	r3, [r4, #0]
 8009cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cca:	d10c      	bne.n	8009ce6 <_vfiprintf_r+0x15a>
 8009ccc:	7863      	ldrb	r3, [r4, #1]
 8009cce:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd0:	d134      	bne.n	8009d3c <_vfiprintf_r+0x1b0>
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	1d1a      	adds	r2, r3, #4
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	9203      	str	r2, [sp, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bfb8      	it	lt
 8009cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ce2:	3402      	adds	r4, #2
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009dbc <_vfiprintf_r+0x230>
 8009cea:	7821      	ldrb	r1, [r4, #0]
 8009cec:	2203      	movs	r2, #3
 8009cee:	4650      	mov	r0, sl
 8009cf0:	f7f6 faa6 	bl	8000240 <memchr>
 8009cf4:	b138      	cbz	r0, 8009d06 <_vfiprintf_r+0x17a>
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	eba0 000a 	sub.w	r0, r0, sl
 8009cfc:	2240      	movs	r2, #64	; 0x40
 8009cfe:	4082      	lsls	r2, r0
 8009d00:	4313      	orrs	r3, r2
 8009d02:	3401      	adds	r4, #1
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0a:	4829      	ldr	r0, [pc, #164]	; (8009db0 <_vfiprintf_r+0x224>)
 8009d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d10:	2206      	movs	r2, #6
 8009d12:	f7f6 fa95 	bl	8000240 <memchr>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d03f      	beq.n	8009d9a <_vfiprintf_r+0x20e>
 8009d1a:	4b26      	ldr	r3, [pc, #152]	; (8009db4 <_vfiprintf_r+0x228>)
 8009d1c:	bb1b      	cbnz	r3, 8009d66 <_vfiprintf_r+0x1da>
 8009d1e:	9b03      	ldr	r3, [sp, #12]
 8009d20:	3307      	adds	r3, #7
 8009d22:	f023 0307 	bic.w	r3, r3, #7
 8009d26:	3308      	adds	r3, #8
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2c:	443b      	add	r3, r7
 8009d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d30:	e768      	b.n	8009c04 <_vfiprintf_r+0x78>
 8009d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d36:	460c      	mov	r4, r1
 8009d38:	2001      	movs	r0, #1
 8009d3a:	e7a6      	b.n	8009c8a <_vfiprintf_r+0xfe>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	3401      	adds	r4, #1
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	4619      	mov	r1, r3
 8009d44:	f04f 0c0a 	mov.w	ip, #10
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d4e:	3a30      	subs	r2, #48	; 0x30
 8009d50:	2a09      	cmp	r2, #9
 8009d52:	d903      	bls.n	8009d5c <_vfiprintf_r+0x1d0>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0c6      	beq.n	8009ce6 <_vfiprintf_r+0x15a>
 8009d58:	9105      	str	r1, [sp, #20]
 8009d5a:	e7c4      	b.n	8009ce6 <_vfiprintf_r+0x15a>
 8009d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d60:	4604      	mov	r4, r0
 8009d62:	2301      	movs	r3, #1
 8009d64:	e7f0      	b.n	8009d48 <_vfiprintf_r+0x1bc>
 8009d66:	ab03      	add	r3, sp, #12
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <_vfiprintf_r+0x22c>)
 8009d6e:	a904      	add	r1, sp, #16
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7fd fc55 	bl	8007620 <_printf_float>
 8009d76:	4607      	mov	r7, r0
 8009d78:	1c78      	adds	r0, r7, #1
 8009d7a:	d1d6      	bne.n	8009d2a <_vfiprintf_r+0x19e>
 8009d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d7e:	07d9      	lsls	r1, r3, #31
 8009d80:	d405      	bmi.n	8009d8e <_vfiprintf_r+0x202>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	059a      	lsls	r2, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <_vfiprintf_r+0x202>
 8009d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d8a:	f7fe f984 	bl	8008096 <__retarget_lock_release_recursive>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	065b      	lsls	r3, r3, #25
 8009d92:	f53f af1d 	bmi.w	8009bd0 <_vfiprintf_r+0x44>
 8009d96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d98:	e71c      	b.n	8009bd4 <_vfiprintf_r+0x48>
 8009d9a:	ab03      	add	r3, sp, #12
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <_vfiprintf_r+0x22c>)
 8009da2:	a904      	add	r1, sp, #16
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7fd fec3 	bl	8007b30 <_printf_i>
 8009daa:	e7e4      	b.n	8009d76 <_vfiprintf_r+0x1ea>
 8009dac:	0800abf4 	.word	0x0800abf4
 8009db0:	0800abfe 	.word	0x0800abfe
 8009db4:	08007621 	.word	0x08007621
 8009db8:	08009b69 	.word	0x08009b69
 8009dbc:	0800abfa 	.word	0x0800abfa

08009dc0 <__swbuf_r>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	460e      	mov	r6, r1
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b118      	cbz	r0, 8009dd2 <__swbuf_r+0x12>
 8009dca:	6a03      	ldr	r3, [r0, #32]
 8009dcc:	b90b      	cbnz	r3, 8009dd2 <__swbuf_r+0x12>
 8009dce:	f7fe f84b 	bl	8007e68 <__sinit>
 8009dd2:	69a3      	ldr	r3, [r4, #24]
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	071a      	lsls	r2, r3, #28
 8009dda:	d525      	bpl.n	8009e28 <__swbuf_r+0x68>
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	b31b      	cbz	r3, 8009e28 <__swbuf_r+0x68>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	6922      	ldr	r2, [r4, #16]
 8009de4:	1a98      	subs	r0, r3, r2
 8009de6:	6963      	ldr	r3, [r4, #20]
 8009de8:	b2f6      	uxtb	r6, r6
 8009dea:	4283      	cmp	r3, r0
 8009dec:	4637      	mov	r7, r6
 8009dee:	dc04      	bgt.n	8009dfa <__swbuf_r+0x3a>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7ff fd9e 	bl	8009934 <_fflush_r>
 8009df8:	b9e0      	cbnz	r0, 8009e34 <__swbuf_r+0x74>
 8009dfa:	68a3      	ldr	r3, [r4, #8]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	701e      	strb	r6, [r3, #0]
 8009e08:	6962      	ldr	r2, [r4, #20]
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d004      	beq.n	8009e1a <__swbuf_r+0x5a>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d506      	bpl.n	8009e24 <__swbuf_r+0x64>
 8009e16:	2e0a      	cmp	r6, #10
 8009e18:	d104      	bne.n	8009e24 <__swbuf_r+0x64>
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f7ff fd89 	bl	8009934 <_fflush_r>
 8009e22:	b938      	cbnz	r0, 8009e34 <__swbuf_r+0x74>
 8009e24:	4638      	mov	r0, r7
 8009e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f000 f806 	bl	8009e3c <__swsetup_r>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d0d5      	beq.n	8009de0 <__swbuf_r+0x20>
 8009e34:	f04f 37ff 	mov.w	r7, #4294967295
 8009e38:	e7f4      	b.n	8009e24 <__swbuf_r+0x64>
	...

08009e3c <__swsetup_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <__swsetup_r+0xac>)
 8009e40:	4605      	mov	r5, r0
 8009e42:	6818      	ldr	r0, [r3, #0]
 8009e44:	460c      	mov	r4, r1
 8009e46:	b118      	cbz	r0, 8009e50 <__swsetup_r+0x14>
 8009e48:	6a03      	ldr	r3, [r0, #32]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <__swsetup_r+0x14>
 8009e4c:	f7fe f80c 	bl	8007e68 <__sinit>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e56:	0718      	lsls	r0, r3, #28
 8009e58:	d422      	bmi.n	8009ea0 <__swsetup_r+0x64>
 8009e5a:	06d9      	lsls	r1, r3, #27
 8009e5c:	d407      	bmi.n	8009e6e <__swsetup_r+0x32>
 8009e5e:	2309      	movs	r3, #9
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	e034      	b.n	8009ed8 <__swsetup_r+0x9c>
 8009e6e:	0758      	lsls	r0, r3, #29
 8009e70:	d512      	bpl.n	8009e98 <__swsetup_r+0x5c>
 8009e72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e74:	b141      	cbz	r1, 8009e88 <__swsetup_r+0x4c>
 8009e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	d002      	beq.n	8009e84 <__swsetup_r+0x48>
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f7fe fefe 	bl	8008c80 <_free_r>
 8009e84:	2300      	movs	r3, #0
 8009e86:	6363      	str	r3, [r4, #52]	; 0x34
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e8e:	81a3      	strh	r3, [r4, #12]
 8009e90:	2300      	movs	r3, #0
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f043 0308 	orr.w	r3, r3, #8
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	b94b      	cbnz	r3, 8009eb8 <__swsetup_r+0x7c>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eae:	d003      	beq.n	8009eb8 <__swsetup_r+0x7c>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f884 	bl	8009fc0 <__smakebuf_r>
 8009eb8:	89a0      	ldrh	r0, [r4, #12]
 8009eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ebe:	f010 0301 	ands.w	r3, r0, #1
 8009ec2:	d00a      	beq.n	8009eda <__swsetup_r+0x9e>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60a3      	str	r3, [r4, #8]
 8009ec8:	6963      	ldr	r3, [r4, #20]
 8009eca:	425b      	negs	r3, r3
 8009ecc:	61a3      	str	r3, [r4, #24]
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	b943      	cbnz	r3, 8009ee4 <__swsetup_r+0xa8>
 8009ed2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ed6:	d1c4      	bne.n	8009e62 <__swsetup_r+0x26>
 8009ed8:	bd38      	pop	{r3, r4, r5, pc}
 8009eda:	0781      	lsls	r1, r0, #30
 8009edc:	bf58      	it	pl
 8009ede:	6963      	ldrpl	r3, [r4, #20]
 8009ee0:	60a3      	str	r3, [r4, #8]
 8009ee2:	e7f4      	b.n	8009ece <__swsetup_r+0x92>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e7f7      	b.n	8009ed8 <__swsetup_r+0x9c>
 8009ee8:	20000070 	.word	0x20000070

08009eec <_raise_r>:
 8009eec:	291f      	cmp	r1, #31
 8009eee:	b538      	push	{r3, r4, r5, lr}
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	460d      	mov	r5, r1
 8009ef4:	d904      	bls.n	8009f00 <_raise_r+0x14>
 8009ef6:	2316      	movs	r3, #22
 8009ef8:	6003      	str	r3, [r0, #0]
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f02:	b112      	cbz	r2, 8009f0a <_raise_r+0x1e>
 8009f04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f08:	b94b      	cbnz	r3, 8009f1e <_raise_r+0x32>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 f830 	bl	8009f70 <_getpid_r>
 8009f10:	462a      	mov	r2, r5
 8009f12:	4601      	mov	r1, r0
 8009f14:	4620      	mov	r0, r4
 8009f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f1a:	f000 b817 	b.w	8009f4c <_kill_r>
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d00a      	beq.n	8009f38 <_raise_r+0x4c>
 8009f22:	1c59      	adds	r1, r3, #1
 8009f24:	d103      	bne.n	8009f2e <_raise_r+0x42>
 8009f26:	2316      	movs	r3, #22
 8009f28:	6003      	str	r3, [r0, #0]
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	e7e7      	b.n	8009efe <_raise_r+0x12>
 8009f2e:	2400      	movs	r4, #0
 8009f30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f34:	4628      	mov	r0, r5
 8009f36:	4798      	blx	r3
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e7e0      	b.n	8009efe <_raise_r+0x12>

08009f3c <raise>:
 8009f3c:	4b02      	ldr	r3, [pc, #8]	; (8009f48 <raise+0xc>)
 8009f3e:	4601      	mov	r1, r0
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	f7ff bfd3 	b.w	8009eec <_raise_r>
 8009f46:	bf00      	nop
 8009f48:	20000070 	.word	0x20000070

08009f4c <_kill_r>:
 8009f4c:	b538      	push	{r3, r4, r5, lr}
 8009f4e:	4d07      	ldr	r5, [pc, #28]	; (8009f6c <_kill_r+0x20>)
 8009f50:	2300      	movs	r3, #0
 8009f52:	4604      	mov	r4, r0
 8009f54:	4608      	mov	r0, r1
 8009f56:	4611      	mov	r1, r2
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	f7f7 fefd 	bl	8001d58 <_kill>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d102      	bne.n	8009f68 <_kill_r+0x1c>
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	b103      	cbz	r3, 8009f68 <_kill_r+0x1c>
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	bd38      	pop	{r3, r4, r5, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000608 	.word	0x20000608

08009f70 <_getpid_r>:
 8009f70:	f7f7 beea 	b.w	8001d48 <_getpid>

08009f74 <__swhatbuf_r>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	460c      	mov	r4, r1
 8009f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	b096      	sub	sp, #88	; 0x58
 8009f80:	4615      	mov	r5, r2
 8009f82:	461e      	mov	r6, r3
 8009f84:	da0d      	bge.n	8009fa2 <__swhatbuf_r+0x2e>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f8c:	f04f 0100 	mov.w	r1, #0
 8009f90:	bf0c      	ite	eq
 8009f92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f96:	2340      	movne	r3, #64	; 0x40
 8009f98:	2000      	movs	r0, #0
 8009f9a:	6031      	str	r1, [r6, #0]
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	b016      	add	sp, #88	; 0x58
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	466a      	mov	r2, sp
 8009fa4:	f000 f848 	bl	800a038 <_fstat_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	dbec      	blt.n	8009f86 <__swhatbuf_r+0x12>
 8009fac:	9901      	ldr	r1, [sp, #4]
 8009fae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009fb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009fb6:	4259      	negs	r1, r3
 8009fb8:	4159      	adcs	r1, r3
 8009fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fbe:	e7eb      	b.n	8009f98 <__swhatbuf_r+0x24>

08009fc0 <__smakebuf_r>:
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fc4:	079d      	lsls	r5, r3, #30
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	d507      	bpl.n	8009fdc <__smakebuf_r+0x1c>
 8009fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	6163      	str	r3, [r4, #20]
 8009fd8:	b002      	add	sp, #8
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	ab01      	add	r3, sp, #4
 8009fde:	466a      	mov	r2, sp
 8009fe0:	f7ff ffc8 	bl	8009f74 <__swhatbuf_r>
 8009fe4:	9900      	ldr	r1, [sp, #0]
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7fe febd 	bl	8008d68 <_malloc_r>
 8009fee:	b948      	cbnz	r0, 800a004 <__smakebuf_r+0x44>
 8009ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d4ef      	bmi.n	8009fd8 <__smakebuf_r+0x18>
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	f043 0302 	orr.w	r3, r3, #2
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	e7e3      	b.n	8009fcc <__smakebuf_r+0xc>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	6163      	str	r3, [r4, #20]
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	6120      	str	r0, [r4, #16]
 800a016:	b15b      	cbz	r3, 800a030 <__smakebuf_r+0x70>
 800a018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01c:	4630      	mov	r0, r6
 800a01e:	f000 f81d 	bl	800a05c <_isatty_r>
 800a022:	b128      	cbz	r0, 800a030 <__smakebuf_r+0x70>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f023 0303 	bic.w	r3, r3, #3
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	81a3      	strh	r3, [r4, #12]
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	431d      	orrs	r5, r3
 800a034:	81a5      	strh	r5, [r4, #12]
 800a036:	e7cf      	b.n	8009fd8 <__smakebuf_r+0x18>

0800a038 <_fstat_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	; (800a058 <_fstat_r+0x20>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f7f7 fee6 	bl	8001e16 <_fstat>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_fstat_r+0x1c>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b103      	cbz	r3, 800a054 <_fstat_r+0x1c>
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	20000608 	.word	0x20000608

0800a05c <_isatty_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d06      	ldr	r5, [pc, #24]	; (800a078 <_isatty_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	f7f7 fee5 	bl	8001e36 <_isatty>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_isatty_r+0x1a>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_isatty_r+0x1a>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	20000608 	.word	0x20000608
 800a07c:	00000000 	.word	0x00000000

0800a080 <sqrt>:
 800a080:	b508      	push	{r3, lr}
 800a082:	ed2d 8b04 	vpush	{d8-d9}
 800a086:	eeb0 8b40 	vmov.f64	d8, d0
 800a08a:	f000 fa9d 	bl	800a5c8 <__ieee754_sqrt>
 800a08e:	eeb4 8b48 	vcmp.f64	d8, d8
 800a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a096:	d60c      	bvs.n	800a0b2 <sqrt+0x32>
 800a098:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800a0b8 <sqrt+0x38>
 800a09c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a4:	d505      	bpl.n	800a0b2 <sqrt+0x32>
 800a0a6:	f7fd ffcb 	bl	8008040 <__errno>
 800a0aa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a0ae:	2321      	movs	r3, #33	; 0x21
 800a0b0:	6003      	str	r3, [r0, #0]
 800a0b2:	ecbd 8b04 	vpop	{d8-d9}
 800a0b6:	bd08      	pop	{r3, pc}
	...

0800a0c0 <checkint>:
 800a0c0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a0c4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	dd2a      	ble.n	800a124 <checkint+0x64>
 800a0ce:	f240 4333 	movw	r3, #1075	; 0x433
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	dc24      	bgt.n	800a120 <checkint+0x60>
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	f1a3 0620 	sub.w	r6, r3, #32
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	fa02 f403 	lsl.w	r4, r2, r3
 800a0e4:	fa02 f606 	lsl.w	r6, r2, r6
 800a0e8:	f1c3 0520 	rsb	r5, r3, #32
 800a0ec:	fa22 f505 	lsr.w	r5, r2, r5
 800a0f0:	4334      	orrs	r4, r6
 800a0f2:	432c      	orrs	r4, r5
 800a0f4:	409a      	lsls	r2, r3
 800a0f6:	ea20 0202 	bic.w	r2, r0, r2
 800a0fa:	ea21 0404 	bic.w	r4, r1, r4
 800a0fe:	4322      	orrs	r2, r4
 800a100:	f1a3 0420 	sub.w	r4, r3, #32
 800a104:	f1c3 0220 	rsb	r2, r3, #32
 800a108:	d10c      	bne.n	800a124 <checkint+0x64>
 800a10a:	40d8      	lsrs	r0, r3
 800a10c:	fa01 f302 	lsl.w	r3, r1, r2
 800a110:	4318      	orrs	r0, r3
 800a112:	40e1      	lsrs	r1, r4
 800a114:	4308      	orrs	r0, r1
 800a116:	f000 0001 	and.w	r0, r0, #1
 800a11a:	f1d0 0002 	rsbs	r0, r0, #2
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	2002      	movs	r0, #2
 800a122:	e7fc      	b.n	800a11e <checkint+0x5e>
 800a124:	2000      	movs	r0, #0
 800a126:	e7fa      	b.n	800a11e <checkint+0x5e>

0800a128 <pow>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ee10 4a90 	vmov	r4, s1
 800a130:	ed2d 8b0a 	vpush	{d8-d12}
 800a134:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800a138:	ee11 aa90 	vmov	sl, s3
 800a13c:	f108 32ff 	add.w	r2, r8, #4294967295
 800a140:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800a144:	429a      	cmp	r2, r3
 800a146:	ee10 5a10 	vmov	r5, s0
 800a14a:	ee11 0a10 	vmov	r0, s2
 800a14e:	b087      	sub	sp, #28
 800a150:	46c4      	mov	ip, r8
 800a152:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800a156:	d806      	bhi.n	800a166 <pow+0x3e>
 800a158:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800a15c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800a160:	2b7f      	cmp	r3, #127	; 0x7f
 800a162:	f240 8156 	bls.w	800a412 <pow+0x2ea>
 800a166:	1802      	adds	r2, r0, r0
 800a168:	eb4a 010a 	adc.w	r1, sl, sl
 800a16c:	f06f 0b01 	mvn.w	fp, #1
 800a170:	1e57      	subs	r7, r2, #1
 800a172:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a176:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800a17a:	45bb      	cmp	fp, r7
 800a17c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800a180:	d242      	bcs.n	800a208 <pow+0xe0>
 800a182:	ea52 0301 	orrs.w	r3, r2, r1
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	d10c      	bne.n	800a1a6 <pow+0x7e>
 800a18c:	196d      	adds	r5, r5, r5
 800a18e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800a192:	4164      	adcs	r4, r4
 800a194:	42ab      	cmp	r3, r5
 800a196:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a19a:	41a3      	sbcs	r3, r4
 800a19c:	f0c0 808f 	bcc.w	800a2be <pow+0x196>
 800a1a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a1a4:	e02b      	b.n	800a1fe <pow+0xd6>
 800a1a6:	4ed4      	ldr	r6, [pc, #848]	; (800a4f8 <pow+0x3d0>)
 800a1a8:	42b4      	cmp	r4, r6
 800a1aa:	bf08      	it	eq
 800a1ac:	429d      	cmpeq	r5, r3
 800a1ae:	d109      	bne.n	800a1c4 <pow+0x9c>
 800a1b0:	1800      	adds	r0, r0, r0
 800a1b2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800a1b6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800a1ba:	4283      	cmp	r3, r0
 800a1bc:	4bcf      	ldr	r3, [pc, #828]	; (800a4fc <pow+0x3d4>)
 800a1be:	eb73 030a 	sbcs.w	r3, r3, sl
 800a1c2:	e7eb      	b.n	800a19c <pow+0x74>
 800a1c4:	196d      	adds	r5, r5, r5
 800a1c6:	48ce      	ldr	r0, [pc, #824]	; (800a500 <pow+0x3d8>)
 800a1c8:	4164      	adcs	r4, r4
 800a1ca:	42ab      	cmp	r3, r5
 800a1cc:	eb70 0604 	sbcs.w	r6, r0, r4
 800a1d0:	d375      	bcc.n	800a2be <pow+0x196>
 800a1d2:	4281      	cmp	r1, r0
 800a1d4:	bf08      	it	eq
 800a1d6:	429a      	cmpeq	r2, r3
 800a1d8:	d171      	bne.n	800a2be <pow+0x196>
 800a1da:	4aca      	ldr	r2, [pc, #808]	; (800a504 <pow+0x3dc>)
 800a1dc:	4294      	cmp	r4, r2
 800a1de:	bf08      	it	eq
 800a1e0:	429d      	cmpeq	r5, r3
 800a1e2:	d0dd      	beq.n	800a1a0 <pow+0x78>
 800a1e4:	4294      	cmp	r4, r2
 800a1e6:	ea6f 0a0a 	mvn.w	sl, sl
 800a1ea:	bf34      	ite	cc
 800a1ec:	2400      	movcc	r4, #0
 800a1ee:	2401      	movcs	r4, #1
 800a1f0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800a1f4:	4554      	cmp	r4, sl
 800a1f6:	f040 81dc 	bne.w	800a5b2 <pow+0x48a>
 800a1fa:	ee21 0b01 	vmul.f64	d0, d1, d1
 800a1fe:	b007      	add	sp, #28
 800a200:	ecbd 8b0a 	vpop	{d8-d12}
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	196f      	adds	r7, r5, r5
 800a20a:	eb44 0904 	adc.w	r9, r4, r4
 800a20e:	1e7a      	subs	r2, r7, #1
 800a210:	f169 0300 	sbc.w	r3, r9, #0
 800a214:	4593      	cmp	fp, r2
 800a216:	eb7e 0303 	sbcs.w	r3, lr, r3
 800a21a:	d225      	bcs.n	800a268 <pow+0x140>
 800a21c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800a220:	2c00      	cmp	r4, #0
 800a222:	da13      	bge.n	800a24c <pow+0x124>
 800a224:	4651      	mov	r1, sl
 800a226:	f7ff ff4b 	bl	800a0c0 <checkint>
 800a22a:	2801      	cmp	r0, #1
 800a22c:	d10e      	bne.n	800a24c <pow+0x124>
 800a22e:	eeb1 0b40 	vneg.f64	d0, d0
 800a232:	ea57 0909 	orrs.w	r9, r7, r9
 800a236:	d10b      	bne.n	800a250 <pow+0x128>
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	dadf      	bge.n	800a1fe <pow+0xd6>
 800a23e:	b007      	add	sp, #28
 800a240:	ecbd 8b0a 	vpop	{d8-d12}
 800a244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	f000 b9ee 	b.w	800a628 <__math_divzero>
 800a24c:	2000      	movs	r0, #0
 800a24e:	e7f0      	b.n	800a232 <pow+0x10a>
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	dad3      	bge.n	800a1fe <pow+0xd6>
 800a256:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a25a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a25e:	ed8d 7b00 	vstr	d7, [sp]
 800a262:	ed9d 0b00 	vldr	d0, [sp]
 800a266:	e7ca      	b.n	800a1fe <pow+0xd6>
 800a268:	2c00      	cmp	r4, #0
 800a26a:	da2b      	bge.n	800a2c4 <pow+0x19c>
 800a26c:	4651      	mov	r1, sl
 800a26e:	f7ff ff27 	bl	800a0c0 <checkint>
 800a272:	b930      	cbnz	r0, 800a282 <pow+0x15a>
 800a274:	b007      	add	sp, #28
 800a276:	ecbd 8b0a 	vpop	{d8-d12}
 800a27a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27e:	f000 b9eb 	b.w	800a658 <__math_invalid>
 800a282:	1e41      	subs	r1, r0, #1
 800a284:	4248      	negs	r0, r1
 800a286:	4148      	adcs	r0, r1
 800a288:	0480      	lsls	r0, r0, #18
 800a28a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a28e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800a292:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800a296:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800a29a:	2b7f      	cmp	r3, #127	; 0x7f
 800a29c:	d92d      	bls.n	800a2fa <pow+0x1d2>
 800a29e:	4b96      	ldr	r3, [pc, #600]	; (800a4f8 <pow+0x3d0>)
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	bf08      	it	eq
 800a2a6:	4285      	cmpeq	r5, r0
 800a2a8:	f43f af7a 	beq.w	800a1a0 <pow+0x78>
 800a2ac:	f240 31bd 	movw	r1, #957	; 0x3bd
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	d80c      	bhi.n	800a2ce <pow+0x1a6>
 800a2b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a2b8:	42a8      	cmp	r0, r5
 800a2ba:	41a3      	sbcs	r3, r4
 800a2bc:	d204      	bcs.n	800a2c8 <pow+0x1a0>
 800a2be:	ee31 0b00 	vadd.f64	d0, d1, d0
 800a2c2:	e79c      	b.n	800a1fe <pow+0xd6>
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	e7e4      	b.n	800a292 <pow+0x16a>
 800a2c8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a2cc:	e797      	b.n	800a1fe <pow+0xd6>
 800a2ce:	2d01      	cmp	r5, #1
 800a2d0:	eb74 0303 	sbcs.w	r3, r4, r3
 800a2d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a2d8:	bf34      	ite	cc
 800a2da:	2301      	movcc	r3, #1
 800a2dc:	2300      	movcs	r3, #0
 800a2de:	4296      	cmp	r6, r2
 800a2e0:	bf8c      	ite	hi
 800a2e2:	2600      	movhi	r6, #0
 800a2e4:	2601      	movls	r6, #1
 800a2e6:	42b3      	cmp	r3, r6
 800a2e8:	f000 809b 	beq.w	800a422 <pow+0x2fa>
 800a2ec:	b007      	add	sp, #28
 800a2ee:	ecbd 8b0a 	vpop	{d8-d12}
 800a2f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f6:	f000 b98f 	b.w	800a618 <__math_oflow>
 800a2fa:	f1bc 0f00 	cmp.w	ip, #0
 800a2fe:	d10b      	bne.n	800a318 <pow+0x1f0>
 800a300:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800a4e8 <pow+0x3c0>
 800a304:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a308:	ec53 2b17 	vmov	r2, r3, d7
 800a30c:	ee17 5a10 	vmov	r5, s14
 800a310:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a314:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800a318:	4b7b      	ldr	r3, [pc, #492]	; (800a508 <pow+0x3e0>)
 800a31a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a31e:	4423      	add	r3, r4
 800a320:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800a324:	1519      	asrs	r1, r3, #20
 800a326:	0d1b      	lsrs	r3, r3, #20
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	1ae7      	subs	r7, r4, r3
 800a32c:	4b77      	ldr	r3, [pc, #476]	; (800a50c <pow+0x3e4>)
 800a32e:	ee03 1a10 	vmov	s6, r1
 800a332:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800a336:	1e2e      	subs	r6, r5, #0
 800a338:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800a33c:	ec47 6b15 	vmov	d5, r6, r7
 800a340:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800a344:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a348:	ed93 7b00 	vldr	d7, [r3]
 800a34c:	ed93 5b02 	vldr	d5, [r3, #8]
 800a350:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800a354:	eea3 2b07 	vfma.f64	d2, d3, d7
 800a358:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800a35c:	ee36 4b02 	vadd.f64	d4, d6, d2
 800a360:	ee32 2b44 	vsub.f64	d2, d2, d4
 800a364:	eea3 7b05 	vfma.f64	d7, d3, d5
 800a368:	ed93 5b04 	vldr	d5, [r3, #16]
 800a36c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800a370:	ee37 7b02 	vadd.f64	d7, d7, d2
 800a374:	ee26 5b05 	vmul.f64	d5, d6, d5
 800a378:	ee26 0b05 	vmul.f64	d0, d6, d5
 800a37c:	ee34 8b00 	vadd.f64	d8, d4, d0
 800a380:	eeb0 9b40 	vmov.f64	d9, d0
 800a384:	ee34 4b48 	vsub.f64	d4, d4, d8
 800a388:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800a38c:	ee34 ab00 	vadd.f64	d10, d4, d0
 800a390:	ed93 5b06 	vldr	d5, [r3, #24]
 800a394:	ee26 bb00 	vmul.f64	d11, d6, d0
 800a398:	ee37 7b09 	vadd.f64	d7, d7, d9
 800a39c:	ed93 4b08 	vldr	d4, [r3, #32]
 800a3a0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800a3a4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800a3a8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a3ac:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800a3b0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800a3b4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a3b8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800a3bc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800a3c0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800a3c4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800a3c8:	eeab 7b05 	vfma.f64	d7, d11, d5
 800a3cc:	ee38 4b07 	vadd.f64	d4, d8, d7
 800a3d0:	ee21 6b04 	vmul.f64	d6, d1, d4
 800a3d4:	ee16 3a90 	vmov	r3, s13
 800a3d8:	eeb0 5b46 	vmov.f64	d5, d6
 800a3dc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800a3e0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800a3e4:	18b2      	adds	r2, r6, r2
 800a3e6:	2a3e      	cmp	r2, #62	; 0x3e
 800a3e8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800a3ec:	ee38 8b44 	vsub.f64	d8, d8, d4
 800a3f0:	ee38 8b07 	vadd.f64	d8, d8, d7
 800a3f4:	eea1 5b08 	vfma.f64	d5, d1, d8
 800a3f8:	d91b      	bls.n	800a432 <pow+0x30a>
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	da0b      	bge.n	800a416 <pow+0x2ee>
 800a3fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a402:	ee36 0b00 	vadd.f64	d0, d6, d0
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f aef9 	beq.w	800a1fe <pow+0xd6>
 800a40c:	eeb1 0b40 	vneg.f64	d0, d0
 800a410:	e6f5      	b.n	800a1fe <pow+0xd6>
 800a412:	2000      	movs	r0, #0
 800a414:	e780      	b.n	800a318 <pow+0x1f0>
 800a416:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800a41a:	d909      	bls.n	800a430 <pow+0x308>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f6bf af65 	bge.w	800a2ec <pow+0x1c4>
 800a422:	b007      	add	sp, #28
 800a424:	ecbd 8b0a 	vpop	{d8-d12}
 800a428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	f000 b8ec 	b.w	800a608 <__math_uflow>
 800a430:	2600      	movs	r6, #0
 800a432:	4937      	ldr	r1, [pc, #220]	; (800a510 <pow+0x3e8>)
 800a434:	ed91 4b02 	vldr	d4, [r1, #8]
 800a438:	ed91 3b00 	vldr	d3, [r1]
 800a43c:	eeb0 7b44 	vmov.f64	d7, d4
 800a440:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a444:	ee17 5a10 	vmov	r5, s14
 800a448:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a44c:	ed91 4b04 	vldr	d4, [r1, #16]
 800a450:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800a454:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a458:	ed91 4b06 	vldr	d4, [r1, #24]
 800a45c:	18dc      	adds	r4, r3, r3
 800a45e:	f104 030f 	add.w	r3, r4, #15
 800a462:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a466:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a46a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800a46e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800a472:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a476:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800a47a:	ed91 4b08 	vldr	d4, [r1, #32]
 800a47e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a482:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800a486:	eea5 4b03 	vfma.f64	d4, d5, d3
 800a48a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800a48e:	eea6 7b04 	vfma.f64	d7, d6, d4
 800a492:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a496:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800a49a:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800a49e:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800a4a2:	eea5 4b03 	vfma.f64	d4, d5, d3
 800a4a6:	1940      	adds	r0, r0, r5
 800a4a8:	2700      	movs	r7, #0
 800a4aa:	eb17 020c 	adds.w	r2, r7, ip
 800a4ae:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800a4b2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800a4b6:	2e00      	cmp	r6, #0
 800a4b8:	d176      	bne.n	800a5a8 <pow+0x480>
 800a4ba:	42bd      	cmp	r5, r7
 800a4bc:	db2a      	blt.n	800a514 <pow+0x3ec>
 800a4be:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800a4c2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	ec41 0b10 	vmov	d0, r0, r1
 800a4cc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a4d0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a4f0 <pow+0x3c8>
 800a4d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a4d8:	b007      	add	sp, #28
 800a4da:	ecbd 8b0a 	vpop	{d8-d12}
 800a4de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e2:	f000 b8d1 	b.w	800a688 <__math_check_oflow>
 800a4e6:	bf00      	nop
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	43300000 	.word	0x43300000
 800a4f0:	00000000 	.word	0x00000000
 800a4f4:	7f000000 	.word	0x7f000000
 800a4f8:	3ff00000 	.word	0x3ff00000
 800a4fc:	fff00000 	.word	0xfff00000
 800a500:	ffe00000 	.word	0xffe00000
 800a504:	7fe00000 	.word	0x7fe00000
 800a508:	c0196aab 	.word	0xc0196aab
 800a50c:	0800ad50 	.word	0x0800ad50
 800a510:	0800bd98 	.word	0x0800bd98
 800a514:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a518:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800a51c:	4610      	mov	r0, r2
 800a51e:	ec41 0b15 	vmov	d5, r0, r1
 800a522:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800a526:	ee27 6b05 	vmul.f64	d6, d7, d5
 800a52a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800a52e:	eeb0 4bc7 	vabs.f64	d4, d7
 800a532:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800a536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800a5b8 <pow+0x490>
 800a53e:	d52a      	bpl.n	800a596 <pow+0x46e>
 800a540:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a544:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800a550:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800a554:	bf58      	it	pl
 800a556:	eeb0 4b43 	vmovpl.f64	d4, d3
 800a55a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800a55e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800a562:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a566:	ee36 6b05 	vadd.f64	d6, d6, d5
 800a56a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800a56e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800a572:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57a:	d104      	bne.n	800a586 <pow+0x45e>
 800a57c:	4632      	mov	r2, r6
 800a57e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a582:	ec43 2b17 	vmov	d7, r2, r3
 800a586:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a58a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a58e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800a592:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a596:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a59a:	b007      	add	sp, #28
 800a59c:	ecbd 8b0a 	vpop	{d8-d12}
 800a5a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	f000 b867 	b.w	800a676 <__math_check_uflow>
 800a5a8:	ec43 2b10 	vmov	d0, r2, r3
 800a5ac:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a5b0:	e625      	b.n	800a1fe <pow+0xd6>
 800a5b2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800a5c0 <pow+0x498>
 800a5b6:	e622      	b.n	800a1fe <pow+0xd6>
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	00100000 	.word	0x00100000
	...

0800a5c8 <__ieee754_sqrt>:
 800a5c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a5cc:	4770      	bx	lr

0800a5ce <with_errno>:
 800a5ce:	b513      	push	{r0, r1, r4, lr}
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	ed8d 0b00 	vstr	d0, [sp]
 800a5d6:	f7fd fd33 	bl	8008040 <__errno>
 800a5da:	ed9d 0b00 	vldr	d0, [sp]
 800a5de:	6004      	str	r4, [r0, #0]
 800a5e0:	b002      	add	sp, #8
 800a5e2:	bd10      	pop	{r4, pc}

0800a5e4 <xflow>:
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	b158      	cbz	r0, 800a600 <xflow+0x1c>
 800a5e8:	eeb1 7b40 	vneg.f64	d7, d0
 800a5ec:	ed8d 7b00 	vstr	d7, [sp]
 800a5f0:	ed9d 7b00 	vldr	d7, [sp]
 800a5f4:	2022      	movs	r0, #34	; 0x22
 800a5f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a5fa:	b002      	add	sp, #8
 800a5fc:	f7ff bfe7 	b.w	800a5ce <with_errno>
 800a600:	eeb0 7b40 	vmov.f64	d7, d0
 800a604:	e7f2      	b.n	800a5ec <xflow+0x8>
	...

0800a608 <__math_uflow>:
 800a608:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a610 <__math_uflow+0x8>
 800a60c:	f7ff bfea 	b.w	800a5e4 <xflow>
 800a610:	00000000 	.word	0x00000000
 800a614:	10000000 	.word	0x10000000

0800a618 <__math_oflow>:
 800a618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a620 <__math_oflow+0x8>
 800a61c:	f7ff bfe2 	b.w	800a5e4 <xflow>
 800a620:	00000000 	.word	0x00000000
 800a624:	70000000 	.word	0x70000000

0800a628 <__math_divzero>:
 800a628:	b082      	sub	sp, #8
 800a62a:	2800      	cmp	r0, #0
 800a62c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a630:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800a634:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800a638:	ed8d 7b00 	vstr	d7, [sp]
 800a63c:	ed9d 0b00 	vldr	d0, [sp]
 800a640:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800a650 <__math_divzero+0x28>
 800a644:	2022      	movs	r0, #34	; 0x22
 800a646:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800a64a:	b002      	add	sp, #8
 800a64c:	f7ff bfbf 	b.w	800a5ce <with_errno>
	...

0800a658 <__math_invalid>:
 800a658:	eeb0 7b40 	vmov.f64	d7, d0
 800a65c:	eeb4 7b47 	vcmp.f64	d7, d7
 800a660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a664:	ee30 6b40 	vsub.f64	d6, d0, d0
 800a668:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800a66c:	d602      	bvs.n	800a674 <__math_invalid+0x1c>
 800a66e:	2021      	movs	r0, #33	; 0x21
 800a670:	f7ff bfad 	b.w	800a5ce <with_errno>
 800a674:	4770      	bx	lr

0800a676 <__math_check_uflow>:
 800a676:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67e:	d102      	bne.n	800a686 <__math_check_uflow+0x10>
 800a680:	2022      	movs	r0, #34	; 0x22
 800a682:	f7ff bfa4 	b.w	800a5ce <with_errno>
 800a686:	4770      	bx	lr

0800a688 <__math_check_oflow>:
 800a688:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a6a8 <__math_check_oflow+0x20>
 800a68c:	eeb0 7bc0 	vabs.f64	d7, d0
 800a690:	eeb4 7b46 	vcmp.f64	d7, d6
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	dd02      	ble.n	800a6a0 <__math_check_oflow+0x18>
 800a69a:	2022      	movs	r0, #34	; 0x22
 800a69c:	f7ff bf97 	b.w	800a5ce <with_errno>
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	ffffffff 	.word	0xffffffff
 800a6ac:	7fefffff 	.word	0x7fefffff

0800a6b0 <_init>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr

0800a6bc <_fini>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr
