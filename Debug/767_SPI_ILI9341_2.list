
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a570  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f78  0800a770  0800a770  0001a770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6e8  0800c6e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6e8  0800c6e8  0001c6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6f0  0800c6f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6f0  0800c6f0  0001c6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6f4  0800c6f4  0001c6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001e0  0800c8d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  0800c8d8  0002061c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019042  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040ea  00000000  00000000  00039293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120a  00000000  00000000  0003eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c211  00000000  00000000  0003fcaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001efbc  00000000  00000000  0006bebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106fed  00000000  00000000  0008ae77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000071b0  00000000  00000000  00191e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00199014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a758 	.word	0x0800a758

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a758 	.word	0x0800a758

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f002 fdf5 	bl	800323c <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000658:	f001 fac2 	bl	8001be0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f002 ff8f 	bl	8003590 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000678:	f001 fab2 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001fc 	.word	0x200001fc
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f003 fb33 	bl	8003d60 <HAL_GPIO_Init>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4bad      	ldr	r3, [pc, #692]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aac      	ldr	r2, [pc, #688]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4baa      	ldr	r3, [pc, #680]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4ba7      	ldr	r3, [pc, #668]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa6      	ldr	r2, [pc, #664]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aa0      	ldr	r2, [pc, #640]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a9a      	ldr	r2, [pc, #616]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b98      	ldr	r3, [pc, #608]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b95      	ldr	r3, [pc, #596]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a94      	ldr	r2, [pc, #592]	; (80009dc <MX_GPIO_Init+0x2cc>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b92      	ldr	r3, [pc, #584]	; (80009dc <MX_GPIO_Init+0x2cc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b8f      	ldr	r3, [pc, #572]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a8e      	ldr	r2, [pc, #568]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a88      	ldr	r2, [pc, #544]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a82      	ldr	r2, [pc, #520]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b80      	ldr	r3, [pc, #512]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	487d      	ldr	r0, [pc, #500]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 80007ec:	f003 fc7c 	bl	80040e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	487b      	ldr	r0, [pc, #492]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80007f8:	f003 fc76 	bl	80040e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4879      	ldr	r0, [pc, #484]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 8000802:	f003 fc71 	bl	80040e8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	4877      	ldr	r0, [pc, #476]	; (80009ec <MX_GPIO_Init+0x2dc>)
 800080e:	f003 fc6b 	bl	80040e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, stepMotor_Pin | dirMotor_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2118      	movs	r1, #24
 8000816:	4876      	ldr	r0, [pc, #472]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 8000818:	f003 fc66 	bl	80040e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 800081c:	2314      	movs	r3, #20
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	486c      	ldr	r0, [pc, #432]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 8000830:	f003 fa96 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 8000834:	2368      	movs	r3, #104	; 0x68
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4865      	ldr	r0, [pc, #404]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 800084c:	f003 fa88 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4861      	ldr	r0, [pc, #388]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000866:	f003 fa7b 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087a:	230b      	movs	r3, #11
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4859      	ldr	r0, [pc, #356]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000886:	f003 fa6b 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800088a:	2386      	movs	r3, #134	; 0x86
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4853      	ldr	r0, [pc, #332]	; (80009f4 <MX_GPIO_Init+0x2e4>)
 80008a6:	f003 fa5b 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4847      	ldr	r0, [pc, #284]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80008c8:	f003 fa4a 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80008cc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	483f      	ldr	r0, [pc, #252]	; (80009e4 <MX_GPIO_Init+0x2d4>)
 80008e6:	f003 fa3b 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4839      	ldr	r0, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 8000902:	f003 fa2d 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	4833      	ldr	r0, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 800091a:	f003 fa21 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 800091e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x2dc>)
 8000938:	f003 fa12 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = limitSwR_Pin | limitSwL_Pin;
 800093c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <MX_GPIO_Init+0x2e4>)
 8000952:	f003 fa05 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin PDPin */
	GPIO_InitStruct.Pin = swMotor1_Pin | swMotor2_Pin | swPush_Pin;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 800096a:	f003 f9f9 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin */
	GPIO_InitStruct.Pin = stepMotor_Pin | dirMotor_Pin;
 800096e:	2318      	movs	r3, #24
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 8000986:	f003 f9eb 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_GPIO_Init+0x2e8>)
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_GPIO_Init+0x2e0>)
 800099e:	f003 f9df 	bl	8003d60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80009a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	; (80009e8 <MX_GPIO_Init+0x2d8>)
 80009c0:	f003 f9ce 	bl	8003d60 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2101      	movs	r1, #1
 80009c8:	2017      	movs	r0, #23
 80009ca:	f003 f900 	bl	8003bce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ce:	2017      	movs	r0, #23
 80009d0:	f003 f919 	bl	8003c06 <HAL_NVIC_EnableIRQ>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	10110000 	.word	0x10110000

080009fc <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_I2C1_Init+0x78>)
 8000a04:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x7c>)
 8000a0a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a38:	f003 fb88 	bl	800414c <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000a42:	f001 f8cd 	bl	8001be0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a4a:	f003 fc0f 	bl	800426c <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a54:	f001 f8c4 	bl	8001be0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_I2C1_Init+0x74>)
 8000a5c:	f003 fc51 	bl	8004302 <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000a66:	f001 f8bb 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000244 	.word	0x20000244
 8000a74:	40005400 	.word	0x40005400
 8000a78:	00c0eaff 	.word	0x00c0eaff

08000a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x7c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d128      	bne.n	8000af0 <HAL_I2C_MspInit+0x74>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abc:	2312      	movs	r3, #18
 8000abe:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <HAL_I2C_MspInit+0x84>)
 8000ad4:	f003 f944 	bl	8003d60 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_I2C_MspInit+0x80>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020400 	.word	0x40020400

08000b04 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b08:	f3bf 8f4f 	dsb	sy
}
 8000b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0e:	f3bf 8f6f 	isb	sy
}
 8000b12:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy
}
 8000b26:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <SCB_EnableICache+0x48>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b34:	f3bf 8f4f 	dsb	sy
}
 8000b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3a:	f3bf 8f6f 	isb	sy
}
 8000b3e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5e:	f3bf 8f4f 	dsb	sy
}
 8000b62:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b6a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	0b5b      	lsrs	r3, r3, #13
 8000b70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b74:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b7e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	015a      	lsls	r2, r3, #5
 8000b84:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b88:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b8e:	4911      	ldr	r1, [pc, #68]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1e5a      	subs	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ef      	bne.n	8000b80 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	1e5a      	subs	r2, r3, #1
 8000ba4:	60fa      	str	r2, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1e5      	bne.n	8000b76 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000baa:	f3bf 8f4f 	dsb	sy
}
 8000bae:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <SCB_EnableDCache+0x84>)
 8000bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
}
 8000bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bc2:	f3bf 8f6f 	isb	sy
}
 8000bc6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000bdc:	f7ff ff92 	bl	8000b04 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000be0:	f7ff ffb6 	bl	8000b50 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000be4:	f002 fa9a 	bl	800311c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be8:	f000 f854 	bl	8000c94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bec:	f7ff fd90 	bl	8000710 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000bf0:	f001 fb00 	bl	80021f4 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8000bf4:	f001 f82c 	bl	8001c50 <MX_SPI5_Init>
	MX_TIM1_Init();
 8000bf8:	f001 f9f4 	bl	8001fe4 <MX_TIM1_Init>
	MX_RNG_Init();
 8000bfc:	f000 fff4 	bl	8001be8 <MX_RNG_Init>
	MX_I2C1_Init();
 8000c00:	f7ff fefc 	bl	80009fc <MX_I2C1_Init>
	MX_TIM2_Init();
 8000c04:	f001 fa42 	bl	800208c <MX_TIM2_Init>
	MX_ADC1_Init();
 8000c08:	f7ff fcf0 	bl	80005ec <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000c0c:	f001 fac2 	bl	8002194 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000c10:	f001 fe46 	bl	80028a0 <ILI9341_Init>
	ILI9341_Fill_Screen(WHITE);
 8000c14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c18:	f001 ffee 	bl	8002bf8 <ILI9341_Fill_Screen>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <main+0xb4>)
 8000c1e:	f005 f915 	bl	8005e4c <HAL_TIM_Base_Start_IT>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (playState == 0) {
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <main+0xb8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <main+0x58>
			state0();
 8000c2a:	f000 f98b 	bl	8000f44 <state0>
 8000c2e:	e7f8      	b.n	8000c22 <main+0x4a>
		} else if (playState == 1) {
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <main+0xb8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d102      	bne.n	8000c3e <main+0x66>
			state1();
 8000c38:	f000 f9ee 	bl	8001018 <state1>
 8000c3c:	e7f1      	b.n	8000c22 <main+0x4a>
		} else if (playState == 2) {
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <main+0xb8>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d102      	bne.n	8000c4c <main+0x74>
			state2();
 8000c46:	f000 fa83 	bl	8001150 <state2>
 8000c4a:	e7ea      	b.n	8000c22 <main+0x4a>
		} else if (playState == 3) {
 8000c4c:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <main+0xb8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d102      	bne.n	8000c5a <main+0x82>
			state3();
 8000c54:	f000 fbf6 	bl	8001444 <state3>
 8000c58:	e7e3      	b.n	8000c22 <main+0x4a>
		} else if (playState == 4) {
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <main+0xb8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d104      	bne.n	8000c6c <main+0x94>
			state4();
 8000c62:	f000 fd83 	bl	800176c <state4>
			play();
 8000c66:	f000 f8f3 	bl	8000e50 <play>
 8000c6a:	e7da      	b.n	8000c22 <main+0x4a>
		} else if (playState == 5) {
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <main+0xb8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d104      	bne.n	8000c7e <main+0xa6>
			state5();
 8000c74:	f000 fe04 	bl	8001880 <state5>
			play();
 8000c78:	f000 f8ea 	bl	8000e50 <play>
 8000c7c:	e7d1      	b.n	8000c22 <main+0x4a>
		} else if (playState == 6) {
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <main+0xb8>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d1cd      	bne.n	8000c22 <main+0x4a>
			state6();
 8000c86:	f000 ff2b 	bl	8001ae0 <state6>
		if (playState == 0) {
 8000c8a:	e7ca      	b.n	8000c22 <main+0x4a>
 8000c8c:	20000378 	.word	0x20000378
 8000c90:	2000029a 	.word	0x2000029a

08000c94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b8      	sub	sp, #224	; 0xe0
 8000c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c9e:	2234      	movs	r2, #52	; 0x34
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f007 f9cd 	bl	8008042 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ca8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2290      	movs	r2, #144	; 0x90
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f007 f9be 	bl	8008042 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000cc6:	f003 fb69 	bl	800439c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <SystemClock_Config+0x12c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <SystemClock_Config+0x130>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a37      	ldr	r2, [pc, #220]	; (8000dc4 <SystemClock_Config+0x130>)
 8000ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <SystemClock_Config+0x130>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d16:	2304      	movs	r3, #4
 8000d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000d1c:	23c8      	movs	r3, #200	; 0xc8
 8000d1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d28:	2309      	movs	r3, #9
 8000d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fb8f 	bl	800445c <HAL_RCC_OscConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xb4>
		Error_Handler();
 8000d44:	f000 ff4c 	bl	8001be0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000d48:	f003 fb38 	bl	80043bc <HAL_PWREx_EnableOverDrive>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xc2>
		Error_Handler();
 8000d52:	f000 ff45 	bl	8001be0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000d78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d7c:	2106      	movs	r1, #6
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fe1a 	bl	80049b8 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xfa>
		Error_Handler();
 8000d8a:	f000 ff29 	bl	8001be0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <SystemClock_Config+0x134>)
 8000d90:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 f82b 	bl	8004e04 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x124>
		Error_Handler();
 8000db4:	f000 ff14 	bl	8001be0 <Error_Handler>
	}
}
 8000db8:	bf00      	nop
 8000dba:	37e0      	adds	r7, #224	; 0xe0
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	00204180 	.word	0x00204180

08000dcc <doMotor>:

/* USER CODE BEGIN 4 */

void doMotor() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if (count - prevActionMotor > delayStep && stepsPerRevolution != 0) {
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <doMotor+0x6c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <doMotor+0x70>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <doMotor+0x74>)
 8000ddc:	8812      	ldrh	r2, [r2, #0]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d91f      	bls.n	8000e22 <doMotor+0x56>
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <doMotor+0x78>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d01b      	beq.n	8000e22 <doMotor+0x56>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, isHigh);
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <doMotor+0x7c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	2108      	movs	r1, #8
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <doMotor+0x80>)
 8000df4:	f003 f978 	bl	80040e8 <HAL_GPIO_WritePin>
		isHigh = abs(isHigh - 1);
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <doMotor+0x7c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfb8      	it	lt
 8000e02:	425b      	neglt	r3, r3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <doMotor+0x7c>)
 8000e08:	701a      	strb	r2, [r3, #0]
		prevActionMotor = count;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <doMotor+0x6c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <doMotor+0x70>)
 8000e10:	6013      	str	r3, [r2, #0]
		stepsPerRevolution--;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <doMotor+0x78>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <doMotor+0x78>)
 8000e1c:	701a      	strb	r2, [r3, #0]
	if (count - prevActionMotor > delayStep && stepsPerRevolution != 0) {
 8000e1e:	bf00      	nop
	} else if (stepsPerRevolution == 0) {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
	}
}
 8000e20:	e008      	b.n	8000e34 <doMotor+0x68>
	} else if (stepsPerRevolution == 0) {
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <doMotor+0x78>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d104      	bne.n	8000e34 <doMotor+0x68>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <doMotor+0x80>)
 8000e30:	f003 f95a 	bl	80040e8 <HAL_GPIO_WritePin>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000294 	.word	0x20000294
 8000e3c:	200002a0 	.word	0x200002a0
 8000e40:	20000000 	.word	0x20000000
 8000e44:	2000029c 	.word	0x2000029c
 8000e48:	200002a4 	.word	0x200002a4
 8000e4c:	40020c00 	.word	0x40020c00

08000e50 <play>:

void play() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000e56:	4833      	ldr	r0, [pc, #204]	; (8000f24 <play+0xd4>)
 8000e58:	f002 fa34 	bl	80032c4 <HAL_ADC_Start>
	while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000e5c:	bf00      	nop
 8000e5e:	2164      	movs	r1, #100	; 0x64
 8000e60:	4830      	ldr	r0, [pc, #192]	; (8000f24 <play+0xd4>)
 8000e62:	f002 fafd 	bl	8003460 <HAL_ADC_PollForConversion>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1f8      	bne.n	8000e5e <play+0xe>
		;
	adc_val = HAL_ADC_GetValue(&hadc1);
 8000e6c:	482d      	ldr	r0, [pc, #180]	; (8000f24 <play+0xd4>)
 8000e6e:	f002 fb82 	bl	8003576 <HAL_ADC_GetValue>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <play+0xd8>)
 8000e78:	801a      	strh	r2, [r3, #0]
	delayStep = (int) (((float) adc_val / 4095) * 2000) + 500;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <play+0xd8>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e86:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000f2c <play+0xdc>
 8000e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f30 <play+0xe0>
 8000e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <play+0xe4>)
 8000ea8:	801a      	strh	r2, [r3, #0]
	uint8_t readSw1 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4822      	ldr	r0, [pc, #136]	; (8000f38 <play+0xe8>)
 8000eae:	f003 f903 	bl	80040b8 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uint8_t readSw2 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <play+0xe8>)
 8000eba:	f003 f8fd 	bl	80040b8 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71bb      	strb	r3, [r7, #6]
	uint8_t readLimitSw1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec6:	481d      	ldr	r0, [pc, #116]	; (8000f3c <play+0xec>)
 8000ec8:	f003 f8f6 	bl	80040b8 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	717b      	strb	r3, [r7, #5]
	uint8_t readLimitSw2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	4819      	ldr	r0, [pc, #100]	; (8000f3c <play+0xec>)
 8000ed6:	f003 f8ef 	bl	80040b8 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	713b      	strb	r3, [r7, #4]
	if (readSw1 == 0 && readLimitSw1 != 1) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10a      	bne.n	8000efa <play+0xaa>
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d007      	beq.n	8000efa <play+0xaa>
		stepsPerRevolution = 8;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <play+0xf0>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <play+0xe8>)
 8000ef6:	f003 f8f7 	bl	80040e8 <HAL_GPIO_WritePin>
	}
	if (readSw2 == 0 && readLimitSw2 != 1) {
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10a      	bne.n	8000f16 <play+0xc6>
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d007      	beq.n	8000f16 <play+0xc6>
		stepsPerRevolution = 8;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <play+0xf0>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <play+0xe8>)
 8000f12:	f003 f8e9 	bl	80040e8 <HAL_GPIO_WritePin>
	}
	doMotor();
 8000f16:	f7ff ff59 	bl	8000dcc <doMotor>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200001fc 	.word	0x200001fc
 8000f28:	20000290 	.word	0x20000290
 8000f2c:	457ff000 	.word	0x457ff000
 8000f30:	44fa0000 	.word	0x44fa0000
 8000f34:	20000000 	.word	0x20000000
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	2000029c 	.word	0x2000029c

08000f44 <state0>:

void state0() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 fc4a 	bl	80027e4 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Hokey Hokey", 65, 35, BLACK, 3, WHITE);
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2303      	movs	r3, #3
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2223      	movs	r2, #35	; 0x23
 8000f5e:	2141      	movs	r1, #65	; 0x41
 8000f60:	4829      	ldr	r0, [pc, #164]	; (8001008 <state0+0xc4>)
 8000f62:	f001 fb3f 	bl	80025e4 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <state0+0xc8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d117      	bne.n	8000f9e <state0+0x5a>
		ILI9341_Draw_Rectangle(60, 70, 200, 120, RED);
 8000f6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2378      	movs	r3, #120	; 0x78
 8000f76:	22c8      	movs	r2, #200	; 0xc8
 8000f78:	2146      	movs	r1, #70	; 0x46
 8000f7a:	203c      	movs	r0, #60	; 0x3c
 8000f7c:	f001 ff3c 	bl	8002df8 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("PLAY", 105, 110, WHITE, 5, RED);
 8000f80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2305      	movs	r3, #5
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8e:	226e      	movs	r2, #110	; 0x6e
 8000f90:	2169      	movs	r1, #105	; 0x69
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <state0+0xcc>)
 8000f94:	f001 fb26 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <state0+0xc8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8000f9e:	f002 f8ad 	bl	80030fc <TP_Touchpad_Pressed>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02b      	beq.n	8001000 <state0+0xbc>
		uint16_t x_pos = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 ffe0 	bl	8002f78 <TP_Read_Coordinates>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d120      	bne.n	8001000 <state0+0xbc>
			y_pos = 240 - position_array[0];
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000fc4:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 70 && y_pos <= 190 && x_pos >= 60 && x_pos <= 260) {
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	2b45      	cmp	r3, #69	; 0x45
 8000fce:	d917      	bls.n	8001000 <state0+0xbc>
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	2bbe      	cmp	r3, #190	; 0xbe
 8000fd4:	d814      	bhi.n	8001000 <state0+0xbc>
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	2b3b      	cmp	r3, #59	; 0x3b
 8000fda:	d911      	bls.n	8001000 <state0+0xbc>
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fe2:	d80d      	bhi.n	8001000 <state0+0xbc>
				playState = 1;
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <state0+0xd0>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <state0+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8000ff0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ff4:	f002 f8fe 	bl	80031f4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 8000ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ffc:	f001 fdfc 	bl	8002bf8 <ILI9341_Fill_Screen>
			}
		}

	}
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	0800a770 	.word	0x0800a770
 800100c:	2000029b 	.word	0x2000029b
 8001010:	0800a77c 	.word	0x0800a77c
 8001014:	2000029a 	.word	0x2000029a

08001018 <state1>:
void state1() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 fbe0 	bl	80027e4 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Select Mode", 65, 35, BLACK, 3, WHITE);
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2303      	movs	r3, #3
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	2223      	movs	r2, #35	; 0x23
 8001032:	2141      	movs	r1, #65	; 0x41
 8001034:	4841      	ldr	r0, [pc, #260]	; (800113c <state1+0x124>)
 8001036:	f001 fad5 	bl	80025e4 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <state1+0x128>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d12c      	bne.n	800109c <state1+0x84>
		ILI9341_Draw_Rectangle(55, 80, 210, 50, RED);
 8001042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2332      	movs	r3, #50	; 0x32
 800104a:	22d2      	movs	r2, #210	; 0xd2
 800104c:	2150      	movs	r1, #80	; 0x50
 800104e:	2037      	movs	r0, #55	; 0x37
 8001050:	f001 fed2 	bl	8002df8 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("No time to limit", 67, 97, WHITE, 2, RED);
 8001054:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	2302      	movs	r3, #2
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001062:	2261      	movs	r2, #97	; 0x61
 8001064:	2143      	movs	r1, #67	; 0x43
 8001066:	4837      	ldr	r0, [pc, #220]	; (8001144 <state1+0x12c>)
 8001068:	f001 fabc 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(55, 145, 210, 50, RED);
 800106c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2332      	movs	r3, #50	; 0x32
 8001074:	22d2      	movs	r2, #210	; 0xd2
 8001076:	2191      	movs	r1, #145	; 0x91
 8001078:	2037      	movs	r0, #55	; 0x37
 800107a:	f001 febd 	bl	8002df8 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("limit time", 102, 162, WHITE, 2, RED);
 800107e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2302      	movs	r3, #2
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108c:	22a2      	movs	r2, #162	; 0xa2
 800108e:	2166      	movs	r1, #102	; 0x66
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <state1+0x130>)
 8001092:	f001 faa7 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <state1+0x128>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 800109c:	f002 f82e 	bl	80030fc <TP_Touchpad_Pressed>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d046      	beq.n	8001134 <state1+0x11c>
		uint16_t x_pos = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 ff61 	bl	8002f78 <TP_Read_Coordinates>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d13b      	bne.n	8001134 <state1+0x11c>
			y_pos = 240 - position_array[0];
 80010bc:	883b      	ldrh	r3, [r7, #0]
 80010be:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80010c2:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 80010c4:	887b      	ldrh	r3, [r7, #2]
 80010c6:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 80 && y_pos <= 130 && x_pos >= 55 && x_pos <= 265) {
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	2b4f      	cmp	r3, #79	; 0x4f
 80010cc:	d917      	bls.n	80010fe <state1+0xe6>
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	2b82      	cmp	r3, #130	; 0x82
 80010d2:	d814      	bhi.n	80010fe <state1+0xe6>
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	2b36      	cmp	r3, #54	; 0x36
 80010d8:	d911      	bls.n	80010fe <state1+0xe6>
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80010e0:	d20d      	bcs.n	80010fe <state1+0xe6>
				playState = 2;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <state1+0x134>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <state1+0x128>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 80010ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f2:	f002 f87f 	bl	80031f4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 80010f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010fa:	f001 fd7d 	bl	8002bf8 <ILI9341_Fill_Screen>
			}
			if (y_pos >= 145 && y_pos <= 195 && x_pos >= 55 && x_pos <= 265) {
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	2b90      	cmp	r3, #144	; 0x90
 8001102:	d917      	bls.n	8001134 <state1+0x11c>
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	2bc3      	cmp	r3, #195	; 0xc3
 8001108:	d814      	bhi.n	8001134 <state1+0x11c>
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2b36      	cmp	r3, #54	; 0x36
 800110e:	d911      	bls.n	8001134 <state1+0x11c>
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001116:	d20d      	bcs.n	8001134 <state1+0x11c>
				playState = 3;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <state1+0x134>)
 800111a:	2203      	movs	r2, #3
 800111c:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <state1+0x128>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8001124:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001128:	f002 f864 	bl	80031f4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 800112c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001130:	f001 fd62 	bl	8002bf8 <ILI9341_Fill_Screen>
			}
		}

	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800a784 	.word	0x0800a784
 8001140:	2000029b 	.word	0x2000029b
 8001144:	0800a790 	.word	0x0800a790
 8001148:	0800a7a4 	.word	0x0800a7a4
 800114c:	2000029a 	.word	0x2000029a

08001150 <state2>:

void state2() {
 8001150:	b580      	push	{r7, lr}
 8001152:	ed2d 8b02 	vpush	{d8}
 8001156:	b090      	sub	sp, #64	; 0x40
 8001158:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 800115a:	4bad      	ldr	r3, [pc, #692]	; (8001410 <state2+0x2c0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d14b      	bne.n	80011fa <state2+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 fb3e 	bl	80027e4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select max hp", 30, 35, BLACK, 3, WHITE);
 8001168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	2303      	movs	r3, #3
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	2223      	movs	r2, #35	; 0x23
 8001176:	211e      	movs	r1, #30
 8001178:	48a6      	ldr	r0, [pc, #664]	; (8001414 <state2+0x2c4>)
 800117a:	f001 fa33 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 800117e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2328      	movs	r3, #40	; 0x28
 8001186:	2264      	movs	r2, #100	; 0x64
 8001188:	21b4      	movs	r1, #180	; 0xb4
 800118a:	206e      	movs	r0, #110	; 0x6e
 800118c:	f001 fe34 	bl	8002df8 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 8001190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2303      	movs	r3, #3
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119e:	22bb      	movs	r2, #187	; 0xbb
 80011a0:	2175      	movs	r1, #117	; 0x75
 80011a2:	489d      	ldr	r0, [pc, #628]	; (8001418 <state2+0x2c8>)
 80011a4:	f001 fa1e 	bl	80025e4 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(70, 115, 30, RED);
 80011a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011ac:	221e      	movs	r2, #30
 80011ae:	2173      	movs	r1, #115	; 0x73
 80011b0:	2046      	movs	r0, #70	; 0x46
 80011b2:	f001 f8f4 	bl	800239e <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 48, 108, WHITE, 2, RED);
 80011b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	2302      	movs	r3, #2
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c4:	226c      	movs	r2, #108	; 0x6c
 80011c6:	2130      	movs	r1, #48	; 0x30
 80011c8:	4894      	ldr	r0, [pc, #592]	; (800141c <state2+0x2cc>)
 80011ca:	f001 fa0b 	bl	80025e4 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 80011ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011d2:	221e      	movs	r2, #30
 80011d4:	2173      	movs	r1, #115	; 0x73
 80011d6:	20fa      	movs	r0, #250	; 0xfa
 80011d8:	f001 f8e1 	bl	800239e <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 80011dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2302      	movs	r3, #2
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ea:	226c      	movs	r2, #108	; 0x6c
 80011ec:	21f3      	movs	r1, #243	; 0xf3
 80011ee:	488c      	ldr	r0, [pc, #560]	; (8001420 <state2+0x2d0>)
 80011f0:	f001 f9f8 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80011f4:	4b86      	ldr	r3, [pc, #536]	; (8001410 <state2+0x2c0>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 80011fa:	4b8a      	ldr	r3, [pc, #552]	; (8001424 <state2+0x2d4>)
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <state2+0x2d8>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d03c      	beq.n	8001280 <state2+0x130>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2350      	movs	r3, #80	; 0x50
 800120c:	2250      	movs	r2, #80	; 0x50
 800120e:	214b      	movs	r1, #75	; 0x4b
 8001210:	2078      	movs	r0, #120	; 0x78
 8001212:	f001 fdf1 	bl	8002df8 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 8001216:	4b84      	ldr	r3, [pc, #528]	; (8001428 <state2+0x2d8>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4982      	ldr	r1, [pc, #520]	; (800142c <state2+0x2dc>)
 8001222:	4618      	mov	r0, r3
 8001224:	f006 feaa 	bl	8007f7c <siprintf>
		uint8_t x = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (strlen(str) == 1) {
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f854 	bl	80002e0 <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10d      	bne.n	800125a <state2+0x10a>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 800123e:	2300      	movs	r3, #0
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2304      	movs	r3, #4
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	218a      	movs	r1, #138	; 0x8a
 800124e:	4878      	ldr	r0, [pc, #480]	; (8001430 <state2+0x2e0>)
 8001250:	f001 f9c8 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 8001254:	231b      	movs	r3, #27
 8001256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 800125a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800125e:	3b76      	subs	r3, #118	; 0x76
 8001260:	b2d9      	uxtb	r1, r3
 8001262:	f107 001c 	add.w	r0, r7, #28
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2304      	movs	r3, #4
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001272:	2264      	movs	r2, #100	; 0x64
 8001274:	f001 f9b6 	bl	80025e4 <ILI9341_Draw_Text>
		lastHp = Hp;
 8001278:	4b6b      	ldr	r3, [pc, #428]	; (8001428 <state2+0x2d8>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b69      	ldr	r3, [pc, #420]	; (8001424 <state2+0x2d4>)
 800127e:	801a      	strh	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8001280:	f001 ff3c 	bl	80030fc <TP_Touchpad_Pressed>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80bc 	beq.w	8001404 <state2+0x2b4>
		uint16_t x_pos = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t y_pos = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f001 fe6d 	bl	8002f78 <TP_Read_Coordinates>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 80af 	bne.w	8001404 <state2+0x2b4>
			y_pos = 240 - position_array[0];
 80012a6:	8b3b      	ldrh	r3, [r7, #24]
 80012a8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80012ac:	867b      	strh	r3, [r7, #50]	; 0x32
			x_pos = position_array[1];
 80012ae:	8b7b      	ldrh	r3, [r7, #26]
 80012b0:	86bb      	strh	r3, [r7, #52]	; 0x34
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 80012b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012b4:	2bb3      	cmp	r3, #179	; 0xb3
 80012b6:	d934      	bls.n	8001322 <state2+0x1d2>
 80012b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80012ba:	2bdc      	cmp	r3, #220	; 0xdc
 80012bc:	d831      	bhi.n	8001322 <state2+0x1d2>
 80012be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c0:	2b6d      	cmp	r3, #109	; 0x6d
 80012c2:	d92e      	bls.n	8001322 <state2+0x1d2>
 80012c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012c6:	2bd2      	cmp	r3, #210	; 0xd2
 80012c8:	d82b      	bhi.n	8001322 <state2+0x1d2>
				playState = 4;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <state2+0x2e4>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <state2+0x2c0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
				lastHp = -1;
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <state2+0x2d4>)
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	801a      	strh	r2, [r3, #0]
				mode = 1;
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <state2+0x2e8>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
				char str[20];
				sprintf(str, "1 %d", Hp);
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <state2+0x2d8>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4953      	ldr	r1, [pc, #332]	; (800143c <state2+0x2ec>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fe44 	bl	8007f7c <siprintf>
				while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 80012f4:	bf00      	nop
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <state2+0x2f0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	d1f8      	bne.n	80012f6 <state2+0x1a6>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ffea 	bl	80002e0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	1d39      	adds	r1, r7, #4
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	484a      	ldr	r0, [pc, #296]	; (8001440 <state2+0x2f0>)
 8001316:	f005 fa5d 	bl	80067d4 <HAL_UART_Transmit>
				ILI9341_Fill_Screen(WHITE);
 800131a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800131e:	f001 fc6b 	bl	8002bf8 <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 70, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001322:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001324:	3b46      	subs	r3, #70	; 0x46
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800132e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001332:	eeb0 0b47 	vmov.f64	d0, d7
 8001336:	f008 ff4b 	bl	800a1d0 <pow>
 800133a:	eeb0 8b40 	vmov.f64	d8, d0
 800133e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001340:	3b73      	subs	r3, #115	; 0x73
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800134a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800134e:	eeb0 0b47 	vmov.f64	d0, d7
 8001352:	f008 ff3d 	bl	800a1d0 <pow>
 8001356:	eeb0 7b40 	vmov.f64	d7, d0
 800135a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800135e:	eeb0 0b47 	vmov.f64	d0, d7
 8001362:	f008 fee1 	bl	800a128 <sqrt>
 8001366:	eeb0 7b40 	vmov.f64	d7, d0
 800136a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800136e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d80c      	bhi.n	8001392 <state2+0x242>
				if (Hp > 1) {
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <state2+0x2d8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d908      	bls.n	8001392 <state2+0x242>
					Hp--;
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <state2+0x2d8>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <state2+0x2d8>)
 800138a:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 800138c:	2064      	movs	r0, #100	; 0x64
 800138e:	f001 ff31 	bl	80031f4 <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001392:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001394:	3bfa      	subs	r3, #250	; 0xfa
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800139e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013a2:	eeb0 0b47 	vmov.f64	d0, d7
 80013a6:	f008 ff13 	bl	800a1d0 <pow>
 80013aa:	eeb0 8b40 	vmov.f64	d8, d0
 80013ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013b0:	3b73      	subs	r3, #115	; 0x73
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013be:	eeb0 0b47 	vmov.f64	d0, d7
 80013c2:	f008 ff05 	bl	800a1d0 <pow>
 80013c6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ca:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013ce:	eeb0 0b47 	vmov.f64	d0, d7
 80013d2:	f008 fea9 	bl	800a128 <sqrt>
 80013d6:	eeb0 7b40 	vmov.f64	d7, d0
 80013da:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80013de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d900      	bls.n	80013ea <state2+0x29a>
				}
			}
		}

	}
}
 80013e8:	e00c      	b.n	8001404 <state2+0x2b4>
				if (Hp < 99) {
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <state2+0x2d8>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2b62      	cmp	r3, #98	; 0x62
 80013f0:	d808      	bhi.n	8001404 <state2+0x2b4>
					Hp++;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <state2+0x2d8>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <state2+0x2d8>)
 80013fc:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	f001 fef8 	bl	80031f4 <HAL_Delay>
}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	ecbd 8b02 	vpop	{d8}
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000029b 	.word	0x2000029b
 8001414:	0800a7b0 	.word	0x0800a7b0
 8001418:	0800a7c0 	.word	0x0800a7c0
 800141c:	0800a7c8 	.word	0x0800a7c8
 8001420:	0800a7d0 	.word	0x0800a7d0
 8001424:	200002a6 	.word	0x200002a6
 8001428:	20000002 	.word	0x20000002
 800142c:	0800a7d4 	.word	0x0800a7d4
 8001430:	0800a7d8 	.word	0x0800a7d8
 8001434:	2000029a 	.word	0x2000029a
 8001438:	20000298 	.word	0x20000298
 800143c:	0800a7dc 	.word	0x0800a7dc
 8001440:	200003c4 	.word	0x200003c4

08001444 <state3>:
void state3() {
 8001444:	b580      	push	{r7, lr}
 8001446:	ed2d 8b02 	vpush	{d8}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 800144e:	4bb7      	ldr	r3, [pc, #732]	; (800172c <state3+0x2e8>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d14b      	bne.n	80014ee <state3+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001456:	2001      	movs	r0, #1
 8001458:	f001 f9c4 	bl	80027e4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select time to end", 40, 35, BLACK, 2, WHITE);
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2302      	movs	r3, #2
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2223      	movs	r2, #35	; 0x23
 800146a:	2128      	movs	r1, #40	; 0x28
 800146c:	48b0      	ldr	r0, [pc, #704]	; (8001730 <state3+0x2ec>)
 800146e:	f001 f8b9 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 8001472:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2328      	movs	r3, #40	; 0x28
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	21b4      	movs	r1, #180	; 0xb4
 800147e:	206e      	movs	r0, #110	; 0x6e
 8001480:	f001 fcba 	bl	8002df8 <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 8001484:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2303      	movs	r3, #3
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001492:	22bb      	movs	r2, #187	; 0xbb
 8001494:	2175      	movs	r1, #117	; 0x75
 8001496:	48a7      	ldr	r0, [pc, #668]	; (8001734 <state3+0x2f0>)
 8001498:	f001 f8a4 	bl	80025e4 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(55, 115, 30, RED);
 800149c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014a0:	221e      	movs	r2, #30
 80014a2:	2173      	movs	r1, #115	; 0x73
 80014a4:	2037      	movs	r0, #55	; 0x37
 80014a6:	f000 ff7a 	bl	800239e <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 33, 108, WHITE, 2, RED);
 80014aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	2302      	movs	r3, #2
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b8:	226c      	movs	r2, #108	; 0x6c
 80014ba:	2121      	movs	r1, #33	; 0x21
 80014bc:	489e      	ldr	r0, [pc, #632]	; (8001738 <state3+0x2f4>)
 80014be:	f001 f891 	bl	80025e4 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 80014c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014c6:	221e      	movs	r2, #30
 80014c8:	2173      	movs	r1, #115	; 0x73
 80014ca:	20fa      	movs	r0, #250	; 0xfa
 80014cc:	f000 ff67 	bl	800239e <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 80014d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2302      	movs	r3, #2
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014de:	226c      	movs	r2, #108	; 0x6c
 80014e0:	21f3      	movs	r1, #243	; 0xf3
 80014e2:	4896      	ldr	r0, [pc, #600]	; (800173c <state3+0x2f8>)
 80014e4:	f001 f87e 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80014e8:	4b90      	ldr	r3, [pc, #576]	; (800172c <state3+0x2e8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
	}
	if (lastCountPlayTime != countPlayTime) {
 80014ee:	4b94      	ldr	r3, [pc, #592]	; (8001740 <state3+0x2fc>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <state3+0x300>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d046      	beq.n	8001588 <state3+0x144>
		char str[20];
		ILI9341_Draw_Rectangle(93, 75, 122, 80, BLACK);
 80014fa:	2300      	movs	r3, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2350      	movs	r3, #80	; 0x50
 8001500:	227a      	movs	r2, #122	; 0x7a
 8001502:	214b      	movs	r1, #75	; 0x4b
 8001504:	205d      	movs	r0, #93	; 0x5d
 8001506:	f001 fc77 	bl	8002df8 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", countPlayTime);
 800150a:	4b8e      	ldr	r3, [pc, #568]	; (8001744 <state3+0x300>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	498d      	ldr	r1, [pc, #564]	; (8001748 <state3+0x304>)
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fd31 	bl	8007f7c <siprintf>
		uint8_t x = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (strlen(str) == 1) {
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fedb 	bl	80002e0 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10d      	bne.n	800154c <state3+0x108>
			ILI9341_Draw_Text("0", 105, 100, WHITE, 4, BLACK);
 8001530:	2300      	movs	r3, #0
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2304      	movs	r3, #4
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153c:	2264      	movs	r2, #100	; 0x64
 800153e:	2169      	movs	r1, #105	; 0x69
 8001540:	4882      	ldr	r0, [pc, #520]	; (800174c <state3+0x308>)
 8001542:	f001 f84f 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 8001546:	231b      	movs	r3, #27
 8001548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		ILI9341_Draw_Text(str, 105 + x, 100, WHITE, 4, BLACK);
 800154c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001550:	3369      	adds	r3, #105	; 0x69
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	f107 001c 	add.w	r0, r7, #28
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2304      	movs	r3, #4
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001564:	2264      	movs	r2, #100	; 0x64
 8001566:	f001 f83d 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("min", 160, 105, WHITE, 3, BLACK);
 800156a:	2300      	movs	r3, #0
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	2303      	movs	r3, #3
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001576:	2269      	movs	r2, #105	; 0x69
 8001578:	21a0      	movs	r1, #160	; 0xa0
 800157a:	4875      	ldr	r0, [pc, #468]	; (8001750 <state3+0x30c>)
 800157c:	f001 f832 	bl	80025e4 <ILI9341_Draw_Text>
		lastCountPlayTime = countPlayTime;
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <state3+0x300>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6e      	ldr	r2, [pc, #440]	; (8001740 <state3+0x2fc>)
 8001586:	6013      	str	r3, [r2, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8001588:	f001 fdb8 	bl	80030fc <TP_Touchpad_Pressed>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80c5 	beq.w	800171e <state3+0x2da>
		uint16_t x_pos = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint16_t y_pos = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	867b      	strh	r3, [r7, #50]	; 0x32
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fce9 	bl	8002f78 <TP_Read_Coordinates>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	f040 80b8 	bne.w	800171e <state3+0x2da>
			y_pos = 240 - position_array[0];
 80015ae:	8b3b      	ldrh	r3, [r7, #24]
 80015b0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80015b4:	867b      	strh	r3, [r7, #50]	; 0x32
			x_pos = position_array[1];
 80015b6:	8b7b      	ldrh	r3, [r7, #26]
 80015b8:	86bb      	strh	r3, [r7, #52]	; 0x34
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 80015ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80015bc:	2bb3      	cmp	r3, #179	; 0xb3
 80015be:	d93f      	bls.n	8001640 <state3+0x1fc>
 80015c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80015c2:	2bdc      	cmp	r3, #220	; 0xdc
 80015c4:	d83c      	bhi.n	8001640 <state3+0x1fc>
 80015c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015c8:	2b6d      	cmp	r3, #109	; 0x6d
 80015ca:	d939      	bls.n	8001640 <state3+0x1fc>
 80015cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015ce:	2bd2      	cmp	r3, #210	; 0xd2
 80015d0:	d836      	bhi.n	8001640 <state3+0x1fc>
				playState = 5;
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <state3+0x310>)
 80015d4:	2205      	movs	r2, #5
 80015d6:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80015d8:	4b54      	ldr	r3, [pc, #336]	; (800172c <state3+0x2e8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				Hp = 0;
 80015de:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <state3+0x314>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
				lastHp = -1;
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <state3+0x318>)
 80015e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ea:	801a      	strh	r2, [r3, #0]
				countPlayTime = countPlayTime * 60;
 80015ec:	4b55      	ldr	r3, [pc, #340]	; (8001744 <state3+0x300>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b52      	ldr	r3, [pc, #328]	; (8001744 <state3+0x300>)
 80015fc:	601a      	str	r2, [r3, #0]
				mode = 2;
 80015fe:	4b58      	ldr	r3, [pc, #352]	; (8001760 <state3+0x31c>)
 8001600:	2202      	movs	r2, #2
 8001602:	701a      	strb	r2, [r3, #0]
				char str[20];
				sprintf(str, "2 %d", countPlayTime);
 8001604:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <state3+0x300>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4956      	ldr	r1, [pc, #344]	; (8001764 <state3+0x320>)
 800160c:	4618      	mov	r0, r3
 800160e:	f006 fcb5 	bl	8007f7c <siprintf>
				while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 8001612:	bf00      	nop
 8001614:	4b54      	ldr	r3, [pc, #336]	; (8001768 <state3+0x324>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	2b40      	cmp	r3, #64	; 0x40
 8001620:	d1f8      	bne.n	8001614 <state3+0x1d0>
				}
				HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fe5b 	bl	80002e0 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	1d39      	adds	r1, r7, #4
 8001630:	2364      	movs	r3, #100	; 0x64
 8001632:	484d      	ldr	r0, [pc, #308]	; (8001768 <state3+0x324>)
 8001634:	f005 f8ce 	bl	80067d4 <HAL_UART_Transmit>
				ILI9341_Fill_Screen(WHITE);
 8001638:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800163c:	f001 fadc 	bl	8002bf8 <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 55, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001640:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001642:	3b37      	subs	r3, #55	; 0x37
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001650:	eeb0 0b47 	vmov.f64	d0, d7
 8001654:	f008 fdbc 	bl	800a1d0 <pow>
 8001658:	eeb0 8b40 	vmov.f64	d8, d0
 800165c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800165e:	3b73      	subs	r3, #115	; 0x73
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001668:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800166c:	eeb0 0b47 	vmov.f64	d0, d7
 8001670:	f008 fdae 	bl	800a1d0 <pow>
 8001674:	eeb0 7b40 	vmov.f64	d7, d0
 8001678:	ee38 7b07 	vadd.f64	d7, d8, d7
 800167c:	eeb0 0b47 	vmov.f64	d0, d7
 8001680:	f008 fd52 	bl	800a128 <sqrt>
 8001684:	eeb0 7b40 	vmov.f64	d7, d0
 8001688:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800168c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d80b      	bhi.n	80016ae <state3+0x26a>
				if (countPlayTime > 1) {
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <state3+0x300>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d907      	bls.n	80016ae <state3+0x26a>
					countPlayTime--;
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <state3+0x300>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <state3+0x300>)
 80016a6:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 80016a8:	2064      	movs	r0, #100	; 0x64
 80016aa:	f001 fda3 	bl	80031f4 <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 80016ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80016b0:	3bfa      	subs	r3, #250	; 0xfa
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016ba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016be:	eeb0 0b47 	vmov.f64	d0, d7
 80016c2:	f008 fd85 	bl	800a1d0 <pow>
 80016c6:	eeb0 8b40 	vmov.f64	d8, d0
 80016ca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80016cc:	3b73      	subs	r3, #115	; 0x73
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80016da:	eeb0 0b47 	vmov.f64	d0, d7
 80016de:	f008 fd77 	bl	800a1d0 <pow>
 80016e2:	eeb0 7b40 	vmov.f64	d7, d0
 80016e6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80016ea:	eeb0 0b47 	vmov.f64	d0, d7
 80016ee:	f008 fd1b 	bl	800a128 <sqrt>
 80016f2:	eeb0 7b40 	vmov.f64	d7, d0
 80016f6:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80016fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d900      	bls.n	8001706 <state3+0x2c2>
				}
			}
		}

	}
}
 8001704:	e00b      	b.n	800171e <state3+0x2da>
				if (countPlayTime < 99) {
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <state3+0x300>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b62      	cmp	r3, #98	; 0x62
 800170c:	d807      	bhi.n	800171e <state3+0x2da>
					countPlayTime++;
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <state3+0x300>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <state3+0x300>)
 8001716:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 8001718:	2064      	movs	r0, #100	; 0x64
 800171a:	f001 fd6b 	bl	80031f4 <HAL_Delay>
}
 800171e:	bf00      	nop
 8001720:	3738      	adds	r7, #56	; 0x38
 8001722:	46bd      	mov	sp, r7
 8001724:	ecbd 8b02 	vpop	{d8}
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000029b 	.word	0x2000029b
 8001730:	0800a7e4 	.word	0x0800a7e4
 8001734:	0800a7c0 	.word	0x0800a7c0
 8001738:	0800a7c8 	.word	0x0800a7c8
 800173c:	0800a7d0 	.word	0x0800a7d0
 8001740:	200002a8 	.word	0x200002a8
 8001744:	20000004 	.word	0x20000004
 8001748:	0800a7d4 	.word	0x0800a7d4
 800174c:	0800a7d8 	.word	0x0800a7d8
 8001750:	0800a7f8 	.word	0x0800a7f8
 8001754:	2000029a 	.word	0x2000029a
 8001758:	20000002 	.word	0x20000002
 800175c:	200002a6 	.word	0x200002a6
 8001760:	20000298 	.word	0x20000298
 8001764:	0800a7fc 	.word	0x0800a7fc
 8001768:	200003c4 	.word	0x200003c4

0800176c <state4>:
void state4() {
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <state4+0xec>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d110      	bne.n	800179c <state4+0x30>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800177a:	2001      	movs	r0, #1
 800177c:	f001 f832 	bl	80027e4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("your hp", 100, 35, BLACK, 3, WHITE);
 8001780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2303      	movs	r3, #3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	2223      	movs	r2, #35	; 0x23
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	4832      	ldr	r0, [pc, #200]	; (800185c <state4+0xf0>)
 8001792:	f000 ff27 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <state4+0xec>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <state4+0xf4>)
 800179e:	881a      	ldrh	r2, [r3, #0]
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <state4+0xf8>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d036      	beq.n	8001816 <state4+0xaa>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 80017a8:	2300      	movs	r3, #0
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2350      	movs	r3, #80	; 0x50
 80017ae:	2250      	movs	r2, #80	; 0x50
 80017b0:	214b      	movs	r1, #75	; 0x4b
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f001 fb20 	bl	8002df8 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <state4+0xf8>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	463b      	mov	r3, r7
 80017c0:	4929      	ldr	r1, [pc, #164]	; (8001868 <state4+0xfc>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fbda 	bl	8007f7c <siprintf>
		uint8_t x = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
		if (strlen(str) == 1) {
 80017cc:	463b      	mov	r3, r7
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd86 	bl	80002e0 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10c      	bne.n	80017f4 <state4+0x88>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 80017da:	2300      	movs	r3, #0
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2304      	movs	r3, #4
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e6:	2264      	movs	r2, #100	; 0x64
 80017e8:	218a      	movs	r1, #138	; 0x8a
 80017ea:	4820      	ldr	r0, [pc, #128]	; (800186c <state4+0x100>)
 80017ec:	f000 fefa 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 80017f0:	231b      	movs	r3, #27
 80017f2:	75fb      	strb	r3, [r7, #23]
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	3b76      	subs	r3, #118	; 0x76
 80017f8:	b2d9      	uxtb	r1, r3
 80017fa:	4638      	mov	r0, r7
 80017fc:	2300      	movs	r3, #0
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2304      	movs	r3, #4
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001808:	2264      	movs	r2, #100	; 0x64
 800180a:	f000 feeb 	bl	80025e4 <ILI9341_Draw_Text>
		lastHp = Hp;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <state4+0xf8>)
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <state4+0xf4>)
 8001814:	801a      	strh	r2, [r3, #0]
	}
	if (Hp <= 0) {
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <state4+0xf8>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d117      	bne.n	800184e <state4+0xe2>
		while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 800181e:	bf00      	nop
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <state4+0x104>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	2b40      	cmp	r3, #64	; 0x40
 800182c:	d1f8      	bne.n	8001820 <state4+0xb4>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*) "e", 1, 100);
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	2201      	movs	r2, #1
 8001832:	4910      	ldr	r1, [pc, #64]	; (8001874 <state4+0x108>)
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <state4+0x104>)
 8001836:	f004 ffcd 	bl	80067d4 <HAL_UART_Transmit>
		ILI9341_Fill_Screen(WHITE);
 800183a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800183e:	f001 f9db 	bl	8002bf8 <ILI9341_Fill_Screen>
		pWin = 2;
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <state4+0x10c>)
 8001844:	2202      	movs	r2, #2
 8001846:	701a      	strb	r2, [r3, #0]
		playState = 6;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <state4+0x110>)
 800184a:	2206      	movs	r2, #6
 800184c:	701a      	strb	r2, [r3, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000029b 	.word	0x2000029b
 800185c:	0800a804 	.word	0x0800a804
 8001860:	200002a6 	.word	0x200002a6
 8001864:	20000002 	.word	0x20000002
 8001868:	0800a7d4 	.word	0x0800a7d4
 800186c:	0800a7d8 	.word	0x0800a7d8
 8001870:	200003c4 	.word	0x200003c4
 8001874:	0800a80c 	.word	0x0800a80c
 8001878:	20000299 	.word	0x20000299
 800187c:	2000029a 	.word	0x2000029a

08001880 <state5>:
void state5() {
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <state5+0x228>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d11b      	bne.n	80018c6 <state5+0x46>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 ffa8 	bl	80027e4 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("time", 125, 35, BLACK, 3, WHITE);
 8001894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	2303      	movs	r3, #3
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	2223      	movs	r2, #35	; 0x23
 80018a2:	217d      	movs	r1, #125	; 0x7d
 80018a4:	4881      	ldr	r0, [pc, #516]	; (8001aac <state5+0x22c>)
 80018a6:	f000 fe9d 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("your score", 70, 135, BLACK, 3, WHITE);
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2303      	movs	r3, #3
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2287      	movs	r2, #135	; 0x87
 80018b8:	2146      	movs	r1, #70	; 0x46
 80018ba:	487d      	ldr	r0, [pc, #500]	; (8001ab0 <state5+0x230>)
 80018bc:	f000 fe92 	bl	80025e4 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <state5+0x228>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
	}
	if (lastCountPlayTime != countPlayTime) {
 80018c6:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <state5+0x234>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <state5+0x238>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	f000 8091 	beq.w	80019f6 <state5+0x176>
		uint8_t min = countPlayTime / 60;
 80018d4:	4b78      	ldr	r3, [pc, #480]	; (8001ab8 <state5+0x238>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a78      	ldr	r2, [pc, #480]	; (8001abc <state5+0x23c>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t sec = countPlayTime - (((int) (countPlayTime / 60)) * 60);
 80018e4:	4b74      	ldr	r3, [pc, #464]	; (8001ab8 <state5+0x238>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <state5+0x238>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4973      	ldr	r1, [pc, #460]	; (8001abc <state5+0x23c>)
 80018f0:	fba1 1303 	umull	r1, r3, r1, r3
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	0109      	lsls	r1, r1, #4
 80018fc:	1acb      	subs	r3, r1, r3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	b2db      	uxtb	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		char str[20];
		ILI9341_Draw_Rectangle(75, 60, 170, 40, BLACK);
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2328      	movs	r3, #40	; 0x28
 800190e:	22aa      	movs	r2, #170	; 0xaa
 8001910:	213c      	movs	r1, #60	; 0x3c
 8001912:	204b      	movs	r0, #75	; 0x4b
 8001914:	f001 fa70 	bl	8002df8 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", min);
 8001918:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4967      	ldr	r1, [pc, #412]	; (8001ac0 <state5+0x240>)
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fb2a 	bl	8007f7c <siprintf>
		uint8_t x = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (strlen(str) == 1) {
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fcd4 	bl	80002e0 <strlen>
 8001938:	4603      	mov	r3, r0
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10d      	bne.n	800195a <state5+0xda>
			ILI9341_Draw_Text("0", 108, 62, WHITE, 4, BLACK);
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2304      	movs	r3, #4
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	223e      	movs	r2, #62	; 0x3e
 800194c:	216c      	movs	r1, #108	; 0x6c
 800194e:	485d      	ldr	r0, [pc, #372]	; (8001ac4 <state5+0x244>)
 8001950:	f000 fe48 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 8001954:	231b      	movs	r3, #27
 8001956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		ILI9341_Draw_Text(str, 108 + x, 62, WHITE, 4, BLACK);
 800195a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800195e:	336c      	adds	r3, #108	; 0x6c
 8001960:	b2d9      	uxtb	r1, r3
 8001962:	f107 0018 	add.w	r0, r7, #24
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2304      	movs	r3, #4
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	223e      	movs	r2, #62	; 0x3e
 8001974:	f000 fe36 	bl	80025e4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(":", 162, 62, WHITE, 4, BLACK);
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2304      	movs	r3, #4
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	223e      	movs	r2, #62	; 0x3e
 8001986:	21a2      	movs	r1, #162	; 0xa2
 8001988:	484f      	ldr	r0, [pc, #316]	; (8001ac8 <state5+0x248>)
 800198a:	f000 fe2b 	bl	80025e4 <ILI9341_Draw_Text>
		sprintf(str, "%d", sec);
 800198e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	494a      	ldr	r1, [pc, #296]	; (8001ac0 <state5+0x240>)
 8001998:	4618      	mov	r0, r3
 800199a:	f006 faef 	bl	8007f7c <siprintf>
		x = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (strlen(str) == 1) {
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc99 	bl	80002e0 <strlen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10d      	bne.n	80019d0 <state5+0x150>
			ILI9341_Draw_Text("0", 173, 62, WHITE, 4, BLACK);
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2304      	movs	r3, #4
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c0:	223e      	movs	r2, #62	; 0x3e
 80019c2:	21ad      	movs	r1, #173	; 0xad
 80019c4:	483f      	ldr	r0, [pc, #252]	; (8001ac4 <state5+0x244>)
 80019c6:	f000 fe0d 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 80019ca:	231b      	movs	r3, #27
 80019cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		ILI9341_Draw_Text(str, 173 + x, 62, WHITE, 4, BLACK);
 80019d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019d4:	3b53      	subs	r3, #83	; 0x53
 80019d6:	b2d9      	uxtb	r1, r3
 80019d8:	f107 0018 	add.w	r0, r7, #24
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2304      	movs	r3, #4
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	223e      	movs	r2, #62	; 0x3e
 80019ea:	f000 fdfb 	bl	80025e4 <ILI9341_Draw_Text>
		lastCountPlayTime = countPlayTime;
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <state5+0x238>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <state5+0x234>)
 80019f4:	6013      	str	r3, [r2, #0]
	}
	if (count - lastCountTime > 100000 && countPlayTime > 0) {
 80019f6:	4b35      	ldr	r3, [pc, #212]	; (8001acc <state5+0x24c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <state5+0x250>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <state5+0x254>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d90c      	bls.n	8001a20 <state5+0x1a0>
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <state5+0x238>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <state5+0x1a0>
		countPlayTime--;
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <state5+0x238>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	4a28      	ldr	r2, [pc, #160]	; (8001ab8 <state5+0x238>)
 8001a16:	6013      	str	r3, [r2, #0]
		lastCountTime = count;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <state5+0x24c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <state5+0x250>)
 8001a1e:	6013      	str	r3, [r2, #0]
	}
	if (lastHp != Hp) {
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <state5+0x258>)
 8001a22:	881a      	ldrh	r2, [r3, #0]
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <state5+0x25c>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d039      	beq.n	8001aa0 <state5+0x220>
		char str[20];
		ILI9341_Draw_Rectangle(120, 160, 80, 40, BLACK);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2328      	movs	r3, #40	; 0x28
 8001a32:	2250      	movs	r2, #80	; 0x50
 8001a34:	21a0      	movs	r1, #160	; 0xa0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f001 f9de 	bl	8002df8 <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <state5+0x25c>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <state5+0x240>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f006 fa98 	bl	8007f7c <siprintf>
		uint8_t x = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if (strlen(str) == 1) {
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fc43 	bl	80002e0 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <state5+0x1fc>
			ILI9341_Draw_Text("0", 138, 162, WHITE, 4, BLACK);
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2304      	movs	r3, #4
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6c:	22a2      	movs	r2, #162	; 0xa2
 8001a6e:	218a      	movs	r1, #138	; 0x8a
 8001a70:	4814      	ldr	r0, [pc, #80]	; (8001ac4 <state5+0x244>)
 8001a72:	f000 fdb7 	bl	80025e4 <ILI9341_Draw_Text>
			x = 27;
 8001a76:	231b      	movs	r3, #27
 8001a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
		ILI9341_Draw_Text(str, 138 + x, 162, WHITE, 4, BLACK);
 8001a7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a80:	3b76      	subs	r3, #118	; 0x76
 8001a82:	b2d9      	uxtb	r1, r3
 8001a84:	1d38      	adds	r0, r7, #4
 8001a86:	2300      	movs	r3, #0
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a92:	22a2      	movs	r2, #162	; 0xa2
 8001a94:	f000 fda6 	bl	80025e4 <ILI9341_Draw_Text>
		lastHp = Hp;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <state5+0x25c>)
 8001a9a:	881a      	ldrh	r2, [r3, #0]
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <state5+0x258>)
 8001a9e:	801a      	strh	r2, [r3, #0]
//	if (countPlayTime <= 0) {
////		ILI9341_Fill_Screen(WHITE);
////		playState = 6;
//	}

}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000029b 	.word	0x2000029b
 8001aac:	0800a810 	.word	0x0800a810
 8001ab0:	0800a818 	.word	0x0800a818
 8001ab4:	200002a8 	.word	0x200002a8
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	88888889 	.word	0x88888889
 8001ac0:	0800a7d4 	.word	0x0800a7d4
 8001ac4:	0800a7d8 	.word	0x0800a7d8
 8001ac8:	0800a824 	.word	0x0800a824
 8001acc:	20000294 	.word	0x20000294
 8001ad0:	200002ac 	.word	0x200002ac
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	200002a6 	.word	0x200002a6
 8001adc:	20000002 	.word	0x20000002

08001ae0 <state6>:
void state6() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af02      	add	r7, sp, #8
	if (pWin == 2) {
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <state6+0x6c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d10b      	bne.n	8001b06 <state6+0x26>
		ILI9341_Draw_Text("player 2 win", 100, 100, BLACK, 4, WHITE);
 8001aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2304      	movs	r3, #4
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	2264      	movs	r2, #100	; 0x64
 8001afc:	2164      	movs	r1, #100	; 0x64
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <state6+0x70>)
 8001b00:	f000 fd70 	bl	80025e4 <ILI9341_Draw_Text>
	} else if (pWin == 1) {
		ILI9341_Draw_Text("player 1 win", 100, 100, BLACK, 4, WHITE);
	} else if (pWin == 3) {
		ILI9341_Draw_Text("Draw", 100, 100, BLACK, 4, WHITE);
	}
}
 8001b04:	e01e      	b.n	8001b44 <state6+0x64>
	} else if (pWin == 1) {
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <state6+0x6c>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10b      	bne.n	8001b26 <state6+0x46>
		ILI9341_Draw_Text("player 1 win", 100, 100, BLACK, 4, WHITE);
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	2304      	movs	r3, #4
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2264      	movs	r2, #100	; 0x64
 8001b1c:	2164      	movs	r1, #100	; 0x64
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <state6+0x74>)
 8001b20:	f000 fd60 	bl	80025e4 <ILI9341_Draw_Text>
}
 8001b24:	e00e      	b.n	8001b44 <state6+0x64>
	} else if (pWin == 3) {
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <state6+0x6c>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d10a      	bne.n	8001b44 <state6+0x64>
		ILI9341_Draw_Text("Draw", 100, 100, BLACK, 4, WHITE);
 8001b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2304      	movs	r3, #4
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2264      	movs	r2, #100	; 0x64
 8001b3c:	2164      	movs	r1, #100	; 0x64
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <state6+0x78>)
 8001b40:	f000 fd50 	bl	80025e4 <ILI9341_Draw_Text>
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000299 	.word	0x20000299
 8001b50:	0800a828 	.word	0x0800a828
 8001b54:	0800a838 	.word	0x0800a838
 8001b58:	0800a848 	.word	0x0800a848

08001b5c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b80      	cmp	r3, #128	; 0x80
 8001b6a:	d129      	bne.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x64>
		if (mode == 1) {
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d113      	bne.n	8001b9c <HAL_GPIO_EXTI_Callback+0x40>
			if (count - debounceSw > 20000) {
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x70>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d91c      	bls.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x64>
				Hp--;
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b90:	801a      	strh	r2, [r3, #0]
				debounceSw = count;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x70>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001b98:	6013      	str	r3, [r2, #0]
			while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
								}
				HAL_UART_Transmit(&huart2, (uint8_t*) "h", 1, 100);
		}
	}
}
 8001b9a:	e011      	b.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x64>
		else if(mode == 2){
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x64>
			while (__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC) == RESET) {
 8001ba4:	bf00      	nop
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b40      	cmp	r3, #64	; 0x40
 8001bb2:	d1f8      	bne.n	8001ba6 <HAL_GPIO_EXTI_Callback+0x4a>
				HAL_UART_Transmit(&huart2, (uint8_t*) "h", 1, 100);
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4908      	ldr	r1, [pc, #32]	; (8001bdc <HAL_GPIO_EXTI_Callback+0x80>)
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001bbc:	f004 fe0a 	bl	80067d4 <HAL_UART_Transmit>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000298 	.word	0x20000298
 8001bcc:	20000294 	.word	0x20000294
 8001bd0:	200002b0 	.word	0x200002b0
 8001bd4:	20000002 	.word	0x20000002
 8001bd8:	200003c4 	.word	0x200003c4
 8001bdc:	0800a850 	.word	0x0800a850

08001be0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x4>
	...

08001be8 <MX_RNG_Init>:
/* USER CODE END 0 */

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_RNG_Init+0x20>)
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <MX_RNG_Init+0x24>)
 8001bf0:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_RNG_Init+0x20>)
 8001bf4:	f003 fd2e 	bl	8005654 <HAL_RNG_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_RNG_Init+0x1a>
		Error_Handler();
 8001bfe:	f7ff ffef 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200002b4 	.word	0x200002b4
 8001c0c:	50060800 	.word	0x50060800

08001c10 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

	if (rngHandle->Instance == RNG) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RNG_MspInit+0x38>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10b      	bne.n	8001c3a <HAL_RNG_MspInit+0x2a>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_RNG_MspInit+0x3c>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RNG_MspInit+0x3c>)
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RNG_MspInit+0x3c>)
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	50060800 	.word	0x50060800
 8001c4c:	40023800 	.word	0x40023800

08001c50 <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <MX_SPI5_Init+0x78>)
 8001c58:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c60:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c6e:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c82:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_SPI5_Init+0x74>)
 8001cb0:	f003 fcfa 	bl	80056a8 <HAL_SPI_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_SPI5_Init+0x6e>
		Error_Handler();
 8001cba:	f7ff ff91 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200002c4 	.word	0x200002c4
 8001cc8:	40015000 	.word	0x40015000

08001ccc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a17      	ldr	r2, [pc, #92]	; (8001d48 <HAL_SPI_MspInit+0x7c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d128      	bne.n	8001d40 <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_SPI_MspInit+0x80>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001d1e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d22:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d30:	2305      	movs	r3, #5
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <HAL_SPI_MspInit+0x84>)
 8001d3c:	f002 f810 	bl	8003d60 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40015000 	.word	0x40015000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40021400 	.word	0x40021400

08001d54 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_MspInit+0x44>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_MspInit+0x44>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x44>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x44>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x44>)
 8001d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x44>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <SysTick_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001da0:	f001 fa08 	bl	80031b4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001dac:	2080      	movs	r0, #128	; 0x80
 8001dae:	f002 f9b5 	bl	800411c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <TIM2_IRQHandler+0x18>)
 8001dbe:	f004 f8bd 	bl	8005f3c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	count++;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <TIM2_IRQHandler+0x1c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a02      	ldr	r2, [pc, #8]	; (8001dd4 <TIM2_IRQHandler+0x1c>)
 8001dca:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM2_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000378 	.word	0x20000378
 8001dd4:	20000294 	.word	0x20000294

08001dd8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART2_IRQHandler+0x10>)
 8001dde:	f004 fd8d 	bl	80068fc <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200003c4 	.word	0x200003c4

08001dec <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e06:	f006 f96f 	bl	80080e8 <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit(int status) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
	while (1) {
 8001e2e:	e7fe      	b.n	8001e2e <_exit+0x12>

08001e30 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
		*ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
	}

	return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
		__io_putchar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
	}
	return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file) {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:

int _fstat(int file, struct stat *st) {
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file) {
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
		errno = ENOMEM;
 8001f3c:	f006 f8d4 	bl	80080e8 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20080000 	.word	0x20080000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	20000328 	.word	0x20000328
 8001f74:	20000620 	.word	0x20000620

08001f78 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <SystemInit+0x5c>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <SystemInit+0x5c>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <SystemInit+0x60>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <SystemInit+0x60>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <SystemInit+0x60>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <SystemInit+0x60>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	490d      	ldr	r1, [pc, #52]	; (8001fd8 <SystemInit+0x60>)
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <SystemInit+0x64>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <SystemInit+0x60>)
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <SystemInit+0x68>)
 8001fae:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <SystemInit+0x60>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <SystemInit+0x60>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <SystemInit+0x60>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SystemInit+0x5c>)
 8001fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc8:	609a      	str	r2, [r3, #8]
#endif
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	fef6ffff 	.word	0xfef6ffff
 8001fe0:	24003010 	.word	0x24003010

08001fe4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <MX_TIM1_Init+0xa0>)
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <MX_TIM1_Init+0xa4>)
 8002006:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_TIM1_Init+0xa0>)
 800200a:	f242 720f 	movw	r2, #9999	; 0x270f
 800200e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_TIM1_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_TIM1_Init+0xa0>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM1_Init+0xa0>)
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_TIM1_Init+0xa0>)
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_TIM1_Init+0xa0>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002030:	4814      	ldr	r0, [pc, #80]	; (8002084 <MX_TIM1_Init+0xa0>)
 8002032:	f003 feb3 	bl	8005d9c <HAL_TIM_Base_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0x5c>
		Error_Handler();
 800203c:	f7ff fdd0 	bl	8001be0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002044:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM1_Init+0xa0>)
 800204e:	f004 f895 	bl	800617c <HAL_TIM_ConfigClockSource>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0x78>
		Error_Handler();
 8002058:	f7ff fdc2 	bl	8001be0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_TIM1_Init+0xa0>)
 800206e:	f004 fab7 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002078:	f7ff fdb2 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000032c 	.word	0x2000032c
 8002088:	40010000 	.word	0x40010000

0800208c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_TIM2_Init+0x94>)
 80020ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_TIM2_Init+0x94>)
 80020b4:	2263      	movs	r2, #99	; 0x63
 80020b6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM2_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10 - 1;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_TIM2_Init+0x94>)
 80020c0:	2209      	movs	r2, #9
 80020c2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_TIM2_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_TIM2_Init+0x94>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <MX_TIM2_Init+0x94>)
 80020d2:	f003 fe63 	bl	8005d9c <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x54>
		Error_Handler();
 80020dc:	f7ff fd80 	bl	8001be0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_TIM2_Init+0x94>)
 80020ee:	f004 f845 	bl	800617c <HAL_TIM_ConfigClockSource>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM2_Init+0x70>
		Error_Handler();
 80020f8:	f7ff fd72 	bl	8001be0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_TIM2_Init+0x94>)
 800210a:	f004 fa69 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002114:	f7ff fd64 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000378 	.word	0x20000378

08002124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_TIM_Base_MspInit+0x68>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10c      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002136:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 800214e:	e018      	b.n	8002182 <HAL_TIM_Base_MspInit+0x5e>
	} else if (tim_baseHandle->Instance == TIM2) {
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d113      	bne.n	8002182 <HAL_TIM_Base_MspInit+0x5e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_TIM_Base_MspInit+0x6c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2101      	movs	r1, #1
 8002176:	201c      	movs	r0, #28
 8002178:	f001 fd29 	bl	8003bce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800217c:	201c      	movs	r0, #28
 800217e:	f001 fd42 	bl	8003c06 <HAL_NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40010000 	.word	0x40010000
 8002190:	40023800 	.word	0x40023800

08002194 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_USART2_UART_Init+0x58>)
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <MX_USART2_UART_Init+0x5c>)
 800219c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART2_UART_Init+0x58>)
 80021d8:	f004 faae 	bl	8006738 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80021e2:	f7ff fcfd 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200003c4 	.word	0x200003c4
 80021f0:	40004400 	.word	0x40004400

080021f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_USART3_UART_Init+0x58>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <MX_USART3_UART_Init+0x5c>)
 80021fc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_USART3_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART3_UART_Init+0x58>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART3_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART3_UART_Init+0x58>)
 8002238:	f004 fa7e 	bl	8006738 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8002242:	f7ff fccd 	bl	8001be0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000448 	.word	0x20000448
 8002250:	40004800 	.word	0x40004800

08002254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_UART_MspInit+0xe8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d130      	bne.n	80022d8 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8002276:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_UART_MspInit+0xec>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a2b      	ldr	r2, [pc, #172]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_UART_MspInit+0xec>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
		/**USART2 GPIO Configuration
		 PD5     ------> USART2_TX
		 PD6     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80022a6:	2360      	movs	r3, #96	; 0x60
 80022a8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b6:	2307      	movs	r3, #7
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4820      	ldr	r0, [pc, #128]	; (8002344 <HAL_UART_MspInit+0xf0>)
 80022c2:	f001 fd4d 	bl	8003d60 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2101      	movs	r1, #1
 80022ca:	2026      	movs	r0, #38	; 0x26
 80022cc:	f001 fc7f 	bl	8003bce <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d0:	2026      	movs	r0, #38	; 0x26
 80022d2:	f001 fc98 	bl	8003c06 <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 80022d6:	e02d      	b.n	8002334 <HAL_UART_MspInit+0xe0>
	} else if (uartHandle->Instance == USART3) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_UART_MspInit+0xf4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d128      	bne.n	8002334 <HAL_UART_MspInit+0xe0>
		__HAL_RCC_USART3_CLK_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_UART_MspInit+0xec>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_UART_MspInit+0xec>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_MspInit+0xec>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_UART_MspInit+0xec>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_UART_MspInit+0xec>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8002312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002316:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002324:	2307      	movs	r3, #7
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_UART_MspInit+0xf0>)
 8002330:	f001 fd16 	bl	8003d60 <HAL_GPIO_Init>
}
 8002334:	bf00      	nop
 8002336:	3730      	adds	r7, #48	; 0x30
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40004400 	.word	0x40004400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40004800 	.word	0x40004800

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002352:	e003      	b.n	800235c <LoopCopyDataInit>

08002354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235a:	3104      	adds	r1, #4

0800235c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002364:	d3f6      	bcc.n	8002354 <CopyDataInit>
  ldr  r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002368:	e002      	b.n	8002370 <LoopFillZerobss>

0800236a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800236a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800236c:	f842 3b04 	str.w	r3, [r2], #4

08002370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002374:	d3f9      	bcc.n	800236a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002376:	f7ff fdff 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f005 febb 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7fe fc2b 	bl	8000bd8 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002388:	0800c6f8 	.word	0x0800c6f8
  ldr  r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002390:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002394:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002398:	2000061c 	.word	0x2000061c

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>

0800239e <ILI9341_Draw_Filled_Circle>:
	}
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour) {
 800239e:	b590      	push	{r4, r7, lr}
 80023a0:	b08b      	sub	sp, #44	; 0x2c
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4604      	mov	r4, r0
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	461a      	mov	r2, r3
 80023ac:	4623      	mov	r3, r4
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	4603      	mov	r3, r0
 80023b2:	80bb      	strh	r3, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
 80023b8:	4613      	mov	r3, r2
 80023ba:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	f1c3 0301 	rsb	r3, r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

	while (x >= y) {
 80023d6:	e061      	b.n	800249c <ILI9341_Draw_Filled_Circle+0xfe>
		for (int i = X - x; i <= X + x; i++) {
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e018      	b.n	8002414 <ILI9341_Draw_Filled_Circle+0x76>
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	b298      	uxth	r0, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	88bb      	ldrh	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	883a      	ldrh	r2, [r7, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	f000 fc26 	bl	8002c44 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	b298      	uxth	r0, r3
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	88ba      	ldrh	r2, [r7, #4]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b29b      	uxth	r3, r3
 8002406:	883a      	ldrh	r2, [r7, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f000 fc1b 	bl	8002c44 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++) {
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3301      	adds	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	4413      	add	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	dde0      	ble.n	80023e2 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++) {
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e018      	b.n	800245c <ILI9341_Draw_Filled_Circle+0xbe>
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	b298      	uxth	r0, r3
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	b29a      	uxth	r2, r3
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	883a      	ldrh	r2, [r7, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	f000 fc02 	bl	8002c44 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	b298      	uxth	r0, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	b29b      	uxth	r3, r3
 8002448:	88ba      	ldrh	r2, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	883a      	ldrh	r2, [r7, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f000 fbf7 	bl	8002c44 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++) {
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	4413      	add	r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	dde0      	ble.n	800242a <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	3301      	adds	r3, #1
 800246c:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	3302      	adds	r3, #2
 800247a:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0) {
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005a      	lsls	r2, r3, #1
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	4413      	add	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	dd09      	ble.n	800249c <ILI9341_Draw_Filled_Circle+0xfe>
			x--;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3b01      	subs	r3, #1
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3302      	adds	r3, #2
 800249a:	61fb      	str	r3, [r7, #28]
	while (x >= y) {
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	da99      	bge.n	80023d8 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	; 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
	...

080024b0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	4603      	mov	r3, r0
 80024c4:	71bb      	strb	r3, [r7, #6]
 80024c6:	460b      	mov	r3, r1
 80024c8:	717b      	strb	r3, [r7, #5]
 80024ca:	4613      	mov	r3, r2
 80024cc:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ') {
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b1f      	cmp	r3, #31
 80024d6:	d802      	bhi.n	80024de <ILI9341_Draw_Char+0x2e>
		Character = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	e002      	b.n	80024e4 <ILI9341_Draw_Char+0x34>
	} else {
		function_char -= 32;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	3b20      	subs	r3, #32
 80024e2:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	753b      	strb	r3, [r7, #20]
 80024e8:	e012      	b.n	8002510 <ILI9341_Draw_Char+0x60>
		temp[k] = font[function_char][k];
 80024ea:	7dfa      	ldrb	r2, [r7, #23]
 80024ec:	7d38      	ldrb	r0, [r7, #20]
 80024ee:	7d39      	ldrb	r1, [r7, #20]
 80024f0:	4c3b      	ldr	r4, [pc, #236]	; (80025e0 <ILI9341_Draw_Char+0x130>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4423      	add	r3, r4
 80024fc:	4403      	add	r3, r0
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	f101 0318 	add.w	r3, r1, #24
 8002504:	443b      	add	r3, r7
 8002506:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 800250a:	7d3b      	ldrb	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	753b      	strb	r3, [r7, #20]
 8002510:	7d3b      	ldrb	r3, [r7, #20]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d9e9      	bls.n	80024ea <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	b298      	uxth	r0, r3
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	b299      	uxth	r1, r3
 800251e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002520:	461a      	mov	r2, r3
 8002522:	0052      	lsls	r2, r2, #1
 8002524:	4413      	add	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	b29c      	uxth	r4, r3
 8002530:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4623      	mov	r3, r4
 8002536:	f000 fc5f 	bl	8002df8 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++) {
 800253a:	2300      	movs	r3, #0
 800253c:	757b      	strb	r3, [r7, #21]
 800253e:	e047      	b.n	80025d0 <ILI9341_Draw_Char+0x120>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	75bb      	strb	r3, [r7, #22]
 8002544:	e03e      	b.n	80025c4 <ILI9341_Draw_Char+0x114>
			if (temp[j] & (1 << i)) {
 8002546:	7d7b      	ldrb	r3, [r7, #21]
 8002548:	3318      	adds	r3, #24
 800254a:	443b      	add	r3, r7
 800254c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002550:	461a      	mov	r2, r3
 8002552:	7dbb      	ldrb	r3, [r7, #22]
 8002554:	fa42 f303 	asr.w	r3, r2, r3
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02e      	beq.n	80025be <ILI9341_Draw_Char+0x10e>
				if (Size == 1) {
 8002560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002562:	2b01      	cmp	r3, #1
 8002564:	d110      	bne.n	8002588 <ILI9341_Draw_Char+0xd8>
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	b29a      	uxth	r2, r3
 800256a:	7d7b      	ldrb	r3, [r7, #21]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4413      	add	r3, r2
 8002570:	b298      	uxth	r0, r3
 8002572:	797b      	ldrb	r3, [r7, #5]
 8002574:	b29a      	uxth	r2, r3
 8002576:	7dbb      	ldrb	r3, [r7, #22]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4413      	add	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	4619      	mov	r1, r3
 8002582:	f000 fb5f 	bl	8002c44 <ILI9341_Draw_Pixel>
 8002586:	e01a      	b.n	80025be <ILI9341_Draw_Char+0x10e>
				} else {
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8002588:	79bb      	ldrb	r3, [r7, #6]
 800258a:	b29a      	uxth	r2, r3
 800258c:	7d7b      	ldrb	r3, [r7, #21]
 800258e:	b29b      	uxth	r3, r3
 8002590:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002592:	fb11 f303 	smulbb	r3, r1, r3
 8002596:	b29b      	uxth	r3, r3
 8002598:	4413      	add	r3, r2
 800259a:	b298      	uxth	r0, r3
 800259c:	797b      	ldrb	r3, [r7, #5]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	7dbb      	ldrb	r3, [r7, #22]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80025a6:	fb11 f303 	smulbb	r3, r1, r3
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	b299      	uxth	r1, r3
 80025b0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80025b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4623      	mov	r3, r4
 80025ba:	f000 fc1d 	bl	8002df8 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 80025be:	7dbb      	ldrb	r3, [r7, #22]
 80025c0:	3301      	adds	r3, #1
 80025c2:	75bb      	strb	r3, [r7, #22]
 80025c4:	7dbb      	ldrb	r3, [r7, #22]
 80025c6:	2b07      	cmp	r3, #7
 80025c8:	d9bd      	bls.n	8002546 <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++) {
 80025ca:	7d7b      	ldrb	r3, [r7, #21]
 80025cc:	3301      	adds	r3, #1
 80025ce:	757b      	strb	r3, [r7, #21]
 80025d0:	7d7b      	ldrb	r3, [r7, #21]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d9b4      	bls.n	8002540 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd90      	pop	{r4, r7, pc}
 80025e0:	0800a878 	.word	0x0800a878

080025e4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	70fb      	strb	r3, [r7, #3]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70bb      	strb	r3, [r7, #2]
 80025fa:	4613      	mov	r3, r2
 80025fc:	803b      	strh	r3, [r7, #0]
	while (*Text) {
 80025fe:	e017      	b.n	8002630 <ILI9341_Draw_Text+0x4c>
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	7818      	ldrb	r0, [r3, #0]
 8002608:	883c      	ldrh	r4, [r7, #0]
 800260a:	78ba      	ldrb	r2, [r7, #2]
 800260c:	78f9      	ldrb	r1, [r7, #3]
 800260e:	8bbb      	ldrh	r3, [r7, #28]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	8b3b      	ldrh	r3, [r7, #24]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4623      	mov	r3, r4
 8002618:	f7ff ff4a 	bl	80024b0 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 800261c:	8b3b      	ldrh	r3, [r7, #24]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	0052      	lsls	r2, r2, #1
 8002624:	4413      	add	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	4413      	add	r3, r2
 800262e:	70fb      	strb	r3, [r7, #3]
	while (*Text) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e3      	bne.n	8002600 <ILI9341_Draw_Text+0x1c>
	}
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
	...

08002644 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002648:	f7ff fb02 	bl	8001c50 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 800264c:	f7fe f860 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002656:	4802      	ldr	r0, [pc, #8]	; (8002660 <ILI9341_SPI_Init+0x1c>)
 8002658:	f001 fd46 	bl	80040e8 <HAL_GPIO_WritePin>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40020800 	.word	0x40020800

08002664 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800266e:	1df9      	adds	r1, r7, #7
 8002670:	2301      	movs	r3, #1
 8002672:	2201      	movs	r2, #1
 8002674:	4803      	ldr	r0, [pc, #12]	; (8002684 <ILI9341_SPI_Send+0x20>)
 8002676:	f003 f8c2 	bl	80057fe <HAL_SPI_Transmit>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002c4 	.word	0x200002c4

08002688 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <ILI9341_Write_Command+0x40>)
 800269a:	f001 fd25 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a4:	4808      	ldr	r0, [pc, #32]	; (80026c8 <ILI9341_Write_Command+0x40>)
 80026a6:	f001 fd1f 	bl	80040e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffd9 	bl	8002664 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <ILI9341_Write_Command+0x40>)
 80026ba:	f001 fd15 	bl	80040e8 <HAL_GPIO_WritePin>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40020800 	.word	0x40020800

080026cc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80026d6:	2201      	movs	r2, #1
 80026d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <ILI9341_Write_Data+0x40>)
 80026de:	f001 fd03 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e8:	4808      	ldr	r0, [pc, #32]	; (800270c <ILI9341_Write_Data+0x40>)
 80026ea:	f001 fcfd 	bl	80040e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ffb7 	bl	8002664 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <ILI9341_Write_Data+0x40>)
 80026fe:	f001 fcf3 	bl	80040e8 <HAL_GPIO_WritePin>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40020800 	.word	0x40020800

08002710 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	4603      	mov	r3, r0
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
 800272a:	4613      	mov	r3, r2
 800272c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800272e:	202a      	movs	r0, #42	; 0x2a
 8002730:	f7ff ffaa 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ffc5 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ffc0 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffb9 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ffb4 	bl	80026cc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002764:	202b      	movs	r0, #43	; 0x2b
 8002766:	f7ff ff8f 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b29b      	uxth	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ffaa 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002778:	88bb      	ldrh	r3, [r7, #4]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ffa5 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002782:	883b      	ldrh	r3, [r7, #0]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	b29b      	uxth	r3, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff9e 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002790:	883b      	ldrh	r3, [r7, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff99 	bl	80026cc <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800279a:	202c      	movs	r0, #44	; 0x2c
 800279c:	f7ff ff74 	bl	8002688 <ILI9341_Write_Command>
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <ILI9341_Reset+0x38>)
 80027b4:	f001 fc98 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80027b8:	20c8      	movs	r0, #200	; 0xc8
 80027ba:	f000 fd1b 	bl	80031f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c4:	4806      	ldr	r0, [pc, #24]	; (80027e0 <ILI9341_Reset+0x38>)
 80027c6:	f001 fc8f 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80027ca:	20c8      	movs	r0, #200	; 0xc8
 80027cc:	f000 fd12 	bl	80031f4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027d6:	4802      	ldr	r0, [pc, #8]	; (80027e0 <ILI9341_Reset+0x38>)
 80027d8:	f001 fc86 	bl	80040e8 <HAL_GPIO_WritePin>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40020800 	.word	0x40020800

080027e4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80027f2:	2036      	movs	r0, #54	; 0x36
 80027f4:	f7ff ff48 	bl	8002688 <ILI9341_Write_Command>
HAL_Delay(1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f000 fcfb 	bl	80031f4 <HAL_Delay>
	
switch(screen_rotation) 
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d837      	bhi.n	8002874 <ILI9341_Set_Rotation+0x90>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <ILI9341_Set_Rotation+0x28>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	0800281d 	.word	0x0800281d
 8002810:	08002833 	.word	0x08002833
 8002814:	08002849 	.word	0x08002849
 8002818:	0800285f 	.word	0x0800285f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800281c:	2048      	movs	r0, #72	; 0x48
 800281e:	f7ff ff55 	bl	80026cc <ILI9341_Write_Data>
			LCD_WIDTH = ILI9341_SCREEN_HEIGHT;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <ILI9341_Set_Rotation+0x9c>)
 8002824:	22f0      	movs	r2, #240	; 0xf0
 8002826:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <ILI9341_Set_Rotation+0xa0>)
 800282a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800282e:	801a      	strh	r2, [r3, #0]
			break;
 8002830:	e021      	b.n	8002876 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002832:	2028      	movs	r0, #40	; 0x28
 8002834:	f7ff ff4a 	bl	80026cc <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH; //+40
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <ILI9341_Set_Rotation+0x9c>)
 800283a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800283e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <ILI9341_Set_Rotation+0xa0>)
 8002842:	22f0      	movs	r2, #240	; 0xf0
 8002844:	801a      	strh	r2, [r3, #0]
			break;
 8002846:	e016      	b.n	8002876 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002848:	2088      	movs	r0, #136	; 0x88
 800284a:	f7ff ff3f 	bl	80026cc <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_HEIGHT;
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <ILI9341_Set_Rotation+0x9c>)
 8002850:	22f0      	movs	r2, #240	; 0xf0
 8002852:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <ILI9341_Set_Rotation+0xa0>)
 8002856:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800285a:	801a      	strh	r2, [r3, #0]
			break;
 800285c:	e00b      	b.n	8002876 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800285e:	20e8      	movs	r0, #232	; 0xe8
 8002860:	f7ff ff34 	bl	80026cc <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <ILI9341_Set_Rotation+0x9c>)
 8002866:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800286a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <ILI9341_Set_Rotation+0xa0>)
 800286e:	22f0      	movs	r2, #240	; 0xf0
 8002870:	801a      	strh	r2, [r3, #0]
			break;
 8002872:	e000      	b.n	8002876 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002874:	bf00      	nop
	}
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000000e 	.word	0x2000000e
 8002884:	2000000c 	.word	0x2000000c

08002888 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002892:	4802      	ldr	r0, [pc, #8]	; (800289c <ILI9341_Enable+0x14>)
 8002894:	f001 fc28 	bl	80040e8 <HAL_GPIO_WritePin>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020800 	.word	0x40020800

080028a0 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80028a4:	f7ff fff0 	bl	8002888 <ILI9341_Enable>
ILI9341_SPI_Init();
 80028a8:	f7ff fecc 	bl	8002644 <ILI9341_SPI_Init>
ILI9341_Reset();
 80028ac:	f7ff ff7c 	bl	80027a8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7ff fee9 	bl	8002688 <ILI9341_Write_Command>
HAL_Delay(1000);
 80028b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ba:	f000 fc9b 	bl	80031f4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80028be:	20cb      	movs	r0, #203	; 0xcb
 80028c0:	f7ff fee2 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80028c4:	2039      	movs	r0, #57	; 0x39
 80028c6:	f7ff ff01 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80028ca:	202c      	movs	r0, #44	; 0x2c
 80028cc:	f7ff fefe 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7ff fefb 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80028d6:	2034      	movs	r0, #52	; 0x34
 80028d8:	f7ff fef8 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80028dc:	2002      	movs	r0, #2
 80028de:	f7ff fef5 	bl	80026cc <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80028e2:	20cf      	movs	r0, #207	; 0xcf
 80028e4:	f7ff fed0 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff feef 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80028ee:	20c1      	movs	r0, #193	; 0xc1
 80028f0:	f7ff feec 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80028f4:	2030      	movs	r0, #48	; 0x30
 80028f6:	f7ff fee9 	bl	80026cc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80028fa:	20e8      	movs	r0, #232	; 0xe8
 80028fc:	f7ff fec4 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002900:	2085      	movs	r0, #133	; 0x85
 8002902:	f7ff fee3 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7ff fee0 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800290c:	2078      	movs	r0, #120	; 0x78
 800290e:	f7ff fedd 	bl	80026cc <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002912:	20ea      	movs	r0, #234	; 0xea
 8002914:	f7ff feb8 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002918:	2000      	movs	r0, #0
 800291a:	f7ff fed7 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7ff fed4 	bl	80026cc <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002924:	20ed      	movs	r0, #237	; 0xed
 8002926:	f7ff feaf 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800292a:	2064      	movs	r0, #100	; 0x64
 800292c:	f7ff fece 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002930:	2003      	movs	r0, #3
 8002932:	f7ff fecb 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002936:	2012      	movs	r0, #18
 8002938:	f7ff fec8 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800293c:	2081      	movs	r0, #129	; 0x81
 800293e:	f7ff fec5 	bl	80026cc <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002942:	20f7      	movs	r0, #247	; 0xf7
 8002944:	f7ff fea0 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002948:	2020      	movs	r0, #32
 800294a:	f7ff febf 	bl	80026cc <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800294e:	20c0      	movs	r0, #192	; 0xc0
 8002950:	f7ff fe9a 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002954:	2023      	movs	r0, #35	; 0x23
 8002956:	f7ff feb9 	bl	80026cc <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800295a:	20c1      	movs	r0, #193	; 0xc1
 800295c:	f7ff fe94 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002960:	2010      	movs	r0, #16
 8002962:	f7ff feb3 	bl	80026cc <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002966:	20c5      	movs	r0, #197	; 0xc5
 8002968:	f7ff fe8e 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800296c:	203e      	movs	r0, #62	; 0x3e
 800296e:	f7ff fead 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002972:	2028      	movs	r0, #40	; 0x28
 8002974:	f7ff feaa 	bl	80026cc <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002978:	20c7      	movs	r0, #199	; 0xc7
 800297a:	f7ff fe85 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800297e:	2086      	movs	r0, #134	; 0x86
 8002980:	f7ff fea4 	bl	80026cc <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002984:	2036      	movs	r0, #54	; 0x36
 8002986:	f7ff fe7f 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800298a:	2048      	movs	r0, #72	; 0x48
 800298c:	f7ff fe9e 	bl	80026cc <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002990:	203a      	movs	r0, #58	; 0x3a
 8002992:	f7ff fe79 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002996:	2055      	movs	r0, #85	; 0x55
 8002998:	f7ff fe98 	bl	80026cc <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800299c:	20b1      	movs	r0, #177	; 0xb1
 800299e:	f7ff fe73 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fe92 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80029a8:	2018      	movs	r0, #24
 80029aa:	f7ff fe8f 	bl	80026cc <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80029ae:	20b6      	movs	r0, #182	; 0xb6
 80029b0:	f7ff fe6a 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80029b4:	2008      	movs	r0, #8
 80029b6:	f7ff fe89 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80029ba:	2082      	movs	r0, #130	; 0x82
 80029bc:	f7ff fe86 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80029c0:	2027      	movs	r0, #39	; 0x27
 80029c2:	f7ff fe83 	bl	80026cc <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80029c6:	20f2      	movs	r0, #242	; 0xf2
 80029c8:	f7ff fe5e 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fe7d 	bl	80026cc <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80029d2:	2026      	movs	r0, #38	; 0x26
 80029d4:	f7ff fe58 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80029d8:	2001      	movs	r0, #1
 80029da:	f7ff fe77 	bl	80026cc <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80029de:	20e0      	movs	r0, #224	; 0xe0
 80029e0:	f7ff fe52 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80029e4:	200f      	movs	r0, #15
 80029e6:	f7ff fe71 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80029ea:	2031      	movs	r0, #49	; 0x31
 80029ec:	f7ff fe6e 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80029f0:	202b      	movs	r0, #43	; 0x2b
 80029f2:	f7ff fe6b 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80029f6:	200c      	movs	r0, #12
 80029f8:	f7ff fe68 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80029fc:	200e      	movs	r0, #14
 80029fe:	f7ff fe65 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002a02:	2008      	movs	r0, #8
 8002a04:	f7ff fe62 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002a08:	204e      	movs	r0, #78	; 0x4e
 8002a0a:	f7ff fe5f 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002a0e:	20f1      	movs	r0, #241	; 0xf1
 8002a10:	f7ff fe5c 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002a14:	2037      	movs	r0, #55	; 0x37
 8002a16:	f7ff fe59 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002a1a:	2007      	movs	r0, #7
 8002a1c:	f7ff fe56 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002a20:	2010      	movs	r0, #16
 8002a22:	f7ff fe53 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002a26:	2003      	movs	r0, #3
 8002a28:	f7ff fe50 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002a2c:	200e      	movs	r0, #14
 8002a2e:	f7ff fe4d 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002a32:	2009      	movs	r0, #9
 8002a34:	f7ff fe4a 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff fe47 	bl	80026cc <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002a3e:	20e1      	movs	r0, #225	; 0xe1
 8002a40:	f7ff fe22 	bl	8002688 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff fe41 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002a4a:	200e      	movs	r0, #14
 8002a4c:	f7ff fe3e 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002a50:	2014      	movs	r0, #20
 8002a52:	f7ff fe3b 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002a56:	2003      	movs	r0, #3
 8002a58:	f7ff fe38 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002a5c:	2011      	movs	r0, #17
 8002a5e:	f7ff fe35 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002a62:	2007      	movs	r0, #7
 8002a64:	f7ff fe32 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002a68:	2031      	movs	r0, #49	; 0x31
 8002a6a:	f7ff fe2f 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002a6e:	20c1      	movs	r0, #193	; 0xc1
 8002a70:	f7ff fe2c 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002a74:	2048      	movs	r0, #72	; 0x48
 8002a76:	f7ff fe29 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002a7a:	2008      	movs	r0, #8
 8002a7c:	f7ff fe26 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002a80:	200f      	movs	r0, #15
 8002a82:	f7ff fe23 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002a86:	200c      	movs	r0, #12
 8002a88:	f7ff fe20 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002a8c:	2031      	movs	r0, #49	; 0x31
 8002a8e:	f7ff fe1d 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002a92:	2036      	movs	r0, #54	; 0x36
 8002a94:	f7ff fe1a 	bl	80026cc <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002a98:	200f      	movs	r0, #15
 8002a9a:	f7ff fe17 	bl	80026cc <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002a9e:	2011      	movs	r0, #17
 8002aa0:	f7ff fdf2 	bl	8002688 <ILI9341_Write_Command>
HAL_Delay(120);
 8002aa4:	2078      	movs	r0, #120	; 0x78
 8002aa6:	f000 fba5 	bl	80031f4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002aaa:	2029      	movs	r0, #41	; 0x29
 8002aac:	f7ff fdec 	bl	8002688 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7ff fe97 	bl	80027e4 <ILI9341_Set_Rotation>
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac0:	b08d      	sub	sp, #52	; 0x34
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	6039      	str	r1, [r7, #0]
 8002ac8:	80fb      	strh	r3, [r7, #6]
 8002aca:	466b      	mov	r3, sp
 8002acc:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ada:	d202      	bcs.n	8002ae2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae0:	e002      	b.n	8002ae8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002ae2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aee:	4840      	ldr	r0, [pc, #256]	; (8002bf0 <ILI9341_Draw_Colour_Burst+0x134>)
 8002af0:	f001 fafa 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002afa:	483d      	ldr	r0, [pc, #244]	; (8002bf0 <ILI9341_Draw_Colour_Burst+0x134>)
 8002afc:	f001 faf4 	bl	80040e8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	4688      	mov	r8, r1
 8002b16:	4699      	mov	r9, r3
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461d      	mov	r5, r3
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	00eb      	lsls	r3, r5, #3
 8002b3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b40:	00e2      	lsls	r2, r4, #3
 8002b42:	1dcb      	adds	r3, r1, #7
 8002b44:	08db      	lsrs	r3, r3, #3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	ebad 0d03 	sub.w	sp, sp, r3
 8002b4c:	466b      	mov	r3, sp
 8002b4e:	3300      	adds	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002b52:	2300      	movs	r3, #0
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b56:	e00e      	b.n	8002b76 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002b62:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	3301      	adds	r3, #1
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	b2d1      	uxtb	r1, r2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	3302      	adds	r3, #2
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3ec      	bcc.n	8002b58 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b98:	fb01 f202 	mul.w	r2, r1, r2
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8002baa:	e009      	b.n	8002bc0 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	480f      	ldr	r0, [pc, #60]	; (8002bf4 <ILI9341_Draw_Colour_Burst+0x138>)
 8002bb6:	f002 fe22 	bl	80057fe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3f1      	bcc.n	8002bac <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	230a      	movs	r3, #10
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <ILI9341_Draw_Colour_Burst+0x138>)
 8002bd2:	f002 fe14 	bl	80057fe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <ILI9341_Draw_Colour_Burst+0x134>)
 8002bde:	f001 fa83 	bl	80040e8 <HAL_GPIO_WritePin>
 8002be2:	46b5      	mov	sp, r6
}
 8002be4:	bf00      	nop
 8002be6:	3734      	adds	r7, #52	; 0x34
 8002be8:	46bd      	mov	sp, r7
 8002bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	200002c4 	.word	0x200002c4

08002bf8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <ILI9341_Fill_Screen+0x44>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <ILI9341_Fill_Screen+0x48>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7ff fd7d 	bl	8002710 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <ILI9341_Fill_Screen+0x44>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <ILI9341_Fill_Screen+0x48>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff44 	bl	8002abc <ILI9341_Draw_Colour_Burst>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000000e 	.word	0x2000000e
 8002c40:	2000000c 	.word	0x2000000c

08002c44 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	80bb      	strh	r3, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002c56:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <ILI9341_Draw_Pixel+0x1a4>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	f080 80be 	bcs.w	8002de0 <ILI9341_Draw_Pixel+0x19c>
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <ILI9341_Draw_Pixel+0x1a8>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	88ba      	ldrh	r2, [r7, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	f080 80b7 	bcs.w	8002de0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c78:	485d      	ldr	r0, [pc, #372]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002c7a:	f001 fa35 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c84:	485a      	ldr	r0, [pc, #360]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002c86:	f001 fa2f 	bl	80040e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002c8a:	202a      	movs	r0, #42	; 0x2a
 8002c8c:	f7ff fcea 	bl	8002664 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002c90:	2201      	movs	r2, #1
 8002c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c96:	4856      	ldr	r0, [pc, #344]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002c98:	f001 fa26 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ca2:	4853      	ldr	r0, [pc, #332]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002ca4:	f001 fa20 	bl	80040e8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cae:	4850      	ldr	r0, [pc, #320]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002cb0:	f001 fa1a 	bl	80040e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	753b      	strb	r3, [r7, #20]
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	757b      	strb	r3, [r7, #21]
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	121b      	asrs	r3, r3, #8
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	75bb      	strb	r3, [r7, #22]
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002cd8:	f107 0114 	add.w	r1, r7, #20
 8002cdc:	2301      	movs	r3, #1
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4844      	ldr	r0, [pc, #272]	; (8002df4 <ILI9341_Draw_Pixel+0x1b0>)
 8002ce2:	f002 fd8c 	bl	80057fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cec:	4840      	ldr	r0, [pc, #256]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002cee:	f001 f9fb 	bl	80040e8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf8:	483d      	ldr	r0, [pc, #244]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002cfa:	f001 f9f5 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d04:	483a      	ldr	r0, [pc, #232]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d06:	f001 f9ef 	bl	80040e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002d0a:	202b      	movs	r0, #43	; 0x2b
 8002d0c:	f7ff fcaa 	bl	8002664 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d16:	4836      	ldr	r0, [pc, #216]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d18:	f001 f9e6 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d22:	4833      	ldr	r0, [pc, #204]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d24:	f001 f9e0 	bl	80040e8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d2e:	4830      	ldr	r0, [pc, #192]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d30:	f001 f9da 	bl	80040e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002d34:	88bb      	ldrh	r3, [r7, #4]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	743b      	strb	r3, [r7, #16]
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	747b      	strb	r3, [r7, #17]
 8002d44:	88bb      	ldrh	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	121b      	asrs	r3, r3, #8
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	74bb      	strb	r3, [r7, #18]
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002d58:	f107 0110 	add.w	r1, r7, #16
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4824      	ldr	r0, [pc, #144]	; (8002df4 <ILI9341_Draw_Pixel+0x1b0>)
 8002d62:	f002 fd4c 	bl	80057fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d66:	2201      	movs	r2, #1
 8002d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d6c:	4820      	ldr	r0, [pc, #128]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d6e:	f001 f9bb 	bl	80040e8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d78:	481d      	ldr	r0, [pc, #116]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d7a:	f001 f9b5 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d84:	481a      	ldr	r0, [pc, #104]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d86:	f001 f9af 	bl	80040e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	f7ff fc6a 	bl	8002664 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002d90:	2201      	movs	r2, #1
 8002d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d96:	4816      	ldr	r0, [pc, #88]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002d98:	f001 f9a6 	bl	80040e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da2:	4813      	ldr	r0, [pc, #76]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002da4:	f001 f9a0 	bl	80040e8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dae:	4810      	ldr	r0, [pc, #64]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002db0:	f001 f99a 	bl	80040e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	733b      	strb	r3, [r7, #12]
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002dc4:	f107 010c 	add.w	r1, r7, #12
 8002dc8:	2301      	movs	r3, #1
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <ILI9341_Draw_Pixel+0x1b0>)
 8002dce:	f002 fd16 	bl	80057fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <ILI9341_Draw_Pixel+0x1ac>)
 8002dda:	f001 f985 	bl	80040e8 <HAL_GPIO_WritePin>
 8002dde:	e000      	b.n	8002de2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002de0:	bf00      	nop
	
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	2000000e 	.word	0x2000000e
 8002dec:	2000000c 	.word	0x2000000c
 8002df0:	40020800 	.word	0x40020800
 8002df4:	200002c4 	.word	0x200002c4

08002df8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	80fb      	strh	r3, [r7, #6]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80bb      	strh	r3, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	807b      	strh	r3, [r7, #2]
 8002e12:	4613      	mov	r3, r2
 8002e14:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <ILI9341_Draw_Rectangle+0xb0>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d23d      	bcs.n	8002e9e <ILI9341_Draw_Rectangle+0xa6>
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <ILI9341_Draw_Rectangle+0xb4>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	88ba      	ldrh	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d237      	bcs.n	8002e9e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002e2e:	88fa      	ldrh	r2, [r7, #6]
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <ILI9341_Draw_Rectangle+0xb0>)
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	dd05      	ble.n	8002e4a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <ILI9341_Draw_Rectangle+0xb0>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002e4a:	88ba      	ldrh	r2, [r7, #4]
 8002e4c:	883b      	ldrh	r3, [r7, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <ILI9341_Draw_Rectangle+0xb4>)
 8002e52:	8812      	ldrh	r2, [r2, #0]
 8002e54:	b292      	uxth	r2, r2
 8002e56:	4293      	cmp	r3, r2
 8002e58:	dd05      	ble.n	8002e66 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <ILI9341_Draw_Rectangle+0xb4>)
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	88bb      	ldrh	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29c      	uxth	r4, r3
 8002e72:	88ba      	ldrh	r2, [r7, #4]
 8002e74:	883b      	ldrh	r3, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	88b9      	ldrh	r1, [r7, #4]
 8002e80:	88f8      	ldrh	r0, [r7, #6]
 8002e82:	4622      	mov	r2, r4
 8002e84:	f7ff fc44 	bl	8002710 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002e88:	883b      	ldrh	r3, [r7, #0]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	fb02 f303 	mul.w	r3, r2, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	8b3b      	ldrh	r3, [r7, #24]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe10 	bl	8002abc <ILI9341_Draw_Colour_Burst>
 8002e9c:	e000      	b.n	8002ea0 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002e9e:	bf00      	nop
}
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000000e 	.word	0x2000000e
 8002eac:	2000000c 	.word	0x2000000c

08002eb0 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002ebe:	e019      	b.n	8002ef4 <TP_Read+0x44>
    {
        value <<= 1;
 8002ec0:	88bb      	ldrh	r3, [r7, #4]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2108      	movs	r1, #8
 8002eca:	480e      	ldr	r0, [pc, #56]	; (8002f04 <TP_Read+0x54>)
 8002ecc:	f001 f90c 	bl	80040e8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	480b      	ldr	r0, [pc, #44]	; (8002f04 <TP_Read+0x54>)
 8002ed6:	f001 f907 	bl	80040e8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002eda:	2110      	movs	r1, #16
 8002edc:	4809      	ldr	r0, [pc, #36]	; (8002f04 <TP_Read+0x54>)
 8002ede:	f001 f8eb 	bl	80040b8 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <TP_Read+0x3e>
        {
            value++;
 8002ee8:	88bb      	ldrh	r3, [r7, #4]
 8002eea:	3301      	adds	r3, #1
 8002eec:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e2      	bne.n	8002ec0 <TP_Read+0x10>
    };

    return value;
 8002efa:	88bb      	ldrh	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002f12:	2308      	movs	r3, #8
 8002f14:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002f16:	2200      	movs	r2, #0
 8002f18:	2108      	movs	r1, #8
 8002f1a:	4815      	ldr	r0, [pc, #84]	; (8002f70 <TP_Write+0x68>)
 8002f1c:	f001 f8e4 	bl	80040e8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002f20:	e01e      	b.n	8002f60 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da05      	bge.n	8002f36 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	4810      	ldr	r0, [pc, #64]	; (8002f70 <TP_Write+0x68>)
 8002f30:	f001 f8da 	bl	80040e8 <HAL_GPIO_WritePin>
 8002f34:	e004      	b.n	8002f40 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2120      	movs	r1, #32
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <TP_Write+0x68>)
 8002f3c:	f001 f8d4 	bl	80040e8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002f46:	2201      	movs	r2, #1
 8002f48:	2108      	movs	r1, #8
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <TP_Write+0x68>)
 8002f4c:	f001 f8cc 	bl	80040e8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002f50:	2200      	movs	r2, #0
 8002f52:	2108      	movs	r1, #8
 8002f54:	4806      	ldr	r0, [pc, #24]	; (8002f70 <TP_Write+0x68>)
 8002f56:	f001 f8c7 	bl	80040e8 <HAL_GPIO_WritePin>
        i--;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1dd      	bne.n	8002f22 <TP_Write+0x1a>
    };
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	00000000 	.word	0x00000000

08002f78 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002f80:	2201      	movs	r2, #1
 8002f82:	2108      	movs	r1, #8
 8002f84:	485a      	ldr	r0, [pc, #360]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8002f86:	f001 f8af 	bl	80040e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	4858      	ldr	r0, [pc, #352]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8002f90:	f001 f8aa 	bl	80040e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002f94:	2201      	movs	r2, #1
 8002f96:	2140      	movs	r1, #64	; 0x40
 8002f98:	4855      	ldr	r0, [pc, #340]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8002f9a:	f001 f8a5 	bl	80040e8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2140      	movs	r1, #64	; 0x40
 8002fb8:	484d      	ldr	r0, [pc, #308]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8002fba:	f001 f895 	bl	80040e8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002fbe:	e023      	b.n	8003008 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002fc0:	2090      	movs	r0, #144	; 0x90
 8002fc2:	f7ff ffa1 	bl	8002f08 <TP_Write>

				rawy = TP_Read();	
 8002fc6:	f7ff ff73 	bl	8002eb0 <TP_Read>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4413      	add	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002fde:	20d0      	movs	r0, #208	; 0xd0
 8002fe0:	f7ff ff92 	bl	8002f08 <TP_Write>
        rawx = TP_Read();
 8002fe4:	f7ff ff64 	bl	8002eb0 <TP_Read>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002fec:	89bb      	ldrh	r3, [r7, #12]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	4413      	add	r3, r2
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002ff4:	89bb      	ldrh	r3, [r7, #12]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	61fb      	str	r3, [r7, #28]
        samples--;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3301      	adds	r3, #1
 8003006:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <TP_Read_Coordinates+0xa4>
 800300e:	2104      	movs	r1, #4
 8003010:	4837      	ldr	r0, [pc, #220]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8003012:	f001 f851 	bl	80040b8 <HAL_GPIO_ReadPin>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0d1      	beq.n	8002fc0 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800301c:	2201      	movs	r2, #1
 800301e:	2140      	movs	r1, #64	; 0x40
 8003020:	4833      	ldr	r0, [pc, #204]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8003022:	f001 f861 	bl	80040e8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302c:	d14d      	bne.n	80030ca <TP_Read_Coordinates+0x152>
 800302e:	2104      	movs	r1, #4
 8003030:	482f      	ldr	r0, [pc, #188]	; (80030f0 <TP_Read_Coordinates+0x178>)
 8003032:	f001 f841 	bl	80040b8 <HAL_GPIO_ReadPin>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d146      	bne.n	80030ca <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003058:	89bb      	ldrh	r3, [r7, #12]
 800305a:	425b      	negs	r3, r3
 800305c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	425b      	negs	r3, r3
 8003062:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8003064:	89ba      	ldrh	r2, [r7, #12]
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <TP_Read_Coordinates+0x17c>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	1ad2      	subs	r2, r2, r3
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	4413      	add	r3, r2
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	b29b      	uxth	r3, r3
 8003076:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003082:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80030e8 <TP_Read_Coordinates+0x170>
 8003086:	ee27 7b06 	vmul.f64	d7, d7, d6
 800308a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800308e:	ee17 3a90 	vmov	r3, s15
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8003098:	89fb      	ldrh	r3, [r7, #14]
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <TP_Read_Coordinates+0x180>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	09db      	lsrs	r3, r3, #7
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b0f      	subs	r3, #15
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80030ae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80030e8 <TP_Read_Coordinates+0x170>
 80030b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3302      	adds	r3, #2
 80030ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80030be:	ee17 2a90 	vmov	r2, s15
 80030c2:	b292      	uxth	r2, r2
 80030c4:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80030c6:	2301      	movs	r3, #1
 80030c8:	e007      	b.n	80030da <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3302      	adds	r3, #2
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80030d8:	2300      	movs	r3, #0
		}
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	28f5c28f 	.word	0x28f5c28f
 80030ec:	3ff28f5c 	.word	0x3ff28f5c
 80030f0:	40021000 	.word	0x40021000
 80030f4:	e01e01e1 	.word	0xe01e01e1
 80030f8:	a0a0a0a1 	.word	0xa0a0a0a1

080030fc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003100:	2104      	movs	r1, #4
 8003102:	4805      	ldr	r0, [pc, #20]	; (8003118 <TP_Touchpad_Pressed+0x1c>)
 8003104:	f000 ffd8 	bl	80040b8 <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003112:	2300      	movs	r3, #0
	}
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_Init+0x34>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_Init+0x34>)
 8003126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_Init+0x34>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a07      	ldr	r2, [pc, #28]	; (8003150 <HAL_Init+0x34>)
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f000 fd3d 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800313e:	2000      	movs	r0, #0
 8003140:	f000 f808 	bl	8003154 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003144:	f7fe fe06 	bl	8001d54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_InitTick+0x54>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_InitTick+0x58>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fd55 	bl	8003c22 <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e00e      	b.n	80031a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d80a      	bhi.n	800319e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f000 fd1d 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003194:	4a06      	ldr	r2, [pc, #24]	; (80031b0 <HAL_InitTick+0x5c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000008 	.word	0x20000008
 80031ac:	20000014 	.word	0x20000014
 80031b0:	20000010 	.word	0x20000010

080031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000014 	.word	0x20000014
 80031d8:	200004cc 	.word	0x200004cc

080031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200004cc 	.word	0x200004cc

080031f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031fc:	f7ff ffee 	bl	80031dc <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d005      	beq.n	800321a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_Delay+0x44>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321a:	bf00      	nop
 800321c:	f7ff ffde 	bl	80031dc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	429a      	cmp	r2, r3
 800322a:	d8f7      	bhi.n	800321c <HAL_Delay+0x28>
  {
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000014 	.word	0x20000014

0800323c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e031      	b.n	80032b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fa18 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_Init+0x84>)
 8003280:	4013      	ands	r3, r2
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 faca 	bl	8003824 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
 80032a6:	e001      	b.n	80032ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	ffffeefd 	.word	0xffffeefd

080032c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Start+0x1a>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0ad      	b.n	800343a <HAL_ADC_Start+0x176>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d018      	beq.n	8003326 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_ADC_Start+0x184>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a50      	ldr	r2, [pc, #320]	; (800344c <HAL_ADC_Start+0x188>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9a      	lsrs	r2, r3, #18
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003318:	e002      	b.n	8003320 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f9      	bne.n	800331a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d175      	bne.n	8003420 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	4b45      	ldr	r3, [pc, #276]	; (8003450 <HAL_ADC_Start+0x18c>)
 800333a:	4013      	ands	r3, r2
 800333c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800335a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d106      	bne.n	800337e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f023 0206 	bic.w	r2, r3, #6
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
 800337c:	e002      	b.n	8003384 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003394:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003396:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_ADC_Start+0x190>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d143      	bne.n	8003438 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e03a      	b.n	8003438 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_ADC_Start+0x194>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10e      	bne.n	80033ea <HAL_ADC_Start+0x126>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d107      	bne.n	80033ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_ADC_Start+0x190>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d120      	bne.n	8003438 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_ADC_Start+0x198>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d11b      	bne.n	8003438 <HAL_ADC_Start+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d114      	bne.n	8003438 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	e00b      	b.n	8003438 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0210 	orr.w	r2, r3, #16
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000008 	.word	0x20000008
 800344c:	431bde83 	.word	0x431bde83
 8003450:	fffff8fe 	.word	0xfffff8fe
 8003454:	40012300 	.word	0x40012300
 8003458:	40012000 	.word	0x40012000
 800345c:	40012200 	.word	0x40012200

08003460 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d113      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d10b      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e063      	b.n	800356e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034a6:	f7ff fe99 	bl	80031dc <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d01d      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_ADC_PollForConversion+0x6c>
 80034bc:	f7ff fe8e 	bl	80031dc <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d212      	bcs.n	80034f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d00b      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e03d      	b.n	800356e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d1d6      	bne.n	80034ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0212 	mvn.w	r2, #18
 8003508:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d123      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11f      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d111      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e12a      	b.n	8003802 <HAL_ADC_ConfigChannel+0x272>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	d93a      	bls.n	8003632 <HAL_ADC_ConfigChannel+0xa2>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c4:	d035      	beq.n	8003632 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68d9      	ldr	r1, [r3, #12]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	3b1e      	subs	r3, #30
 80035dc:	2207      	movs	r2, #7
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	400a      	ands	r2, r1
 80035ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a87      	ldr	r2, [pc, #540]	; (8003810 <HAL_ADC_ConfigChannel+0x280>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10a      	bne.n	800360c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	061a      	lsls	r2, r3, #24
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800360a:	e035      	b.n	8003678 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68d9      	ldr	r1, [r3, #12]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	4618      	mov	r0, r3
 800361e:	4603      	mov	r3, r0
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4403      	add	r3, r0
 8003624:	3b1e      	subs	r3, #30
 8003626:	409a      	lsls	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003630:	e022      	b.n	8003678 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6919      	ldr	r1, [r3, #16]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	2207      	movs	r2, #7
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43da      	mvns	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	400a      	ands	r2, r1
 8003654:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6919      	ldr	r1, [r3, #16]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	b29b      	uxth	r3, r3
 8003666:	4618      	mov	r0, r3
 8003668:	4603      	mov	r3, r0
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4403      	add	r3, r0
 800366e:	409a      	lsls	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b06      	cmp	r3, #6
 800367e:	d824      	bhi.n	80036ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	3b05      	subs	r3, #5
 8003692:	221f      	movs	r2, #31
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43da      	mvns	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	400a      	ands	r2, r1
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b05      	subs	r3, #5
 80036bc:	fa00 f203 	lsl.w	r2, r0, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	635a      	str	r2, [r3, #52]	; 0x34
 80036c8:	e04c      	b.n	8003764 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d824      	bhi.n	800371c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3b23      	subs	r3, #35	; 0x23
 80036e4:	221f      	movs	r2, #31
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	400a      	ands	r2, r1
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4618      	mov	r0, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b23      	subs	r3, #35	; 0x23
 800370e:	fa00 f203 	lsl.w	r2, r0, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
 800371a:	e023      	b.n	8003764 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	3b41      	subs	r3, #65	; 0x41
 800372e:	221f      	movs	r2, #31
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43da      	mvns	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	400a      	ands	r2, r1
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	4618      	mov	r0, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	3b41      	subs	r3, #65	; 0x41
 8003758:	fa00 f203 	lsl.w	r2, r0, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <HAL_ADC_ConfigChannel+0x284>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10a      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1f4>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003776:	d105      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 800377e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003782:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a22      	ldr	r2, [pc, #136]	; (8003814 <HAL_ADC_ConfigChannel+0x284>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d109      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x212>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b12      	cmp	r3, #18
 8003794:	d105      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 800379c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_ADC_ConfigChannel+0x284>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x268>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_ADC_ConfigChannel+0x280>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <HAL_ADC_ConfigChannel+0x22e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b11      	cmp	r3, #17
 80037bc:	d11c      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <HAL_ADC_ConfigChannel+0x288>)
 80037c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_ADC_ConfigChannel+0x280>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_ADC_ConfigChannel+0x28c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a11      	ldr	r2, [pc, #68]	; (8003820 <HAL_ADC_ConfigChannel+0x290>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0c9a      	lsrs	r2, r3, #18
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80037ea:	e002      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f9      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	10000012 	.word	0x10000012
 8003814:	40012000 	.word	0x40012000
 8003818:	40012300 	.word	0x40012300
 800381c:	20000008 	.word	0x20000008
 8003820:	431bde83 	.word	0x431bde83

08003824 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800382c:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <ADC_Init+0x1ec>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a77      	ldr	r2, [pc, #476]	; (8003a10 <ADC_Init+0x1ec>)
 8003832:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003836:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003838:	4b75      	ldr	r3, [pc, #468]	; (8003a10 <ADC_Init+0x1ec>)
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4973      	ldr	r1, [pc, #460]	; (8003a10 <ADC_Init+0x1ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <ADC_Init+0x1f0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6899      	ldr	r1, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e00f      	b.n	800391e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800390c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800391c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0202 	bic.w	r2, r2, #2
 800392c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6899      	ldr	r1, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	005a      	lsls	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01b      	beq.n	8003984 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800396a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	3b01      	subs	r3, #1
 8003978:	035a      	lsls	r2, r3, #13
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	e007      	b.n	8003994 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003992:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	051a      	lsls	r2, r3, #20
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6899      	ldr	r1, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039d6:	025a      	lsls	r2, r3, #9
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	029a      	lsls	r2, r3, #10
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40012300 	.word	0x40012300
 8003a14:	0f000001 	.word	0x0f000001

08003a18 <__NVIC_SetPriorityGrouping>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <__NVIC_SetPriorityGrouping+0x40>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x40>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00
 8003a5c:	05fa0000 	.word	0x05fa0000

08003a60 <__NVIC_GetPriorityGrouping>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_EnableIRQ>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	; (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	; (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff8e 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff29 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff3e 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff8e 	bl	8003b0c <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5d 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff31 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff fac8 	bl	80031dc <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d008      	beq.n	8003c6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e052      	b.n	8003d12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0216 	bic.w	r2, r2, #22
 8003c7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <HAL_DMA_Abort+0x62>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0208 	bic.w	r2, r2, #8
 8003caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cbc:	e013      	b.n	8003ce6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cbe:	f7ff fa8d 	bl	80031dc <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d90c      	bls.n	8003ce6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e015      	b.n	8003d12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e4      	bne.n	8003cbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	223f      	movs	r2, #63	; 0x3f
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d004      	beq.n	8003d38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00c      	b.n	8003d52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e175      	b.n	800406c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	f040 8164 	bne.w	8004066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d00b      	beq.n	8003dbe <HAL_GPIO_Init+0x5e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003db2:	2b11      	cmp	r3, #17
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b12      	cmp	r3, #18
 8003dbc:	d130      	bne.n	8003e20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df4:	2201      	movs	r2, #1
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 0201 	and.w	r2, r3, #1
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d003      	beq.n	8003e60 <HAL_GPIO_Init+0x100>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b12      	cmp	r3, #18
 8003e5e:	d123      	bne.n	8003ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	69b9      	ldr	r1, [r7, #24]
 8003ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80be 	beq.w	8004066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	4b66      	ldr	r3, [pc, #408]	; (8004084 <HAL_GPIO_Init+0x324>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a65      	ldr	r2, [pc, #404]	; (8004084 <HAL_GPIO_Init+0x324>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b63      	ldr	r3, [pc, #396]	; (8004084 <HAL_GPIO_Init+0x324>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f02:	4a61      	ldr	r2, [pc, #388]	; (8004088 <HAL_GPIO_Init+0x328>)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	220f      	movs	r2, #15
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_GPIO_Init+0x32c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d037      	beq.n	8003f9e <HAL_GPIO_Init+0x23e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a57      	ldr	r2, [pc, #348]	; (8004090 <HAL_GPIO_Init+0x330>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_GPIO_Init+0x23a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a56      	ldr	r2, [pc, #344]	; (8004094 <HAL_GPIO_Init+0x334>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <HAL_GPIO_Init+0x236>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a55      	ldr	r2, [pc, #340]	; (8004098 <HAL_GPIO_Init+0x338>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d025      	beq.n	8003f92 <HAL_GPIO_Init+0x232>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a54      	ldr	r2, [pc, #336]	; (800409c <HAL_GPIO_Init+0x33c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <HAL_GPIO_Init+0x22e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a53      	ldr	r2, [pc, #332]	; (80040a0 <HAL_GPIO_Init+0x340>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x22a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_GPIO_Init+0x344>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x226>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a51      	ldr	r2, [pc, #324]	; (80040a8 <HAL_GPIO_Init+0x348>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x222>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a50      	ldr	r2, [pc, #320]	; (80040ac <HAL_GPIO_Init+0x34c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x21e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4f      	ldr	r2, [pc, #316]	; (80040b0 <HAL_GPIO_Init+0x350>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x21a>
 8003f76:	2309      	movs	r3, #9
 8003f78:	e012      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	e010      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	e00e      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f82:	2307      	movs	r3, #7
 8003f84:	e00c      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f86:	2306      	movs	r3, #6
 8003f88:	e00a      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f8a:	2305      	movs	r3, #5
 8003f8c:	e008      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e004      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e002      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_GPIO_Init+0x240>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	f002 0203 	and.w	r2, r2, #3
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fb0:	4935      	ldr	r1, [pc, #212]	; (8004088 <HAL_GPIO_Init+0x328>)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbe:	4b3d      	ldr	r3, [pc, #244]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe2:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe8:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <HAL_GPIO_Init+0x354>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004036:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_GPIO_Init+0x354>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <HAL_GPIO_Init+0x354>)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3301      	adds	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	2b0f      	cmp	r3, #15
 8004070:	f67f ae86 	bls.w	8003d80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	40013800 	.word	0x40013800
 800408c:	40020000 	.word	0x40020000
 8004090:	40020400 	.word	0x40020400
 8004094:	40020800 	.word	0x40020800
 8004098:	40020c00 	.word	0x40020c00
 800409c:	40021000 	.word	0x40021000
 80040a0:	40021400 	.word	0x40021400
 80040a4:	40021800 	.word	0x40021800
 80040a8:	40021c00 	.word	0x40021c00
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40022400 	.word	0x40022400
 80040b4:	40013c00 	.word	0x40013c00

080040b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e001      	b.n	80040da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]
 80040f4:	4613      	mov	r3, r2
 80040f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f8:	787b      	ldrb	r3, [r7, #1]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004104:	e003      	b.n	800410e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	041a      	lsls	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	619a      	str	r2, [r3, #24]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fd0e 	bl	8001b5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fc82 	bl	8000a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800419c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e006      	b.n	80041d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d104      	bne.n	80041e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_I2C_Init+0x11c>)
 80041f2:	430b      	orrs	r3, r1
 80041f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	ea42 0103 	orr.w	r1, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	02008000 	.word	0x02008000

0800426c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	d138      	bne.n	80042f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800428c:	2302      	movs	r3, #2
 800428e:	e032      	b.n	80042f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d139      	bne.n	800438c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004322:	2302      	movs	r3, #2
 8004324:	e033      	b.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40007000 	.word	0x40007000

080043bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_PWREx_EnableOverDrive+0x98>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_PWREx_EnableOverDrive+0x98>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_PWREx_EnableOverDrive+0x98>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ea:	f7fe fef7 	bl	80031dc <HAL_GetTick>
 80043ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043f0:	e009      	b.n	8004406 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043f2:	f7fe fef3 	bl	80031dc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004400:	d901      	bls.n	8004406 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e022      	b.n	800444c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004412:	d1ee      	bne.n	80043f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004420:	f7fe fedc 	bl	80031dc <HAL_GetTick>
 8004424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004426:	e009      	b.n	800443c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004428:	f7fe fed8 	bl	80031dc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004436:	d901      	bls.n	800443c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e007      	b.n	800444c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_PWREx_EnableOverDrive+0x9c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004448:	d1ee      	bne.n	8004428 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000

0800445c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e29b      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8087 	beq.w	800458e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004480:	4b96      	ldr	r3, [pc, #600]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b04      	cmp	r3, #4
 800448a:	d00c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448c:	4b93      	ldr	r3, [pc, #588]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d112      	bne.n	80044be <HAL_RCC_OscConfig+0x62>
 8004498:	4b90      	ldr	r3, [pc, #576]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a4:	d10b      	bne.n	80044be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a6:	4b8d      	ldr	r3, [pc, #564]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d06c      	beq.n	800458c <HAL_RCC_OscConfig+0x130>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d168      	bne.n	800458c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e275      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x7a>
 80044c8:	4b84      	ldr	r3, [pc, #528]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a83      	ldr	r2, [pc, #524]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e02e      	b.n	8004534 <HAL_RCC_OscConfig+0xd8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x9c>
 80044de:	4b7f      	ldr	r3, [pc, #508]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b7c      	ldr	r3, [pc, #496]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7b      	ldr	r2, [pc, #492]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80044f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e01d      	b.n	8004534 <HAL_RCC_OscConfig+0xd8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0xc0>
 8004502:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a75      	ldr	r2, [pc, #468]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b73      	ldr	r3, [pc, #460]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a72      	ldr	r2, [pc, #456]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0xd8>
 800451c:	4b6f      	ldr	r3, [pc, #444]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a6e      	ldr	r2, [pc, #440]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b6c      	ldr	r3, [pc, #432]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6b      	ldr	r2, [pc, #428]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800452e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d013      	beq.n	8004564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fe fe4e 	bl	80031dc <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fe fe4a 	bl	80031dc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e229      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0xe8>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe fe3a 	bl	80031dc <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fe fe36 	bl	80031dc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e215      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	4b57      	ldr	r3, [pc, #348]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x110>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d069      	beq.n	800466e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459a:	4b50      	ldr	r3, [pc, #320]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a6:	4b4d      	ldr	r3, [pc, #308]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d11c      	bne.n	80045ec <HAL_RCC_OscConfig+0x190>
 80045b2:	4b4a      	ldr	r3, [pc, #296]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d116      	bne.n	80045ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045be:	4b47      	ldr	r3, [pc, #284]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x17a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e1e9      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	4b41      	ldr	r3, [pc, #260]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	493d      	ldr	r1, [pc, #244]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	e040      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d023      	beq.n	800463c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a38      	ldr	r2, [pc, #224]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004600:	f7fe fdec 	bl	80031dc <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fe fde8 	bl	80031dc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1c7      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461a:	4b30      	ldr	r3, [pc, #192]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4929      	ldr	r1, [pc, #164]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
 800463a:	e018      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a26      	ldr	r2, [pc, #152]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe fdc8 	bl	80031dc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe fdc4 	bl	80031dc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1a3      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d038      	beq.n	80046ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fe fda5 	bl	80031dc <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004696:	f7fe fda1 	bl	80031dc <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e180      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x23a>
 80046b4:	e01a      	b.n	80046ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_RCC_OscConfig+0x280>)
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fe fd8b 	bl	80031dc <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fe fd87 	bl	80031dc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d903      	bls.n	80046e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e166      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
 80046dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b92      	ldr	r3, [pc, #584]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ee      	bne.n	80046ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a4 	beq.w	8004842 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b8c      	ldr	r3, [pc, #560]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	4b89      	ldr	r3, [pc, #548]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a88      	ldr	r2, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b86      	ldr	r3, [pc, #536]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	2301      	movs	r3, #1
 8004720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCC_OscConfig+0x4d4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d118      	bne.n	8004760 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800472e:	4b80      	ldr	r3, [pc, #512]	; (8004930 <HAL_RCC_OscConfig+0x4d4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7f      	ldr	r2, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4d4>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473a:	f7fe fd4f 	bl	80031dc <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004742:	f7fe fd4b 	bl	80031dc <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b64      	cmp	r3, #100	; 0x64
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e12a      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004754:	4b76      	ldr	r3, [pc, #472]	; (8004930 <HAL_RCC_OscConfig+0x4d4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x31a>
 8004768:	4b70      	ldr	r3, [pc, #448]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a6f      	ldr	r2, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
 8004774:	e02d      	b.n	80047d2 <HAL_RCC_OscConfig+0x376>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x33c>
 800477e:	4b6b      	ldr	r3, [pc, #428]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a6a      	ldr	r2, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
 800478a:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a67      	ldr	r2, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
 8004796:	e01c      	b.n	80047d2 <HAL_RCC_OscConfig+0x376>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b05      	cmp	r3, #5
 800479e:	d10c      	bne.n	80047ba <HAL_RCC_OscConfig+0x35e>
 80047a0:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	4a61      	ldr	r2, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	6713      	str	r3, [r2, #112]	; 0x70
 80047ac:	4b5f      	ldr	r3, [pc, #380]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a5e      	ldr	r2, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
 80047b8:	e00b      	b.n	80047d2 <HAL_RCC_OscConfig+0x376>
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a5b      	ldr	r2, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
 80047c6:	4b59      	ldr	r3, [pc, #356]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a58      	ldr	r2, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d015      	beq.n	8004806 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fe fcff 	bl	80031dc <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fe fcfb 	bl	80031dc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e0d8      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	4b4c      	ldr	r3, [pc, #304]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ee      	beq.n	80047e2 <HAL_RCC_OscConfig+0x386>
 8004804:	e014      	b.n	8004830 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fe fce9 	bl	80031dc <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fe fce5 	bl	80031dc <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e0c2      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004824:	4b41      	ldr	r3, [pc, #260]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ee      	bne.n	800480e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004836:	4b3d      	ldr	r3, [pc, #244]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4a3c      	ldr	r2, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800483c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80ae 	beq.w	80049a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484c:	4b37      	ldr	r3, [pc, #220]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b08      	cmp	r3, #8
 8004856:	d06d      	beq.n	8004934 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d14b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004860:	4b32      	ldr	r3, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a31      	ldr	r2, [pc, #196]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fe fcb6 	bl	80031dc <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fe fcb2 	bl	80031dc <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e091      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b29      	ldr	r3, [pc, #164]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	491b      	ldr	r1, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fe fc84 	bl	80031dc <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fe fc80 	bl	80031dc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e05f      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x47c>
 80048f6:	e057      	b.n	80049a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fe fc6a 	bl	80031dc <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe fc66 	bl	80031dc <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e045      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_OscConfig+0x4d0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x4b0>
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x54c>
 800492c:	40023800 	.word	0x40023800
 8004930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004934:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <HAL_RCC_OscConfig+0x558>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d030      	beq.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d129      	bne.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d122      	bne.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800496a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800496c:	4293      	cmp	r3, r2
 800496e:	d119      	bne.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d10f      	bne.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0d0      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b6a      	ldr	r3, [pc, #424]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d910      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 020f 	bic.w	r2, r3, #15
 80049e6:	4965      	ldr	r1, [pc, #404]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d040      	beq.n	8004adc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d115      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e073      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e06b      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9a:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 0203 	bic.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4936      	ldr	r1, [pc, #216]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aac:	f7fe fb96 	bl	80031dc <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab4:	f7fe fb92 	bl	80031dc <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e053      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 020c 	and.w	r2, r3, #12
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d1eb      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004adc:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d210      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 020f 	bic.w	r2, r3, #15
 8004af2:	4922      	ldr	r1, [pc, #136]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 f821 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x1cc>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1d0>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1d4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe faf2 	bl	8003154 <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800a860 	.word	0x0800a860
 8004b88:	20000008 	.word	0x20000008
 8004b8c:	20000010 	.word	0x20000010

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b094      	sub	sp, #80	; 0x50
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba8:	4b79      	ldr	r3, [pc, #484]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 80e1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc2:	e0db      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc8:	e0db      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bce:	e0d8      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	6139      	str	r1, [r7, #16]
 8004c20:	4629      	mov	r1, r5
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c34:	4659      	mov	r1, fp
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4651      	mov	r1, sl
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	ebb2 0801 	subs.w	r8, r2, r1
 8004c48:	4659      	mov	r1, fp
 8004c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	462b      	mov	r3, r5
 8004c70:	eb49 0303 	adc.w	r3, r9, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c82:	4629      	mov	r1, r5
 8004c84:	024b      	lsls	r3, r1, #9
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	024a      	lsls	r2, r1, #9
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca0:	f7fb fb26 	bl	80002f0 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cac:	e058      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cae:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4611      	mov	r1, r2
 8004cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	f04f 0000 	mov.w	r0, #0
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cda:	0150      	lsls	r0, r2, #5
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d00:	ebb2 040a 	subs.w	r4, r2, sl
 8004d04:	eb63 050b 	sbc.w	r5, r3, fp
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	61fa      	str	r2, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	f7fb facc 	bl	80002f0 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3750      	adds	r7, #80	; 0x50
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	007a1200 	.word	0x007a1200

08004d9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000008 	.word	0x20000008

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	0800a870 	.word	0x0800a870

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004de0:	f7ff ffdc 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0b5b      	lsrs	r3, r3, #13
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4903      	ldr	r1, [pc, #12]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	0800a870 	.word	0x0800a870

08004e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e2c:	4b69      	ldr	r3, [pc, #420]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a68      	ldr	r2, [pc, #416]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e36:	6093      	str	r3, [r2, #8]
 8004e38:	4b66      	ldr	r3, [pc, #408]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	4964      	ldr	r1, [pc, #400]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e5e:	4b5d      	ldr	r3, [pc, #372]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	4959      	ldr	r1, [pc, #356]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d017      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	494a      	ldr	r1, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 808b 	beq.w	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b3a      	ldr	r3, [pc, #232]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	4a39      	ldr	r2, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef4:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a34      	ldr	r2, [pc, #208]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fe f966 	bl	80031dc <HAL_GetTick>
 8004f10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f14:	f7fe f962 	bl	80031dc <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e38f      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f26:	4b2c      	ldr	r3, [pc, #176]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d035      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d02e      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f66:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f72:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f78:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d114      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fe f92a 	bl	80031dc <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fe f926 	bl	80031dc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e351      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ee      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fba:	d111      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fc8:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	4901      	ldr	r1, [pc, #4]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	0ffffcff 	.word	0x0ffffcff
 8004fe0:	4bac      	ldr	r3, [pc, #688]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4aab      	ldr	r2, [pc, #684]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fea:	6093      	str	r3, [r2, #8]
 8004fec:	4ba9      	ldr	r3, [pc, #676]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff8:	49a6      	ldr	r1, [pc, #664]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0310 	and.w	r3, r3, #16
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800500a:	4ba2      	ldr	r3, [pc, #648]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	4aa0      	ldr	r2, [pc, #640]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800501a:	4b9e      	ldr	r3, [pc, #632]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	499b      	ldr	r1, [pc, #620]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005038:	4b96      	ldr	r3, [pc, #600]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005046:	4993      	ldr	r1, [pc, #588]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800505a:	4b8e      	ldr	r3, [pc, #568]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005068:	498a      	ldr	r1, [pc, #552]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800507c:	4b85      	ldr	r3, [pc, #532]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508a:	4982      	ldr	r1, [pc, #520]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800509e:	4b7d      	ldr	r3, [pc, #500]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4979      	ldr	r1, [pc, #484]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c0:	4b74      	ldr	r3, [pc, #464]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4971      	ldr	r1, [pc, #452]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e2:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f023 020c 	bic.w	r2, r3, #12
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f0:	4968      	ldr	r1, [pc, #416]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005104:	4b63      	ldr	r3, [pc, #396]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	4960      	ldr	r1, [pc, #384]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005126:	4b5b      	ldr	r3, [pc, #364]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005134:	4957      	ldr	r1, [pc, #348]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005148:	4b52      	ldr	r3, [pc, #328]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	494f      	ldr	r1, [pc, #316]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800516a:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	4946      	ldr	r1, [pc, #280]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800518c:	4b41      	ldr	r3, [pc, #260]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519a:	493e      	ldr	r1, [pc, #248]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80051ae:	4b39      	ldr	r3, [pc, #228]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	4935      	ldr	r1, [pc, #212]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051de:	492d      	ldr	r1, [pc, #180]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d011      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051f2:	4b28      	ldr	r3, [pc, #160]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005200:	4924      	ldr	r1, [pc, #144]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005210:	d101      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	4914      	ldr	r1, [pc, #80]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005264:	490b      	ldr	r1, [pc, #44]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	4902      	ldr	r1, [pc, #8]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005290:	e002      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052a4:	4b8a      	ldr	r3, [pc, #552]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	4986      	ldr	r1, [pc, #536]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052c8:	4b81      	ldr	r3, [pc, #516]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d8:	497d      	ldr	r1, [pc, #500]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d006      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80d6 	beq.w	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052f4:	4b76      	ldr	r3, [pc, #472]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a75      	ldr	r2, [pc, #468]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005300:	f7fd ff6c 	bl	80031dc <HAL_GetTick>
 8005304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005308:	f7fd ff68 	bl	80031dc <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e195      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800531a:	4b6d      	ldr	r3, [pc, #436]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d021      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d11d      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800533a:	4b65      	ldr	r3, [pc, #404]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005348:	4b61      	ldr	r3, [pc, #388]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534e:	0e1b      	lsrs	r3, r3, #24
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	019a      	lsls	r2, r3, #6
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	431a      	orrs	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	071b      	lsls	r3, r3, #28
 800536e:	4958      	ldr	r1, [pc, #352]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02e      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a0:	d129      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053a2:	4b4b      	ldr	r3, [pc, #300]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b0:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b6:	0f1b      	lsrs	r3, r3, #28
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	019a      	lsls	r2, r3, #6
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	071b      	lsls	r3, r3, #28
 80053d6:	493e      	ldr	r1, [pc, #248]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053de:	4b3c      	ldr	r3, [pc, #240]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e4:	f023 021f 	bic.w	r2, r3, #31
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	3b01      	subs	r3, #1
 80053ee:	4938      	ldr	r1, [pc, #224]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01d      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005408:	0e1b      	lsrs	r3, r3, #24
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005416:	0f1b      	lsrs	r3, r3, #28
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	019a      	lsls	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	431a      	orrs	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	071b      	lsls	r3, r3, #28
 8005436:	4926      	ldr	r1, [pc, #152]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d011      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	019a      	lsls	r2, r3, #6
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	071b      	lsls	r3, r3, #28
 8005466:	491a      	ldr	r1, [pc, #104]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547a:	f7fd feaf 	bl	80031dc <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005482:	f7fd feab 	bl	80031dc <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	; 0x64
 800548e:	d901      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0d8      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	f040 80ce 	bne.w	8005644 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b4:	f7fd fe92 	bl	80031dc <HAL_GetTick>
 80054b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054ba:	e00b      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054bc:	f7fd fe8e 	bl	80031dc <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b64      	cmp	r3, #100	; 0x64
 80054c8:	d904      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0bb      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054d4:	4b5e      	ldr	r3, [pc, #376]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e0:	d0ec      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d02e      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d12a      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800550a:	4b51      	ldr	r3, [pc, #324]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005518:	4b4d      	ldr	r3, [pc, #308]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	019a      	lsls	r2, r3, #6
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	4944      	ldr	r1, [pc, #272]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005546:	4b42      	ldr	r3, [pc, #264]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	3b01      	subs	r3, #1
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	493d      	ldr	r1, [pc, #244]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d022      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005574:	d11d      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	0e1b      	lsrs	r3, r3, #24
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	0f1b      	lsrs	r3, r3, #28
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	019a      	lsls	r2, r3, #6
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	431a      	orrs	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	061b      	lsls	r3, r3, #24
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	071b      	lsls	r3, r3, #28
 80055aa:	4929      	ldr	r1, [pc, #164]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d028      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	0e1b      	lsrs	r3, r3, #24
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055cc:	4b20      	ldr	r3, [pc, #128]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	019a      	lsls	r2, r3, #6
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	431a      	orrs	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	061b      	lsls	r3, r3, #24
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	4917      	ldr	r1, [pc, #92]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	4911      	ldr	r1, [pc, #68]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fd fdde 	bl	80031dc <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005624:	f7fd fdda 	bl	80031dc <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e007      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800563e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005642:	d1ef      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800

08005654 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e01c      	b.n	80056a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	795b      	ldrb	r3, [r3, #5]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc faca 	bl	8001c10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e09d      	b.n	80057f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d108      	bne.n	80056d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ca:	d009      	beq.n	80056e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	61da      	str	r2, [r3, #28]
 80056d2:	e005      	b.n	80056e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc fae6 	bl	8001ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005716:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005720:	d902      	bls.n	8005728 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	e002      	b.n	800572e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800572c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005736:	d007      	beq.n	8005748 <HAL_SPI_Init+0xa0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005740:	d002      	beq.n	8005748 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	ea42 0103 	orr.w	r1, r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	0c1b      	lsrs	r3, r3, #16
 80057a4:	f003 0204 	and.w	r2, r3, #4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057c4:	ea42 0103 	orr.w	r1, r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b088      	sub	sp, #32
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_SPI_Transmit+0x22>
 800581c:	2302      	movs	r3, #2
 800581e:	e158      	b.n	8005ad2 <HAL_SPI_Transmit+0x2d4>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005828:	f7fd fcd8 	bl	80031dc <HAL_GetTick>
 800582c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d002      	beq.n	8005844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800583e:	2302      	movs	r3, #2
 8005840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005842:	e13d      	b.n	8005ac0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0x52>
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005854:	e134      	b.n	8005ac0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2203      	movs	r2, #3
 800585a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	d10f      	bne.n	80058c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d007      	beq.n	80058e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e8:	d94b      	bls.n	8005982 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_SPI_Transmit+0xfa>
 80058f2:	8afb      	ldrh	r3, [r7, #22]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d13e      	bne.n	8005976 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	881a      	ldrh	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	1c9a      	adds	r2, r3, #2
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800591c:	e02b      	b.n	8005976 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b02      	cmp	r3, #2
 800592a:	d112      	bne.n	8005952 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005950:	e011      	b.n	8005976 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005952:	f7fd fc43 	bl	80031dc <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d803      	bhi.n	800596a <HAL_SPI_Transmit+0x16c>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d102      	bne.n	8005970 <HAL_SPI_Transmit+0x172>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005974:	e0a4      	b.n	8005ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ce      	bne.n	800591e <HAL_SPI_Transmit+0x120>
 8005980:	e07c      	b.n	8005a7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Transmit+0x192>
 800598a:	8afb      	ldrh	r3, [r7, #22]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d170      	bne.n	8005a72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d912      	bls.n	80059c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b02      	subs	r3, #2
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059be:	e058      	b.n	8005a72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059e6:	e044      	b.n	8005a72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d12b      	bne.n	8005a4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d912      	bls.n	8005a26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	881a      	ldrh	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b02      	subs	r3, #2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a24:	e025      	b.n	8005a72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	7812      	ldrb	r2, [r2, #0]
 8005a32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a4c:	e011      	b.n	8005a72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4e:	f7fd fbc5 	bl	80031dc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d803      	bhi.n	8005a66 <HAL_SPI_Transmit+0x268>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d102      	bne.n	8005a6c <HAL_SPI_Transmit+0x26e>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a70:	e026      	b.n	8005ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1b5      	bne.n	80059e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f945 	bl	8005d10 <SPI_EndRxTxTransaction>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e000      	b.n	8005ac0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aec:	f7fd fb76 	bl	80031dc <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005afc:	f7fd fb6e 	bl	80031dc <HAL_GetTick>
 8005b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b02:	4b39      	ldr	r3, [pc, #228]	; (8005be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	015b      	lsls	r3, r3, #5
 8005b08:	0d1b      	lsrs	r3, r3, #20
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b12:	e054      	b.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d050      	beq.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b1c:	f7fd fb5e 	bl	80031dc <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d902      	bls.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d13d      	bne.n	8005bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4a:	d111      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b54:	d004      	beq.n	8005b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5e:	d107      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b78:	d10f      	bne.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e017      	b.n	8005bde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d19b      	bne.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000008 	.word	0x20000008

08005bec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bfa:	f7fd faef 	bl	80031dc <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	4413      	add	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c0a:	f7fd fae7 	bl	80031dc <HAL_GetTick>
 8005c0e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c10:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	0d1b      	lsrs	r3, r3, #20
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c28:	e062      	b.n	8005cf0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c30:	d109      	bne.n	8005c46 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005c44:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d050      	beq.n	8005cf0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c4e:	f7fd fac5 	bl	80031dc <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d902      	bls.n	8005c64 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d13d      	bne.n	8005ce0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7c:	d111      	bne.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c86:	d004      	beq.n	8005c92 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d107      	bne.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005caa:	d10f      	bne.n	8005ccc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e010      	b.n	8005d02 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d194      	bne.n	8005c2a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000008 	.word	0x20000008

08005d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff ff5f 	bl	8005bec <SPI_WaitFifoStateUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e027      	b.n	8005d94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff fec4 	bl	8005adc <SPI_WaitFlagStateUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e014      	b.n	8005d94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ff38 	bl	8005bec <SPI_WaitFifoStateUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e000      	b.n	8005d94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e049      	b.n	8005e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc f9ae 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f000 fac6 	bl	800636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e054      	b.n	8005f0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d01d      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <HAL_TIM_Base_Start_IT+0xe0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0x80>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d115      	bne.n	8005ef8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <HAL_TIM_Base_Start_IT+0xec>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b06      	cmp	r3, #6
 8005edc:	d015      	beq.n	8005f0a <HAL_TIM_Base_Start_IT+0xbe>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee4:	d011      	beq.n	8005f0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef6:	e008      	b.n	8005f0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40001800 	.word	0x40001800
 8005f38:	00010007 	.word	0x00010007

08005f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0202 	mvn.w	r2, #2
 8005f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9d6 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9c8 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f9d9 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0204 	mvn.w	r2, #4
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9ac 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f99e 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9af 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0208 	mvn.w	r2, #8
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2204      	movs	r2, #4
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f982 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f974 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f985 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0210 	mvn.w	r2, #16
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2208      	movs	r2, #8
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f958 	bl	8006330 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f94a 	bl	800631c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f95b 	bl	8006344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0201 	mvn.w	r2, #1
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f924 	bl	8006308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fb12 	bl	8006710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fb05 	bl	8006724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f909 	bl	8006358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b20      	cmp	r3, #32
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0220 	mvn.w	r2, #32
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fac5 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIM_ConfigClockSource+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e0b3      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x180>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4b55      	ldr	r3, [pc, #340]	; (8006304 <HAL_TIM_ConfigClockSource+0x188>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061cc:	d03e      	beq.n	800624c <HAL_TIM_ConfigClockSource+0xd0>
 80061ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d2:	f200 8087 	bhi.w	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	f000 8085 	beq.w	80062e8 <HAL_TIM_ConfigClockSource+0x16c>
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d87f      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 80061e4:	2b70      	cmp	r3, #112	; 0x70
 80061e6:	d01a      	beq.n	800621e <HAL_TIM_ConfigClockSource+0xa2>
 80061e8:	2b70      	cmp	r3, #112	; 0x70
 80061ea:	d87b      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 80061ec:	2b60      	cmp	r3, #96	; 0x60
 80061ee:	d050      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x116>
 80061f0:	2b60      	cmp	r3, #96	; 0x60
 80061f2:	d877      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 80061f4:	2b50      	cmp	r3, #80	; 0x50
 80061f6:	d03c      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0xf6>
 80061f8:	2b50      	cmp	r3, #80	; 0x50
 80061fa:	d873      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d058      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x136>
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d86f      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d064      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x156>
 8006208:	2b30      	cmp	r3, #48	; 0x30
 800620a:	d86b      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d060      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x156>
 8006210:	2b20      	cmp	r3, #32
 8006212:	d867      	bhi.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d05c      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x156>
 8006218:	2b10      	cmp	r3, #16
 800621a:	d05a      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800621c:	e062      	b.n	80062e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6899      	ldr	r1, [r3, #8]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f000 f9b7 	bl	80065a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006240:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	609a      	str	r2, [r3, #8]
      break;
 800624a:	e04e      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6899      	ldr	r1, [r3, #8]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f000 f9a0 	bl	80065a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800626e:	609a      	str	r2, [r3, #8]
      break;
 8006270:	e03b      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6859      	ldr	r1, [r3, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	461a      	mov	r2, r3
 8006280:	f000 f914 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2150      	movs	r1, #80	; 0x50
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f96d 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8006290:	e02b      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 f933 	bl	800650a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2160      	movs	r1, #96	; 0x60
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f95d 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 80062b0:	e01b      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6859      	ldr	r1, [r3, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	461a      	mov	r2, r3
 80062c0:	f000 f8f4 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2140      	movs	r1, #64	; 0x40
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f94d 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 80062d0:	e00b      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f000 f944 	bl	800656a <TIM_ITRx_SetConfig>
        break;
 80062e2:	e002      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	fffeff88 	.word	0xfffeff88

08006308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638a:	d00f      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3d      	ldr	r2, [pc, #244]	; (8006484 <TIM_Base_SetConfig+0x118>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00b      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3c      	ldr	r2, [pc, #240]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d007      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3b      	ldr	r2, [pc, #236]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <TIM_Base_SetConfig+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063cc:	d027      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <TIM_Base_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d023      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <TIM_Base_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01f      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <TIM_Base_SetConfig+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a29      	ldr	r2, [pc, #164]	; (8006490 <TIM_Base_SetConfig+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d017      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a28      	ldr	r2, [pc, #160]	; (8006494 <TIM_Base_SetConfig+0x128>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <TIM_Base_SetConfig+0x12c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <TIM_Base_SetConfig+0x134>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a24      	ldr	r2, [pc, #144]	; (80064a4 <TIM_Base_SetConfig+0x138>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a23      	ldr	r2, [pc, #140]	; (80064a8 <TIM_Base_SetConfig+0x13c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <TIM_Base_SetConfig+0x114>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0c      	ldr	r2, [pc, #48]	; (8006490 <TIM_Base_SetConfig+0x124>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40010400 	.word	0x40010400
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800
 80064a0:	40001800 	.word	0x40001800
 80064a4:	40001c00 	.word	0x40001c00
 80064a8:	40002000 	.word	0x40002000

080064ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 030a 	bic.w	r3, r3, #10
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650a:	b480      	push	{r7}
 800650c:	b087      	sub	sp, #28
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0210 	bic.w	r2, r3, #16
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	031b      	lsls	r3, r3, #12
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	f043 0307 	orr.w	r3, r3, #7
 800658c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	609a      	str	r2, [r3, #8]
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	021a      	lsls	r2, r3, #8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e06d      	b.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a30      	ldr	r2, [pc, #192]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2f      	ldr	r2, [pc, #188]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d022      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d01d      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d018      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d013      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00e      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a15      	ldr	r2, [pc, #84]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10c      	bne.n	80066c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40010400 	.word	0x40010400
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e040      	b.n	80067cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fb fd7a 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 faea 	bl	8006d50 <UART_SetConfig>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e022      	b.n	80067cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fd42 	bl	8007218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fdc9 	bl	800735c <UART_CheckIdleState>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	f040 8081 	bne.w	80068f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_UART_Transmit+0x26>
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e079      	b.n	80068f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_UART_Transmit+0x38>
 8006808:	2302      	movs	r3, #2
 800680a:	e072      	b.n	80068f2 <HAL_UART_Transmit+0x11e>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2221      	movs	r2, #33	; 0x21
 8006820:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006822:	f7fc fcdb 	bl	80031dc <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006840:	d108      	bne.n	8006854 <HAL_UART_Transmit+0x80>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d104      	bne.n	8006854 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	e003      	b.n	800685c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006864:	e02c      	b.n	80068c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2200      	movs	r2, #0
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fdbc 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e038      	b.n	80068f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	3302      	adds	r3, #2
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e007      	b.n	80068ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1cc      	bne.n	8006866 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2140      	movs	r1, #64	; 0x40
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fd89 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e005      	b.n	80068f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006922:	4013      	ands	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d113      	bne.n	8006954 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00e      	beq.n	8006954 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 81cd 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      }
      return;
 8006952:	e1c7      	b.n	8006ce4 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80e8 	beq.w	8006b2c <HAL_UART_IRQHandler+0x230>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4b6e      	ldr	r3, [pc, #440]	; (8006b24 <HAL_UART_IRQHandler+0x228>)
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80dd 	beq.w	8006b2c <HAL_UART_IRQHandler+0x230>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d010      	beq.n	800699e <HAL_UART_IRQHandler+0xa2>
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2201      	movs	r2, #1
 800698c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006994:	f043 0201 	orr.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <HAL_UART_IRQHandler+0xce>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2202      	movs	r2, #2
 80069b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c0:	f043 0204 	orr.w	r2, r3, #4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <HAL_UART_IRQHandler+0xfa>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2204      	movs	r2, #4
 80069e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ec:	f043 0202 	orr.w	r2, r3, #2
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2208      	movs	r2, #8
 8006a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a22:	f043 0208 	orr.w	r2, r3, #8
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <HAL_UART_IRQHandler+0x15e>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a50:	f043 0220 	orr.w	r2, r3, #32
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8141 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d004      	beq.n	8006aaa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d031      	beq.n	8006b0e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fd1b 	bl	80074e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d123      	bne.n	8006b06 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006acc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d013      	beq.n	8006afe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <HAL_UART_IRQHandler+0x22c>)
 8006adc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd f919 	bl	8003d1a <HAL_DMA_Abort_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d017      	beq.n	8006b1e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	e00f      	b.n	8006b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f906 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	e00b      	b.n	8006b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f902 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	e007      	b.n	8006b1e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8fe 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006b1c:	e0e4      	b.n	8006ce8 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1e:	bf00      	nop
    return;
 8006b20:	e0e2      	b.n	8006ce8 <HAL_UART_IRQHandler+0x3ec>
 8006b22:	bf00      	nop
 8006b24:	04000120 	.word	0x04000120
 8006b28:	08007545 	.word	0x08007545

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	f040 80a3 	bne.w	8006c7c <HAL_UART_IRQHandler+0x380>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 809d 	beq.w	8006c7c <HAL_UART_IRQHandler+0x380>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8097 	beq.w	8006c7c <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2210      	movs	r2, #16
 8006b54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b40      	cmp	r3, #64	; 0x40
 8006b62:	d152      	bne.n	8006c0a <HAL_UART_IRQHandler+0x30e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006b6e:	893b      	ldrh	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80bb 	beq.w	8006cec <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b7c:	893a      	ldrh	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	f080 80b4 	bcs.w	8006cec <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	893a      	ldrh	r2, [r7, #8]
 8006b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b96:	d02a      	beq.n	8006bee <HAL_UART_IRQHandler+0x2f2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0210 	bic.w	r2, r2, #16
 8006be2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fd f826 	bl	8003c3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f88e 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c08:	e070      	b.n	8006cec <HAL_UART_IRQHandler+0x3f0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d063      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8006c28:	897b      	ldrh	r3, [r7, #10]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d060      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c3c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0210 	bic.w	r2, r2, #16
 8006c6e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c70:	897b      	ldrh	r3, [r7, #10]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f855 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c7a:	e039      	b.n	8006cf0 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x3a6>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f84e 	bl	8006d3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ca0:	e029      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x3cc>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d008      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x3cc>
  {
    if (huart->TxISR != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d01a      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
    }
    return;
 8006cc6:	e015      	b.n	8006cf4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d011      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00c      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc47 	bl	8007570 <UART_EndTransmit_IT>
    return;
 8006ce2:	e008      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
      return;
 8006ce4:	bf00      	nop
 8006ce6:	e006      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
    return;
 8006ce8:	bf00      	nop
 8006cea:	e004      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
      return;
 8006cec:	bf00      	nop
 8006cee:	e002      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
      return;
 8006cf0:	bf00      	nop
 8006cf2:	e000      	b.n	8006cf6 <HAL_UART_IRQHandler+0x3fa>
    return;
 8006cf4:	bf00      	nop
  }

}
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	4ba6      	ldr	r3, [pc, #664]	; (8007014 <UART_SetConfig+0x2c4>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6812      	ldr	r2, [r2, #0]
 8006d82:	6979      	ldr	r1, [r7, #20]
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a94      	ldr	r2, [pc, #592]	; (8007018 <UART_SetConfig+0x2c8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d120      	bne.n	8006e0e <UART_SetConfig+0xbe>
 8006dcc:	4b93      	ldr	r3, [pc, #588]	; (800701c <UART_SetConfig+0x2cc>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d816      	bhi.n	8006e08 <UART_SetConfig+0xb8>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x90>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006df1 	.word	0x08006df1
 8006de4:	08006dfd 	.word	0x08006dfd
 8006de8:	08006df7 	.word	0x08006df7
 8006dec:	08006e03 	.word	0x08006e03
 8006df0:	2301      	movs	r3, #1
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e150      	b.n	8007098 <UART_SetConfig+0x348>
 8006df6:	2302      	movs	r3, #2
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e14d      	b.n	8007098 <UART_SetConfig+0x348>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e14a      	b.n	8007098 <UART_SetConfig+0x348>
 8006e02:	2308      	movs	r3, #8
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e147      	b.n	8007098 <UART_SetConfig+0x348>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e144      	b.n	8007098 <UART_SetConfig+0x348>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a83      	ldr	r2, [pc, #524]	; (8007020 <UART_SetConfig+0x2d0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d132      	bne.n	8006e7e <UART_SetConfig+0x12e>
 8006e18:	4b80      	ldr	r3, [pc, #512]	; (800701c <UART_SetConfig+0x2cc>)
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1e:	f003 030c 	and.w	r3, r3, #12
 8006e22:	2b0c      	cmp	r3, #12
 8006e24:	d828      	bhi.n	8006e78 <UART_SetConfig+0x128>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <UART_SetConfig+0xdc>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006e79 	.word	0x08006e79
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e79 	.word	0x08006e79
 8006e48:	08006e79 	.word	0x08006e79
 8006e4c:	08006e67 	.word	0x08006e67
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e79 	.word	0x08006e79
 8006e5c:	08006e73 	.word	0x08006e73
 8006e60:	2300      	movs	r3, #0
 8006e62:	77fb      	strb	r3, [r7, #31]
 8006e64:	e118      	b.n	8007098 <UART_SetConfig+0x348>
 8006e66:	2302      	movs	r3, #2
 8006e68:	77fb      	strb	r3, [r7, #31]
 8006e6a:	e115      	b.n	8007098 <UART_SetConfig+0x348>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	77fb      	strb	r3, [r7, #31]
 8006e70:	e112      	b.n	8007098 <UART_SetConfig+0x348>
 8006e72:	2308      	movs	r3, #8
 8006e74:	77fb      	strb	r3, [r7, #31]
 8006e76:	e10f      	b.n	8007098 <UART_SetConfig+0x348>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e10c      	b.n	8007098 <UART_SetConfig+0x348>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a68      	ldr	r2, [pc, #416]	; (8007024 <UART_SetConfig+0x2d4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d120      	bne.n	8006eca <UART_SetConfig+0x17a>
 8006e88:	4b64      	ldr	r3, [pc, #400]	; (800701c <UART_SetConfig+0x2cc>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d013      	beq.n	8006ebe <UART_SetConfig+0x16e>
 8006e96:	2b30      	cmp	r3, #48	; 0x30
 8006e98:	d814      	bhi.n	8006ec4 <UART_SetConfig+0x174>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d009      	beq.n	8006eb2 <UART_SetConfig+0x162>
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d810      	bhi.n	8006ec4 <UART_SetConfig+0x174>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <UART_SetConfig+0x15c>
 8006ea6:	2b10      	cmp	r3, #16
 8006ea8:	d006      	beq.n	8006eb8 <UART_SetConfig+0x168>
 8006eaa:	e00b      	b.n	8006ec4 <UART_SetConfig+0x174>
 8006eac:	2300      	movs	r3, #0
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e0f2      	b.n	8007098 <UART_SetConfig+0x348>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	e0ef      	b.n	8007098 <UART_SetConfig+0x348>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e0ec      	b.n	8007098 <UART_SetConfig+0x348>
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e0e9      	b.n	8007098 <UART_SetConfig+0x348>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e0e6      	b.n	8007098 <UART_SetConfig+0x348>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a56      	ldr	r2, [pc, #344]	; (8007028 <UART_SetConfig+0x2d8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d120      	bne.n	8006f16 <UART_SetConfig+0x1c6>
 8006ed4:	4b51      	ldr	r3, [pc, #324]	; (800701c <UART_SetConfig+0x2cc>)
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ede:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee0:	d013      	beq.n	8006f0a <UART_SetConfig+0x1ba>
 8006ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ee4:	d814      	bhi.n	8006f10 <UART_SetConfig+0x1c0>
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d009      	beq.n	8006efe <UART_SetConfig+0x1ae>
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d810      	bhi.n	8006f10 <UART_SetConfig+0x1c0>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <UART_SetConfig+0x1a8>
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d006      	beq.n	8006f04 <UART_SetConfig+0x1b4>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x1c0>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e0cc      	b.n	8007098 <UART_SetConfig+0x348>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e0c9      	b.n	8007098 <UART_SetConfig+0x348>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e0c6      	b.n	8007098 <UART_SetConfig+0x348>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e0c3      	b.n	8007098 <UART_SetConfig+0x348>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e0c0      	b.n	8007098 <UART_SetConfig+0x348>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a44      	ldr	r2, [pc, #272]	; (800702c <UART_SetConfig+0x2dc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d125      	bne.n	8006f6c <UART_SetConfig+0x21c>
 8006f20:	4b3e      	ldr	r3, [pc, #248]	; (800701c <UART_SetConfig+0x2cc>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f2e:	d017      	beq.n	8006f60 <UART_SetConfig+0x210>
 8006f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f34:	d817      	bhi.n	8006f66 <UART_SetConfig+0x216>
 8006f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3a:	d00b      	beq.n	8006f54 <UART_SetConfig+0x204>
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f40:	d811      	bhi.n	8006f66 <UART_SetConfig+0x216>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <UART_SetConfig+0x1fe>
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4a:	d006      	beq.n	8006f5a <UART_SetConfig+0x20a>
 8006f4c:	e00b      	b.n	8006f66 <UART_SetConfig+0x216>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e0a1      	b.n	8007098 <UART_SetConfig+0x348>
 8006f54:	2302      	movs	r3, #2
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e09e      	b.n	8007098 <UART_SetConfig+0x348>
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	77fb      	strb	r3, [r7, #31]
 8006f5e:	e09b      	b.n	8007098 <UART_SetConfig+0x348>
 8006f60:	2308      	movs	r3, #8
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e098      	b.n	8007098 <UART_SetConfig+0x348>
 8006f66:	2310      	movs	r3, #16
 8006f68:	77fb      	strb	r3, [r7, #31]
 8006f6a:	e095      	b.n	8007098 <UART_SetConfig+0x348>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2f      	ldr	r2, [pc, #188]	; (8007030 <UART_SetConfig+0x2e0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d125      	bne.n	8006fc2 <UART_SetConfig+0x272>
 8006f76:	4b29      	ldr	r3, [pc, #164]	; (800701c <UART_SetConfig+0x2cc>)
 8006f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f84:	d017      	beq.n	8006fb6 <UART_SetConfig+0x266>
 8006f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f8a:	d817      	bhi.n	8006fbc <UART_SetConfig+0x26c>
 8006f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f90:	d00b      	beq.n	8006faa <UART_SetConfig+0x25a>
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d811      	bhi.n	8006fbc <UART_SetConfig+0x26c>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <UART_SetConfig+0x254>
 8006f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa0:	d006      	beq.n	8006fb0 <UART_SetConfig+0x260>
 8006fa2:	e00b      	b.n	8006fbc <UART_SetConfig+0x26c>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e076      	b.n	8007098 <UART_SetConfig+0x348>
 8006faa:	2302      	movs	r3, #2
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e073      	b.n	8007098 <UART_SetConfig+0x348>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e070      	b.n	8007098 <UART_SetConfig+0x348>
 8006fb6:	2308      	movs	r3, #8
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	e06d      	b.n	8007098 <UART_SetConfig+0x348>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e06a      	b.n	8007098 <UART_SetConfig+0x348>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1b      	ldr	r2, [pc, #108]	; (8007034 <UART_SetConfig+0x2e4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d138      	bne.n	800703e <UART_SetConfig+0x2ee>
 8006fcc:	4b13      	ldr	r3, [pc, #76]	; (800701c <UART_SetConfig+0x2cc>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fda:	d017      	beq.n	800700c <UART_SetConfig+0x2bc>
 8006fdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fe0:	d82a      	bhi.n	8007038 <UART_SetConfig+0x2e8>
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe6:	d00b      	beq.n	8007000 <UART_SetConfig+0x2b0>
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fec:	d824      	bhi.n	8007038 <UART_SetConfig+0x2e8>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <UART_SetConfig+0x2aa>
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff6:	d006      	beq.n	8007006 <UART_SetConfig+0x2b6>
 8006ff8:	e01e      	b.n	8007038 <UART_SetConfig+0x2e8>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e04b      	b.n	8007098 <UART_SetConfig+0x348>
 8007000:	2302      	movs	r3, #2
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e048      	b.n	8007098 <UART_SetConfig+0x348>
 8007006:	2304      	movs	r3, #4
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e045      	b.n	8007098 <UART_SetConfig+0x348>
 800700c:	2308      	movs	r3, #8
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e042      	b.n	8007098 <UART_SetConfig+0x348>
 8007012:	bf00      	nop
 8007014:	efff69f3 	.word	0xefff69f3
 8007018:	40011000 	.word	0x40011000
 800701c:	40023800 	.word	0x40023800
 8007020:	40004400 	.word	0x40004400
 8007024:	40004800 	.word	0x40004800
 8007028:	40004c00 	.word	0x40004c00
 800702c:	40005000 	.word	0x40005000
 8007030:	40011400 	.word	0x40011400
 8007034:	40007800 	.word	0x40007800
 8007038:	2310      	movs	r3, #16
 800703a:	77fb      	strb	r3, [r7, #31]
 800703c:	e02c      	b.n	8007098 <UART_SetConfig+0x348>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a72      	ldr	r2, [pc, #456]	; (800720c <UART_SetConfig+0x4bc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d125      	bne.n	8007094 <UART_SetConfig+0x344>
 8007048:	4b71      	ldr	r3, [pc, #452]	; (8007210 <UART_SetConfig+0x4c0>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007052:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007056:	d017      	beq.n	8007088 <UART_SetConfig+0x338>
 8007058:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800705c:	d817      	bhi.n	800708e <UART_SetConfig+0x33e>
 800705e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007062:	d00b      	beq.n	800707c <UART_SetConfig+0x32c>
 8007064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007068:	d811      	bhi.n	800708e <UART_SetConfig+0x33e>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <UART_SetConfig+0x326>
 800706e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007072:	d006      	beq.n	8007082 <UART_SetConfig+0x332>
 8007074:	e00b      	b.n	800708e <UART_SetConfig+0x33e>
 8007076:	2300      	movs	r3, #0
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e00d      	b.n	8007098 <UART_SetConfig+0x348>
 800707c:	2302      	movs	r3, #2
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e00a      	b.n	8007098 <UART_SetConfig+0x348>
 8007082:	2304      	movs	r3, #4
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e007      	b.n	8007098 <UART_SetConfig+0x348>
 8007088:	2308      	movs	r3, #8
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e004      	b.n	8007098 <UART_SetConfig+0x348>
 800708e:	2310      	movs	r3, #16
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e001      	b.n	8007098 <UART_SetConfig+0x348>
 8007094:	2310      	movs	r3, #16
 8007096:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a0:	d15c      	bne.n	800715c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80070a2:	7ffb      	ldrb	r3, [r7, #31]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d828      	bhi.n	80070fa <UART_SetConfig+0x3aa>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x360>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070fb 	.word	0x080070fb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fd fe6e 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 80070d8:	61b8      	str	r0, [r7, #24]
        break;
 80070da:	e013      	b.n	8007104 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fd fe7e 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 80070e0:	61b8      	str	r0, [r7, #24]
        break;
 80070e2:	e00f      	b.n	8007104 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b4b      	ldr	r3, [pc, #300]	; (8007214 <UART_SetConfig+0x4c4>)
 80070e6:	61bb      	str	r3, [r7, #24]
        break;
 80070e8:	e00c      	b.n	8007104 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fd fd51 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 80070ee:	61b8      	str	r0, [r7, #24]
        break;
 80070f0:	e008      	b.n	8007104 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	61bb      	str	r3, [r7, #24]
        break;
 80070f8:	e004      	b.n	8007104 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	77bb      	strb	r3, [r7, #30]
        break;
 8007102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d074      	beq.n	80071f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	005a      	lsls	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b0f      	cmp	r3, #15
 8007126:	d916      	bls.n	8007156 <UART_SetConfig+0x406>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712e:	d212      	bcs.n	8007156 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f023 030f 	bic.w	r3, r3, #15
 8007138:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	b29b      	uxth	r3, r3
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	b29a      	uxth	r2, r3
 8007146:	89fb      	ldrh	r3, [r7, #14]
 8007148:	4313      	orrs	r3, r2
 800714a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	89fa      	ldrh	r2, [r7, #14]
 8007152:	60da      	str	r2, [r3, #12]
 8007154:	e04e      	b.n	80071f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	77bb      	strb	r3, [r7, #30]
 800715a:	e04b      	b.n	80071f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800715c:	7ffb      	ldrb	r3, [r7, #31]
 800715e:	2b08      	cmp	r3, #8
 8007160:	d827      	bhi.n	80071b2 <UART_SetConfig+0x462>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0x418>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071a3 	.word	0x080071a3
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071b3 	.word	0x080071b3
 8007188:	080071ab 	.word	0x080071ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718c:	f7fd fe12 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 8007190:	61b8      	str	r0, [r7, #24]
        break;
 8007192:	e013      	b.n	80071bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007194:	f7fd fe22 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8007198:	61b8      	str	r0, [r7, #24]
        break;
 800719a:	e00f      	b.n	80071bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <UART_SetConfig+0x4c4>)
 800719e:	61bb      	str	r3, [r7, #24]
        break;
 80071a0:	e00c      	b.n	80071bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a2:	f7fd fcf5 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 80071a6:	61b8      	str	r0, [r7, #24]
        break;
 80071a8:	e008      	b.n	80071bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ae:	61bb      	str	r3, [r7, #24]
        break;
 80071b0:	e004      	b.n	80071bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	77bb      	strb	r3, [r7, #30]
        break;
 80071ba:	bf00      	nop
    }

    if (pclk != 0U)
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d018      	beq.n	80071f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	085a      	lsrs	r2, r3, #1
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	441a      	add	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d908      	bls.n	80071f0 <UART_SetConfig+0x4a0>
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d204      	bcs.n	80071f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	e001      	b.n	80071f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007200:	7fbb      	ldrb	r3, [r7, #30]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	40007c00 	.word	0x40007c00
 8007210:	40023800 	.word	0x40023800
 8007214:	00f42400 	.word	0x00f42400

08007218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01a      	beq.n	800732e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007316:	d10a      	bne.n	800732e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800736c:	f7fb ff36 	bl	80031dc <HAL_GetTick>
 8007370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b08      	cmp	r3, #8
 800737e:	d10e      	bne.n	800739e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f82d 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e023      	b.n	80073e6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d10e      	bne.n	80073ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f817 	bl	80073ee <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e00d      	b.n	80073e6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fe:	e05e      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d05a      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007408:	f7fb fee8 	bl	80031dc <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <UART_WaitOnFlagUntilTimeout+0x30>
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d11b      	bne.n	8007456 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800742c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e043      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02c      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007472:	d124      	bne.n	80074be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800747c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800748c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0201 	bic.w	r2, r2, #1
 800749c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e00f      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d091      	beq.n	8007400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074fc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0201 	bic.w	r2, r2, #1
 800750c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007512:	2b01      	cmp	r3, #1
 8007514:	d107      	bne.n	8007526 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0210 	bic.w	r2, r2, #16
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff fbd4 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007586:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fbb1 	bl	8006cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <__cvt>:
 80075a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a4:	ed2d 8b02 	vpush	{d8}
 80075a8:	eeb0 8b40 	vmov.f64	d8, d0
 80075ac:	b085      	sub	sp, #20
 80075ae:	4617      	mov	r7, r2
 80075b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80075b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80075b4:	ee18 2a90 	vmov	r2, s17
 80075b8:	f025 0520 	bic.w	r5, r5, #32
 80075bc:	2a00      	cmp	r2, #0
 80075be:	bfb6      	itet	lt
 80075c0:	222d      	movlt	r2, #45	; 0x2d
 80075c2:	2200      	movge	r2, #0
 80075c4:	eeb1 8b40 	vneglt.f64	d8, d0
 80075c8:	2d46      	cmp	r5, #70	; 0x46
 80075ca:	460c      	mov	r4, r1
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	d004      	beq.n	80075da <__cvt+0x38>
 80075d0:	2d45      	cmp	r5, #69	; 0x45
 80075d2:	d100      	bne.n	80075d6 <__cvt+0x34>
 80075d4:	3401      	adds	r4, #1
 80075d6:	2102      	movs	r1, #2
 80075d8:	e000      	b.n	80075dc <__cvt+0x3a>
 80075da:	2103      	movs	r1, #3
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	ab02      	add	r3, sp, #8
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	4622      	mov	r2, r4
 80075e6:	4633      	mov	r3, r6
 80075e8:	eeb0 0b48 	vmov.f64	d0, d8
 80075ec:	f000 fe30 	bl	8008250 <_dtoa_r>
 80075f0:	2d47      	cmp	r5, #71	; 0x47
 80075f2:	d101      	bne.n	80075f8 <__cvt+0x56>
 80075f4:	07fb      	lsls	r3, r7, #31
 80075f6:	d51a      	bpl.n	800762e <__cvt+0x8c>
 80075f8:	2d46      	cmp	r5, #70	; 0x46
 80075fa:	eb00 0204 	add.w	r2, r0, r4
 80075fe:	d10c      	bne.n	800761a <__cvt+0x78>
 8007600:	7803      	ldrb	r3, [r0, #0]
 8007602:	2b30      	cmp	r3, #48	; 0x30
 8007604:	d107      	bne.n	8007616 <__cvt+0x74>
 8007606:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760e:	bf1c      	itt	ne
 8007610:	f1c4 0401 	rsbne	r4, r4, #1
 8007614:	6034      	strne	r4, [r6, #0]
 8007616:	6833      	ldr	r3, [r6, #0]
 8007618:	441a      	add	r2, r3
 800761a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	bf08      	it	eq
 8007624:	9203      	streq	r2, [sp, #12]
 8007626:	2130      	movs	r1, #48	; 0x30
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4293      	cmp	r3, r2
 800762c:	d307      	bcc.n	800763e <__cvt+0x9c>
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007632:	1a1b      	subs	r3, r3, r0
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	b005      	add	sp, #20
 8007638:	ecbd 8b02 	vpop	{d8}
 800763c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800763e:	1c5c      	adds	r4, r3, #1
 8007640:	9403      	str	r4, [sp, #12]
 8007642:	7019      	strb	r1, [r3, #0]
 8007644:	e7f0      	b.n	8007628 <__cvt+0x86>

08007646 <__exponent>:
 8007646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007648:	4603      	mov	r3, r0
 800764a:	2900      	cmp	r1, #0
 800764c:	bfb8      	it	lt
 800764e:	4249      	neglt	r1, r1
 8007650:	f803 2b02 	strb.w	r2, [r3], #2
 8007654:	bfb4      	ite	lt
 8007656:	222d      	movlt	r2, #45	; 0x2d
 8007658:	222b      	movge	r2, #43	; 0x2b
 800765a:	2909      	cmp	r1, #9
 800765c:	7042      	strb	r2, [r0, #1]
 800765e:	dd2a      	ble.n	80076b6 <__exponent+0x70>
 8007660:	f10d 0207 	add.w	r2, sp, #7
 8007664:	4617      	mov	r7, r2
 8007666:	260a      	movs	r6, #10
 8007668:	4694      	mov	ip, r2
 800766a:	fb91 f5f6 	sdiv	r5, r1, r6
 800766e:	fb06 1415 	mls	r4, r6, r5, r1
 8007672:	3430      	adds	r4, #48	; 0x30
 8007674:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007678:	460c      	mov	r4, r1
 800767a:	2c63      	cmp	r4, #99	; 0x63
 800767c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007680:	4629      	mov	r1, r5
 8007682:	dcf1      	bgt.n	8007668 <__exponent+0x22>
 8007684:	3130      	adds	r1, #48	; 0x30
 8007686:	f1ac 0402 	sub.w	r4, ip, #2
 800768a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800768e:	1c41      	adds	r1, r0, #1
 8007690:	4622      	mov	r2, r4
 8007692:	42ba      	cmp	r2, r7
 8007694:	d30a      	bcc.n	80076ac <__exponent+0x66>
 8007696:	f10d 0209 	add.w	r2, sp, #9
 800769a:	eba2 020c 	sub.w	r2, r2, ip
 800769e:	42bc      	cmp	r4, r7
 80076a0:	bf88      	it	hi
 80076a2:	2200      	movhi	r2, #0
 80076a4:	4413      	add	r3, r2
 80076a6:	1a18      	subs	r0, r3, r0
 80076a8:	b003      	add	sp, #12
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076b0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80076b4:	e7ed      	b.n	8007692 <__exponent+0x4c>
 80076b6:	2330      	movs	r3, #48	; 0x30
 80076b8:	3130      	adds	r1, #48	; 0x30
 80076ba:	7083      	strb	r3, [r0, #2]
 80076bc:	70c1      	strb	r1, [r0, #3]
 80076be:	1d03      	adds	r3, r0, #4
 80076c0:	e7f1      	b.n	80076a6 <__exponent+0x60>
 80076c2:	0000      	movs	r0, r0
 80076c4:	0000      	movs	r0, r0
	...

080076c8 <_printf_float>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	b08b      	sub	sp, #44	; 0x2c
 80076ce:	460c      	mov	r4, r1
 80076d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80076d4:	4616      	mov	r6, r2
 80076d6:	461f      	mov	r7, r3
 80076d8:	4605      	mov	r5, r0
 80076da:	f000 fcbb 	bl	8008054 <_localeconv_r>
 80076de:	f8d0 b000 	ldr.w	fp, [r0]
 80076e2:	4658      	mov	r0, fp
 80076e4:	f7f8 fdfc 	bl	80002e0 <strlen>
 80076e8:	2300      	movs	r3, #0
 80076ea:	9308      	str	r3, [sp, #32]
 80076ec:	f8d8 3000 	ldr.w	r3, [r8]
 80076f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80076f4:	6822      	ldr	r2, [r4, #0]
 80076f6:	3307      	adds	r3, #7
 80076f8:	f023 0307 	bic.w	r3, r3, #7
 80076fc:	f103 0108 	add.w	r1, r3, #8
 8007700:	f8c8 1000 	str.w	r1, [r8]
 8007704:	ed93 0b00 	vldr	d0, [r3]
 8007708:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007968 <_printf_float+0x2a0>
 800770c:	eeb0 7bc0 	vabs.f64	d7, d0
 8007710:	eeb4 7b46 	vcmp.f64	d7, d6
 8007714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007718:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800771c:	4682      	mov	sl, r0
 800771e:	dd24      	ble.n	800776a <_printf_float+0xa2>
 8007720:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007728:	d502      	bpl.n	8007730 <_printf_float+0x68>
 800772a:	232d      	movs	r3, #45	; 0x2d
 800772c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007730:	498f      	ldr	r1, [pc, #572]	; (8007970 <_printf_float+0x2a8>)
 8007732:	4b90      	ldr	r3, [pc, #576]	; (8007974 <_printf_float+0x2ac>)
 8007734:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007738:	bf94      	ite	ls
 800773a:	4688      	movls	r8, r1
 800773c:	4698      	movhi	r8, r3
 800773e:	2303      	movs	r3, #3
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	f022 0204 	bic.w	r2, r2, #4
 8007746:	2300      	movs	r3, #0
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	9700      	str	r7, [sp, #0]
 800774e:	4633      	mov	r3, r6
 8007750:	aa09      	add	r2, sp, #36	; 0x24
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f9d1 	bl	8007afc <_printf_common>
 800775a:	3001      	adds	r0, #1
 800775c:	f040 808a 	bne.w	8007874 <_printf_float+0x1ac>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	b00b      	add	sp, #44	; 0x2c
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	eeb4 0b40 	vcmp.f64	d0, d0
 800776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007772:	d709      	bvc.n	8007788 <_printf_float+0xc0>
 8007774:	ee10 3a90 	vmov	r3, s1
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbc      	itt	lt
 800777c:	232d      	movlt	r3, #45	; 0x2d
 800777e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007782:	497d      	ldr	r1, [pc, #500]	; (8007978 <_printf_float+0x2b0>)
 8007784:	4b7d      	ldr	r3, [pc, #500]	; (800797c <_printf_float+0x2b4>)
 8007786:	e7d5      	b.n	8007734 <_printf_float+0x6c>
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800778e:	9104      	str	r1, [sp, #16]
 8007790:	1c59      	adds	r1, r3, #1
 8007792:	d13c      	bne.n	800780e <_printf_float+0x146>
 8007794:	2306      	movs	r3, #6
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	2300      	movs	r3, #0
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	ab08      	add	r3, sp, #32
 800779e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80077a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077a6:	ab07      	add	r3, sp, #28
 80077a8:	6861      	ldr	r1, [r4, #4]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	f10d 031b 	add.w	r3, sp, #27
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7ff fef5 	bl	80075a2 <__cvt>
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	9907      	ldr	r1, [sp, #28]
 80077bc:	2b47      	cmp	r3, #71	; 0x47
 80077be:	4680      	mov	r8, r0
 80077c0:	d108      	bne.n	80077d4 <_printf_float+0x10c>
 80077c2:	1cc8      	adds	r0, r1, #3
 80077c4:	db02      	blt.n	80077cc <_printf_float+0x104>
 80077c6:	6863      	ldr	r3, [r4, #4]
 80077c8:	4299      	cmp	r1, r3
 80077ca:	dd41      	ble.n	8007850 <_printf_float+0x188>
 80077cc:	f1a9 0902 	sub.w	r9, r9, #2
 80077d0:	fa5f f989 	uxtb.w	r9, r9
 80077d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077d8:	d820      	bhi.n	800781c <_printf_float+0x154>
 80077da:	3901      	subs	r1, #1
 80077dc:	464a      	mov	r2, r9
 80077de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077e2:	9107      	str	r1, [sp, #28]
 80077e4:	f7ff ff2f 	bl	8007646 <__exponent>
 80077e8:	9a08      	ldr	r2, [sp, #32]
 80077ea:	9004      	str	r0, [sp, #16]
 80077ec:	1813      	adds	r3, r2, r0
 80077ee:	2a01      	cmp	r2, #1
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	dc02      	bgt.n	80077fa <_printf_float+0x132>
 80077f4:	6822      	ldr	r2, [r4, #0]
 80077f6:	07d2      	lsls	r2, r2, #31
 80077f8:	d501      	bpl.n	80077fe <_printf_float+0x136>
 80077fa:	3301      	adds	r3, #1
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0a2      	beq.n	800774c <_printf_float+0x84>
 8007806:	232d      	movs	r3, #45	; 0x2d
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780c:	e79e      	b.n	800774c <_printf_float+0x84>
 800780e:	9904      	ldr	r1, [sp, #16]
 8007810:	2947      	cmp	r1, #71	; 0x47
 8007812:	d1c1      	bne.n	8007798 <_printf_float+0xd0>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1bf      	bne.n	8007798 <_printf_float+0xd0>
 8007818:	2301      	movs	r3, #1
 800781a:	e7bc      	b.n	8007796 <_printf_float+0xce>
 800781c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007820:	d118      	bne.n	8007854 <_printf_float+0x18c>
 8007822:	2900      	cmp	r1, #0
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	dd0b      	ble.n	8007840 <_printf_float+0x178>
 8007828:	6121      	str	r1, [r4, #16]
 800782a:	b913      	cbnz	r3, 8007832 <_printf_float+0x16a>
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	07d0      	lsls	r0, r2, #31
 8007830:	d502      	bpl.n	8007838 <_printf_float+0x170>
 8007832:	3301      	adds	r3, #1
 8007834:	440b      	add	r3, r1
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	2300      	movs	r3, #0
 800783a:	65a1      	str	r1, [r4, #88]	; 0x58
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	e7de      	b.n	80077fe <_printf_float+0x136>
 8007840:	b913      	cbnz	r3, 8007848 <_printf_float+0x180>
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	07d2      	lsls	r2, r2, #31
 8007846:	d501      	bpl.n	800784c <_printf_float+0x184>
 8007848:	3302      	adds	r3, #2
 800784a:	e7f4      	b.n	8007836 <_printf_float+0x16e>
 800784c:	2301      	movs	r3, #1
 800784e:	e7f2      	b.n	8007836 <_printf_float+0x16e>
 8007850:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	4299      	cmp	r1, r3
 8007858:	db05      	blt.n	8007866 <_printf_float+0x19e>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	6121      	str	r1, [r4, #16]
 800785e:	07d8      	lsls	r0, r3, #31
 8007860:	d5ea      	bpl.n	8007838 <_printf_float+0x170>
 8007862:	1c4b      	adds	r3, r1, #1
 8007864:	e7e7      	b.n	8007836 <_printf_float+0x16e>
 8007866:	2900      	cmp	r1, #0
 8007868:	bfd4      	ite	le
 800786a:	f1c1 0202 	rsble	r2, r1, #2
 800786e:	2201      	movgt	r2, #1
 8007870:	4413      	add	r3, r2
 8007872:	e7e0      	b.n	8007836 <_printf_float+0x16e>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	055a      	lsls	r2, r3, #21
 8007878:	d407      	bmi.n	800788a <_printf_float+0x1c2>
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	4642      	mov	r2, r8
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	d12a      	bne.n	80078de <_printf_float+0x216>
 8007888:	e76a      	b.n	8007760 <_printf_float+0x98>
 800788a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800788e:	f240 80e0 	bls.w	8007a52 <_printf_float+0x38a>
 8007892:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007896:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800789a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789e:	d133      	bne.n	8007908 <_printf_float+0x240>
 80078a0:	4a37      	ldr	r2, [pc, #220]	; (8007980 <_printf_float+0x2b8>)
 80078a2:	2301      	movs	r3, #1
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f af58 	beq.w	8007760 <_printf_float+0x98>
 80078b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	db02      	blt.n	80078be <_printf_float+0x1f6>
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	07d8      	lsls	r0, r3, #31
 80078bc:	d50f      	bpl.n	80078de <_printf_float+0x216>
 80078be:	4653      	mov	r3, sl
 80078c0:	465a      	mov	r2, fp
 80078c2:	4631      	mov	r1, r6
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	f43f af49 	beq.w	8007760 <_printf_float+0x98>
 80078ce:	f04f 0800 	mov.w	r8, #0
 80078d2:	f104 091a 	add.w	r9, r4, #26
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4543      	cmp	r3, r8
 80078dc:	dc09      	bgt.n	80078f2 <_printf_float+0x22a>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	079b      	lsls	r3, r3, #30
 80078e2:	f100 8106 	bmi.w	8007af2 <_printf_float+0x42a>
 80078e6:	68e0      	ldr	r0, [r4, #12]
 80078e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ea:	4298      	cmp	r0, r3
 80078ec:	bfb8      	it	lt
 80078ee:	4618      	movlt	r0, r3
 80078f0:	e738      	b.n	8007764 <_printf_float+0x9c>
 80078f2:	2301      	movs	r3, #1
 80078f4:	464a      	mov	r2, r9
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	f43f af2f 	beq.w	8007760 <_printf_float+0x98>
 8007902:	f108 0801 	add.w	r8, r8, #1
 8007906:	e7e6      	b.n	80078d6 <_printf_float+0x20e>
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dc3a      	bgt.n	8007984 <_printf_float+0x2bc>
 800790e:	4a1c      	ldr	r2, [pc, #112]	; (8007980 <_printf_float+0x2b8>)
 8007910:	2301      	movs	r3, #1
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f af21 	beq.w	8007760 <_printf_float+0x98>
 800791e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007922:	4313      	orrs	r3, r2
 8007924:	d102      	bne.n	800792c <_printf_float+0x264>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	07d9      	lsls	r1, r3, #31
 800792a:	d5d8      	bpl.n	80078de <_printf_float+0x216>
 800792c:	4653      	mov	r3, sl
 800792e:	465a      	mov	r2, fp
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f af12 	beq.w	8007760 <_printf_float+0x98>
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	f104 0a1a 	add.w	sl, r4, #26
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	425b      	negs	r3, r3
 8007948:	454b      	cmp	r3, r9
 800794a:	dc01      	bgt.n	8007950 <_printf_float+0x288>
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	e795      	b.n	800787c <_printf_float+0x1b4>
 8007950:	2301      	movs	r3, #1
 8007952:	4652      	mov	r2, sl
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f af00 	beq.w	8007760 <_printf_float+0x98>
 8007960:	f109 0901 	add.w	r9, r9, #1
 8007964:	e7ee      	b.n	8007944 <_printf_float+0x27c>
 8007966:	bf00      	nop
 8007968:	ffffffff 	.word	0xffffffff
 800796c:	7fefffff 	.word	0x7fefffff
 8007970:	0800aab8 	.word	0x0800aab8
 8007974:	0800aabc 	.word	0x0800aabc
 8007978:	0800aac0 	.word	0x0800aac0
 800797c:	0800aac4 	.word	0x0800aac4
 8007980:	0800aac8 	.word	0x0800aac8
 8007984:	9a08      	ldr	r2, [sp, #32]
 8007986:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007988:	429a      	cmp	r2, r3
 800798a:	bfa8      	it	ge
 800798c:	461a      	movge	r2, r3
 800798e:	2a00      	cmp	r2, #0
 8007990:	4691      	mov	r9, r2
 8007992:	dc38      	bgt.n	8007a06 <_printf_float+0x33e>
 8007994:	2300      	movs	r3, #0
 8007996:	9305      	str	r3, [sp, #20]
 8007998:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800799c:	f104 021a 	add.w	r2, r4, #26
 80079a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079a2:	9905      	ldr	r1, [sp, #20]
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	eba3 0309 	sub.w	r3, r3, r9
 80079aa:	428b      	cmp	r3, r1
 80079ac:	dc33      	bgt.n	8007a16 <_printf_float+0x34e>
 80079ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	db3c      	blt.n	8007a30 <_printf_float+0x368>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	07da      	lsls	r2, r3, #31
 80079ba:	d439      	bmi.n	8007a30 <_printf_float+0x368>
 80079bc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80079c0:	eba2 0903 	sub.w	r9, r2, r3
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	4591      	cmp	r9, r2
 80079ca:	bfa8      	it	ge
 80079cc:	4691      	movge	r9, r2
 80079ce:	f1b9 0f00 	cmp.w	r9, #0
 80079d2:	dc35      	bgt.n	8007a40 <_printf_float+0x378>
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079dc:	f104 0a1a 	add.w	sl, r4, #26
 80079e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	eba3 0309 	sub.w	r3, r3, r9
 80079ea:	4543      	cmp	r3, r8
 80079ec:	f77f af77 	ble.w	80078de <_printf_float+0x216>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4652      	mov	r2, sl
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f aeb0 	beq.w	8007760 <_printf_float+0x98>
 8007a00:	f108 0801 	add.w	r8, r8, #1
 8007a04:	e7ec      	b.n	80079e0 <_printf_float+0x318>
 8007a06:	4613      	mov	r3, r2
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4642      	mov	r2, r8
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1bf      	bne.n	8007994 <_printf_float+0x2cc>
 8007a14:	e6a4      	b.n	8007760 <_printf_float+0x98>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	9204      	str	r2, [sp, #16]
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	f43f ae9d 	beq.w	8007760 <_printf_float+0x98>
 8007a26:	9b05      	ldr	r3, [sp, #20]
 8007a28:	9a04      	ldr	r2, [sp, #16]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	9305      	str	r3, [sp, #20]
 8007a2e:	e7b7      	b.n	80079a0 <_printf_float+0x2d8>
 8007a30:	4653      	mov	r3, sl
 8007a32:	465a      	mov	r2, fp
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d1be      	bne.n	80079bc <_printf_float+0x2f4>
 8007a3e:	e68f      	b.n	8007760 <_printf_float+0x98>
 8007a40:	9a04      	ldr	r2, [sp, #16]
 8007a42:	464b      	mov	r3, r9
 8007a44:	4442      	add	r2, r8
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1c1      	bne.n	80079d4 <_printf_float+0x30c>
 8007a50:	e686      	b.n	8007760 <_printf_float+0x98>
 8007a52:	9a08      	ldr	r2, [sp, #32]
 8007a54:	2a01      	cmp	r2, #1
 8007a56:	dc01      	bgt.n	8007a5c <_printf_float+0x394>
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	d537      	bpl.n	8007acc <_printf_float+0x404>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4642      	mov	r2, r8
 8007a60:	4631      	mov	r1, r6
 8007a62:	4628      	mov	r0, r5
 8007a64:	47b8      	blx	r7
 8007a66:	3001      	adds	r0, #1
 8007a68:	f43f ae7a 	beq.w	8007760 <_printf_float+0x98>
 8007a6c:	4653      	mov	r3, sl
 8007a6e:	465a      	mov	r2, fp
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f ae72 	beq.w	8007760 <_printf_float+0x98>
 8007a7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007a80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	d01a      	beq.n	8007ac2 <_printf_float+0x3fa>
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	f108 0201 	add.w	r2, r8, #1
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d10e      	bne.n	8007aba <_printf_float+0x3f2>
 8007a9c:	e660      	b.n	8007760 <_printf_float+0x98>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	464a      	mov	r2, r9
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f ae59 	beq.w	8007760 <_printf_float+0x98>
 8007aae:	f108 0801 	add.w	r8, r8, #1
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	4543      	cmp	r3, r8
 8007ab8:	dcf1      	bgt.n	8007a9e <_printf_float+0x3d6>
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ac0:	e6dd      	b.n	800787e <_printf_float+0x1b6>
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	f104 091a 	add.w	r9, r4, #26
 8007aca:	e7f2      	b.n	8007ab2 <_printf_float+0x3ea>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4642      	mov	r2, r8
 8007ad0:	e7df      	b.n	8007a92 <_printf_float+0x3ca>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	464a      	mov	r2, r9
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f ae3f 	beq.w	8007760 <_printf_float+0x98>
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aea:	1a5b      	subs	r3, r3, r1
 8007aec:	4543      	cmp	r3, r8
 8007aee:	dcf0      	bgt.n	8007ad2 <_printf_float+0x40a>
 8007af0:	e6f9      	b.n	80078e6 <_printf_float+0x21e>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	f104 0919 	add.w	r9, r4, #25
 8007afa:	e7f4      	b.n	8007ae6 <_printf_float+0x41e>

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4699      	mov	r9, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bfb8      	it	lt
 8007b10:	4613      	movlt	r3, r2
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc26      	bgt.n	8007b92 <_printf_common+0x96>
 8007b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b48:	1e13      	subs	r3, r2, #0
 8007b4a:	6822      	ldr	r2, [r4, #0]
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d42b      	bmi.n	8007bac <_printf_common+0xb0>
 8007b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c0      	blx	r8
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d01e      	beq.n	8007ba0 <_printf_common+0xa4>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6922      	ldr	r2, [r4, #16]
 8007b66:	f003 0306 	and.w	r3, r3, #6
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf02      	ittt	eq
 8007b6e:	68e5      	ldreq	r5, [r4, #12]
 8007b70:	6833      	ldreq	r3, [r6, #0]
 8007b72:	1aed      	subeq	r5, r5, r3
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	2600      	movs	r6, #0
 8007b88:	341a      	adds	r4, #26
 8007b8a:	42b5      	cmp	r5, r6
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xc8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xa8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4649      	mov	r1, r9
 8007b98:	4638      	mov	r0, r7
 8007b9a:	47c0      	blx	r8
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xac>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c6      	b.n	8007b3a <_printf_common+0x3e>
 8007bac:	18e1      	adds	r1, r4, r3
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	2030      	movs	r0, #48	; 0x30
 8007bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bb6:	4422      	add	r2, r4
 8007bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7c7      	b.n	8007b54 <_printf_common+0x58>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xa4>
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7d9      	b.n	8007b8a <_printf_common+0x8e>
	...

08007bd8 <_printf_i>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	7e0f      	ldrb	r7, [r1, #24]
 8007bde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007be0:	2f78      	cmp	r7, #120	; 0x78
 8007be2:	4691      	mov	r9, r2
 8007be4:	4680      	mov	r8, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	469a      	mov	sl, r3
 8007bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bee:	d807      	bhi.n	8007c00 <_printf_i+0x28>
 8007bf0:	2f62      	cmp	r7, #98	; 0x62
 8007bf2:	d80a      	bhi.n	8007c0a <_printf_i+0x32>
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	f000 80d4 	beq.w	8007da2 <_printf_i+0x1ca>
 8007bfa:	2f58      	cmp	r7, #88	; 0x58
 8007bfc:	f000 80c0 	beq.w	8007d80 <_printf_i+0x1a8>
 8007c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c08:	e03a      	b.n	8007c80 <_printf_i+0xa8>
 8007c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c0e:	2b15      	cmp	r3, #21
 8007c10:	d8f6      	bhi.n	8007c00 <_printf_i+0x28>
 8007c12:	a101      	add	r1, pc, #4	; (adr r1, 8007c18 <_printf_i+0x40>)
 8007c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c85 	.word	0x08007c85
 8007c20:	08007c01 	.word	0x08007c01
 8007c24:	08007c01 	.word	0x08007c01
 8007c28:	08007c01 	.word	0x08007c01
 8007c2c:	08007c01 	.word	0x08007c01
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c01 	.word	0x08007c01
 8007c38:	08007c01 	.word	0x08007c01
 8007c3c:	08007c01 	.word	0x08007c01
 8007c40:	08007c01 	.word	0x08007c01
 8007c44:	08007d89 	.word	0x08007d89
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007d43 	.word	0x08007d43
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007c01 	.word	0x08007c01
 8007c58:	08007dab 	.word	0x08007dab
 8007c5c:	08007c01 	.word	0x08007c01
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007c01 	.word	0x08007c01
 8007c68:	08007c01 	.word	0x08007c01
 8007c6c:	08007d4b 	.word	0x08007d4b
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	602a      	str	r2, [r5, #0]
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e09f      	b.n	8007dc4 <_printf_i+0x1ec>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	0607      	lsls	r7, r0, #24
 8007c8a:	f103 0104 	add.w	r1, r3, #4
 8007c8e:	6029      	str	r1, [r5, #0]
 8007c90:	d501      	bpl.n	8007c96 <_printf_i+0xbe>
 8007c92:	681e      	ldr	r6, [r3, #0]
 8007c94:	e003      	b.n	8007c9e <_printf_i+0xc6>
 8007c96:	0646      	lsls	r6, r0, #25
 8007c98:	d5fb      	bpl.n	8007c92 <_printf_i+0xba>
 8007c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	da03      	bge.n	8007caa <_printf_i+0xd2>
 8007ca2:	232d      	movs	r3, #45	; 0x2d
 8007ca4:	4276      	negs	r6, r6
 8007ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007caa:	485a      	ldr	r0, [pc, #360]	; (8007e14 <_printf_i+0x23c>)
 8007cac:	230a      	movs	r3, #10
 8007cae:	e012      	b.n	8007cd6 <_printf_i+0xfe>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	6820      	ldr	r0, [r4, #0]
 8007cb4:	1d19      	adds	r1, r3, #4
 8007cb6:	6029      	str	r1, [r5, #0]
 8007cb8:	0605      	lsls	r5, r0, #24
 8007cba:	d501      	bpl.n	8007cc0 <_printf_i+0xe8>
 8007cbc:	681e      	ldr	r6, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <_printf_i+0xee>
 8007cc0:	0641      	lsls	r1, r0, #25
 8007cc2:	d5fb      	bpl.n	8007cbc <_printf_i+0xe4>
 8007cc4:	881e      	ldrh	r6, [r3, #0]
 8007cc6:	4853      	ldr	r0, [pc, #332]	; (8007e14 <_printf_i+0x23c>)
 8007cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007cca:	bf0c      	ite	eq
 8007ccc:	2308      	moveq	r3, #8
 8007cce:	230a      	movne	r3, #10
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cd6:	6865      	ldr	r5, [r4, #4]
 8007cd8:	60a5      	str	r5, [r4, #8]
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	bfa2      	ittt	ge
 8007cde:	6821      	ldrge	r1, [r4, #0]
 8007ce0:	f021 0104 	bicge.w	r1, r1, #4
 8007ce4:	6021      	strge	r1, [r4, #0]
 8007ce6:	b90e      	cbnz	r6, 8007cec <_printf_i+0x114>
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	d04b      	beq.n	8007d84 <_printf_i+0x1ac>
 8007cec:	4615      	mov	r5, r2
 8007cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cf6:	5dc7      	ldrb	r7, [r0, r7]
 8007cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cfc:	4637      	mov	r7, r6
 8007cfe:	42bb      	cmp	r3, r7
 8007d00:	460e      	mov	r6, r1
 8007d02:	d9f4      	bls.n	8007cee <_printf_i+0x116>
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d10b      	bne.n	8007d20 <_printf_i+0x148>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	07de      	lsls	r6, r3, #31
 8007d0c:	d508      	bpl.n	8007d20 <_printf_i+0x148>
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	6861      	ldr	r1, [r4, #4]
 8007d12:	4299      	cmp	r1, r3
 8007d14:	bfde      	ittt	le
 8007d16:	2330      	movle	r3, #48	; 0x30
 8007d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d20:	1b52      	subs	r2, r2, r5
 8007d22:	6122      	str	r2, [r4, #16]
 8007d24:	f8cd a000 	str.w	sl, [sp]
 8007d28:	464b      	mov	r3, r9
 8007d2a:	aa03      	add	r2, sp, #12
 8007d2c:	4621      	mov	r1, r4
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f7ff fee4 	bl	8007afc <_printf_common>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d14a      	bne.n	8007dce <_printf_i+0x1f6>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b004      	add	sp, #16
 8007d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f043 0320 	orr.w	r3, r3, #32
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	4833      	ldr	r0, [pc, #204]	; (8007e18 <_printf_i+0x240>)
 8007d4c:	2778      	movs	r7, #120	; 0x78
 8007d4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	6829      	ldr	r1, [r5, #0]
 8007d56:	061f      	lsls	r7, r3, #24
 8007d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d5c:	d402      	bmi.n	8007d64 <_printf_i+0x18c>
 8007d5e:	065f      	lsls	r7, r3, #25
 8007d60:	bf48      	it	mi
 8007d62:	b2b6      	uxthmi	r6, r6
 8007d64:	07df      	lsls	r7, r3, #31
 8007d66:	bf48      	it	mi
 8007d68:	f043 0320 	orrmi.w	r3, r3, #32
 8007d6c:	6029      	str	r1, [r5, #0]
 8007d6e:	bf48      	it	mi
 8007d70:	6023      	strmi	r3, [r4, #0]
 8007d72:	b91e      	cbnz	r6, 8007d7c <_printf_i+0x1a4>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	f023 0320 	bic.w	r3, r3, #32
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	e7a7      	b.n	8007cd0 <_printf_i+0xf8>
 8007d80:	4824      	ldr	r0, [pc, #144]	; (8007e14 <_printf_i+0x23c>)
 8007d82:	e7e4      	b.n	8007d4e <_printf_i+0x176>
 8007d84:	4615      	mov	r5, r2
 8007d86:	e7bd      	b.n	8007d04 <_printf_i+0x12c>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	6826      	ldr	r6, [r4, #0]
 8007d8c:	6961      	ldr	r1, [r4, #20]
 8007d8e:	1d18      	adds	r0, r3, #4
 8007d90:	6028      	str	r0, [r5, #0]
 8007d92:	0635      	lsls	r5, r6, #24
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	d501      	bpl.n	8007d9c <_printf_i+0x1c4>
 8007d98:	6019      	str	r1, [r3, #0]
 8007d9a:	e002      	b.n	8007da2 <_printf_i+0x1ca>
 8007d9c:	0670      	lsls	r0, r6, #25
 8007d9e:	d5fb      	bpl.n	8007d98 <_printf_i+0x1c0>
 8007da0:	8019      	strh	r1, [r3, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	6123      	str	r3, [r4, #16]
 8007da6:	4615      	mov	r5, r2
 8007da8:	e7bc      	b.n	8007d24 <_printf_i+0x14c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	602a      	str	r2, [r5, #0]
 8007db0:	681d      	ldr	r5, [r3, #0]
 8007db2:	6862      	ldr	r2, [r4, #4]
 8007db4:	2100      	movs	r1, #0
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7f8 fa42 	bl	8000240 <memchr>
 8007dbc:	b108      	cbz	r0, 8007dc2 <_printf_i+0x1ea>
 8007dbe:	1b40      	subs	r0, r0, r5
 8007dc0:	6060      	str	r0, [r4, #4]
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	6123      	str	r3, [r4, #16]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dcc:	e7aa      	b.n	8007d24 <_printf_i+0x14c>
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	47d0      	blx	sl
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d0ad      	beq.n	8007d38 <_printf_i+0x160>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	079b      	lsls	r3, r3, #30
 8007de0:	d413      	bmi.n	8007e0a <_printf_i+0x232>
 8007de2:	68e0      	ldr	r0, [r4, #12]
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	4298      	cmp	r0, r3
 8007de8:	bfb8      	it	lt
 8007dea:	4618      	movlt	r0, r3
 8007dec:	e7a6      	b.n	8007d3c <_printf_i+0x164>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4632      	mov	r2, r6
 8007df2:	4649      	mov	r1, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	47d0      	blx	sl
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d09d      	beq.n	8007d38 <_printf_i+0x160>
 8007dfc:	3501      	adds	r5, #1
 8007dfe:	68e3      	ldr	r3, [r4, #12]
 8007e00:	9903      	ldr	r1, [sp, #12]
 8007e02:	1a5b      	subs	r3, r3, r1
 8007e04:	42ab      	cmp	r3, r5
 8007e06:	dcf2      	bgt.n	8007dee <_printf_i+0x216>
 8007e08:	e7eb      	b.n	8007de2 <_printf_i+0x20a>
 8007e0a:	2500      	movs	r5, #0
 8007e0c:	f104 0619 	add.w	r6, r4, #25
 8007e10:	e7f5      	b.n	8007dfe <_printf_i+0x226>
 8007e12:	bf00      	nop
 8007e14:	0800aaca 	.word	0x0800aaca
 8007e18:	0800aadb 	.word	0x0800aadb

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f000 f902 	bl	8008042 <memset>
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x38>)
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x3c>)
 8007e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <std+0x40>)
 8007e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4a:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <std+0x44>)
 8007e4c:	6224      	str	r4, [r4, #32]
 8007e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	08007fbd 	.word	0x08007fbd
 8007e58:	08007fdf 	.word	0x08007fdf
 8007e5c:	08008017 	.word	0x08008017
 8007e60:	0800803b 	.word	0x0800803b

08007e64 <stdio_exit_handler>:
 8007e64:	4a02      	ldr	r2, [pc, #8]	; (8007e70 <stdio_exit_handler+0xc>)
 8007e66:	4903      	ldr	r1, [pc, #12]	; (8007e74 <stdio_exit_handler+0x10>)
 8007e68:	4803      	ldr	r0, [pc, #12]	; (8007e78 <stdio_exit_handler+0x14>)
 8007e6a:	f000 b869 	b.w	8007f40 <_fwalk_sglue>
 8007e6e:	bf00      	nop
 8007e70:	20000018 	.word	0x20000018
 8007e74:	080099dd 	.word	0x080099dd
 8007e78:	20000024 	.word	0x20000024

08007e7c <cleanup_stdio>:
 8007e7c:	6841      	ldr	r1, [r0, #4]
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <cleanup_stdio+0x34>)
 8007e80:	4299      	cmp	r1, r3
 8007e82:	b510      	push	{r4, lr}
 8007e84:	4604      	mov	r4, r0
 8007e86:	d001      	beq.n	8007e8c <cleanup_stdio+0x10>
 8007e88:	f001 fda8 	bl	80099dc <_fflush_r>
 8007e8c:	68a1      	ldr	r1, [r4, #8]
 8007e8e:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <cleanup_stdio+0x38>)
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d002      	beq.n	8007e9a <cleanup_stdio+0x1e>
 8007e94:	4620      	mov	r0, r4
 8007e96:	f001 fda1 	bl	80099dc <_fflush_r>
 8007e9a:	68e1      	ldr	r1, [r4, #12]
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <cleanup_stdio+0x3c>)
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	d004      	beq.n	8007eac <cleanup_stdio+0x30>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea8:	f001 bd98 	b.w	80099dc <_fflush_r>
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	200004d0 	.word	0x200004d0
 8007eb4:	20000538 	.word	0x20000538
 8007eb8:	200005a0 	.word	0x200005a0

08007ebc <global_stdio_init.part.0>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <global_stdio_init.part.0+0x30>)
 8007ec0:	4c0b      	ldr	r4, [pc, #44]	; (8007ef0 <global_stdio_init.part.0+0x34>)
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <global_stdio_init.part.0+0x38>)
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2104      	movs	r1, #4
 8007ecc:	f7ff ffa6 	bl	8007e1c <std>
 8007ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	2109      	movs	r1, #9
 8007ed8:	f7ff ffa0 	bl	8007e1c <std>
 8007edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f7ff bf98 	b.w	8007e1c <std>
 8007eec:	20000608 	.word	0x20000608
 8007ef0:	200004d0 	.word	0x200004d0
 8007ef4:	08007e65 	.word	0x08007e65

08007ef8 <__sfp_lock_acquire>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_acquire+0x8>)
 8007efa:	f000 b91f 	b.w	800813c <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	20000611 	.word	0x20000611

08007f04 <__sfp_lock_release>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sfp_lock_release+0x8>)
 8007f06:	f000 b91a 	b.w	800813e <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	20000611 	.word	0x20000611

08007f10 <__sinit>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	4604      	mov	r4, r0
 8007f14:	f7ff fff0 	bl	8007ef8 <__sfp_lock_acquire>
 8007f18:	6a23      	ldr	r3, [r4, #32]
 8007f1a:	b11b      	cbz	r3, 8007f24 <__sinit+0x14>
 8007f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f20:	f7ff bff0 	b.w	8007f04 <__sfp_lock_release>
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <__sinit+0x28>)
 8007f26:	6223      	str	r3, [r4, #32]
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <__sinit+0x2c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f5      	bne.n	8007f1c <__sinit+0xc>
 8007f30:	f7ff ffc4 	bl	8007ebc <global_stdio_init.part.0>
 8007f34:	e7f2      	b.n	8007f1c <__sinit+0xc>
 8007f36:	bf00      	nop
 8007f38:	08007e7d 	.word	0x08007e7d
 8007f3c:	20000608 	.word	0x20000608

08007f40 <_fwalk_sglue>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	4607      	mov	r7, r0
 8007f46:	4688      	mov	r8, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f50:	f1b9 0901 	subs.w	r9, r9, #1
 8007f54:	d505      	bpl.n	8007f62 <_fwalk_sglue+0x22>
 8007f56:	6824      	ldr	r4, [r4, #0]
 8007f58:	2c00      	cmp	r4, #0
 8007f5a:	d1f7      	bne.n	8007f4c <_fwalk_sglue+0xc>
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f62:	89ab      	ldrh	r3, [r5, #12]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d907      	bls.n	8007f78 <_fwalk_sglue+0x38>
 8007f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	d003      	beq.n	8007f78 <_fwalk_sglue+0x38>
 8007f70:	4629      	mov	r1, r5
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	4306      	orrs	r6, r0
 8007f78:	3568      	adds	r5, #104	; 0x68
 8007f7a:	e7e9      	b.n	8007f50 <_fwalk_sglue+0x10>

08007f7c <siprintf>:
 8007f7c:	b40e      	push	{r1, r2, r3}
 8007f7e:	b500      	push	{lr}
 8007f80:	b09c      	sub	sp, #112	; 0x70
 8007f82:	ab1d      	add	r3, sp, #116	; 0x74
 8007f84:	9002      	str	r0, [sp, #8]
 8007f86:	9006      	str	r0, [sp, #24]
 8007f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f8c:	4809      	ldr	r0, [pc, #36]	; (8007fb4 <siprintf+0x38>)
 8007f8e:	9107      	str	r1, [sp, #28]
 8007f90:	9104      	str	r1, [sp, #16]
 8007f92:	4909      	ldr	r1, [pc, #36]	; (8007fb8 <siprintf+0x3c>)
 8007f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	a902      	add	r1, sp, #8
 8007fa0:	f001 fb98 	bl	80096d4 <_svfiprintf_r>
 8007fa4:	9b02      	ldr	r3, [sp, #8]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	b01c      	add	sp, #112	; 0x70
 8007fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb0:	b003      	add	sp, #12
 8007fb2:	4770      	bx	lr
 8007fb4:	20000070 	.word	0x20000070
 8007fb8:	ffff0208 	.word	0xffff0208

08007fbc <__sread>:
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc4:	f000 f86c 	bl	80080a0 <_read_r>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	bfab      	itete	ge
 8007fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fce:	89a3      	ldrhlt	r3, [r4, #12]
 8007fd0:	181b      	addge	r3, r3, r0
 8007fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fd6:	bfac      	ite	ge
 8007fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fda:	81a3      	strhlt	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__swrite>:
 8007fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	898b      	ldrh	r3, [r1, #12]
 8007fe6:	05db      	lsls	r3, r3, #23
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4616      	mov	r6, r2
 8007fee:	d505      	bpl.n	8007ffc <__swrite+0x1e>
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f000 f840 	bl	800807c <_lseek_r>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	f000 b857 	b.w	80080c4 <_write_r>

08008016 <__sseek>:
 8008016:	b510      	push	{r4, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801e:	f000 f82d 	bl	800807c <_lseek_r>
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	bf15      	itete	ne
 8008028:	6560      	strne	r0, [r4, #84]	; 0x54
 800802a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800802e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strheq	r3, [r4, #12]
 8008034:	bf18      	it	ne
 8008036:	81a3      	strhne	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__sclose>:
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 b80d 	b.w	800805c <_close_r>

08008042 <memset>:
 8008042:	4402      	add	r2, r0
 8008044:	4603      	mov	r3, r0
 8008046:	4293      	cmp	r3, r2
 8008048:	d100      	bne.n	800804c <memset+0xa>
 800804a:	4770      	bx	lr
 800804c:	f803 1b01 	strb.w	r1, [r3], #1
 8008050:	e7f9      	b.n	8008046 <memset+0x4>
	...

08008054 <_localeconv_r>:
 8008054:	4800      	ldr	r0, [pc, #0]	; (8008058 <_localeconv_r+0x4>)
 8008056:	4770      	bx	lr
 8008058:	20000164 	.word	0x20000164

0800805c <_close_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d06      	ldr	r5, [pc, #24]	; (8008078 <_close_r+0x1c>)
 8008060:	2300      	movs	r3, #0
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	f7f9 ff1b 	bl	8001ea2 <_close>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_close_r+0x1a>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_close_r+0x1a>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	2000060c 	.word	0x2000060c

0800807c <_lseek_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d07      	ldr	r5, [pc, #28]	; (800809c <_lseek_r+0x20>)
 8008080:	4604      	mov	r4, r0
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	2200      	movs	r2, #0
 8008088:	602a      	str	r2, [r5, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f7f9 ff30 	bl	8001ef0 <_lseek>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_lseek_r+0x1e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_lseek_r+0x1e>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	2000060c 	.word	0x2000060c

080080a0 <_read_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	; (80080c0 <_read_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7f9 febe 	bl	8001e30 <_read>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_read_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_read_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	2000060c 	.word	0x2000060c

080080c4 <_write_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_write_r+0x20>)
 80080c8:	4604      	mov	r4, r0
 80080ca:	4608      	mov	r0, r1
 80080cc:	4611      	mov	r1, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7f9 fec9 	bl	8001e6a <_write>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_write_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_write_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	2000060c 	.word	0x2000060c

080080e8 <__errno>:
 80080e8:	4b01      	ldr	r3, [pc, #4]	; (80080f0 <__errno+0x8>)
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000070 	.word	0x20000070

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	; (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	; (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	; (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	; (8008138 <__libc_init_array+0x44>)
 8008108:	f002 fb26 	bl	800a758 <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	0800c6f0 	.word	0x0800c6f0
 8008130:	0800c6f0 	.word	0x0800c6f0
 8008134:	0800c6f0 	.word	0x0800c6f0
 8008138:	0800c6f4 	.word	0x0800c6f4

0800813c <__retarget_lock_acquire_recursive>:
 800813c:	4770      	bx	lr

0800813e <__retarget_lock_release_recursive>:
 800813e:	4770      	bx	lr

08008140 <quorem>:
 8008140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	6903      	ldr	r3, [r0, #16]
 8008146:	690c      	ldr	r4, [r1, #16]
 8008148:	42a3      	cmp	r3, r4
 800814a:	4607      	mov	r7, r0
 800814c:	db7e      	blt.n	800824c <quorem+0x10c>
 800814e:	3c01      	subs	r4, #1
 8008150:	f101 0814 	add.w	r8, r1, #20
 8008154:	f100 0514 	add.w	r5, r0, #20
 8008158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008166:	3301      	adds	r3, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800816e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008172:	fbb2 f6f3 	udiv	r6, r2, r3
 8008176:	d331      	bcc.n	80081dc <quorem+0x9c>
 8008178:	f04f 0e00 	mov.w	lr, #0
 800817c:	4640      	mov	r0, r8
 800817e:	46ac      	mov	ip, r5
 8008180:	46f2      	mov	sl, lr
 8008182:	f850 2b04 	ldr.w	r2, [r0], #4
 8008186:	b293      	uxth	r3, r2
 8008188:	fb06 e303 	mla	r3, r6, r3, lr
 800818c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008190:	0c1a      	lsrs	r2, r3, #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ebaa 0303 	sub.w	r3, sl, r3
 8008198:	f8dc a000 	ldr.w	sl, [ip]
 800819c:	fa13 f38a 	uxtah	r3, r3, sl
 80081a0:	fb06 220e 	mla	r2, r6, lr, r2
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ac:	b292      	uxth	r2, r2
 80081ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80081ba:	4581      	cmp	r9, r0
 80081bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c0:	f84c 3b04 	str.w	r3, [ip], #4
 80081c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081c8:	d2db      	bcs.n	8008182 <quorem+0x42>
 80081ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80081ce:	b92b      	cbnz	r3, 80081dc <quorem+0x9c>
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	3b04      	subs	r3, #4
 80081d4:	429d      	cmp	r5, r3
 80081d6:	461a      	mov	r2, r3
 80081d8:	d32c      	bcc.n	8008234 <quorem+0xf4>
 80081da:	613c      	str	r4, [r7, #16]
 80081dc:	4638      	mov	r0, r7
 80081de:	f001 f91f 	bl	8009420 <__mcmp>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	db22      	blt.n	800822c <quorem+0xec>
 80081e6:	3601      	adds	r6, #1
 80081e8:	4629      	mov	r1, r5
 80081ea:	2000      	movs	r0, #0
 80081ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80081f0:	f8d1 c000 	ldr.w	ip, [r1]
 80081f4:	b293      	uxth	r3, r2
 80081f6:	1ac3      	subs	r3, r0, r3
 80081f8:	0c12      	lsrs	r2, r2, #16
 80081fa:	fa13 f38c 	uxtah	r3, r3, ip
 80081fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008202:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820c:	45c1      	cmp	r9, r8
 800820e:	f841 3b04 	str.w	r3, [r1], #4
 8008212:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008216:	d2e9      	bcs.n	80081ec <quorem+0xac>
 8008218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800821c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008220:	b922      	cbnz	r2, 800822c <quorem+0xec>
 8008222:	3b04      	subs	r3, #4
 8008224:	429d      	cmp	r5, r3
 8008226:	461a      	mov	r2, r3
 8008228:	d30a      	bcc.n	8008240 <quorem+0x100>
 800822a:	613c      	str	r4, [r7, #16]
 800822c:	4630      	mov	r0, r6
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	3b04      	subs	r3, #4
 8008238:	2a00      	cmp	r2, #0
 800823a:	d1ce      	bne.n	80081da <quorem+0x9a>
 800823c:	3c01      	subs	r4, #1
 800823e:	e7c9      	b.n	80081d4 <quorem+0x94>
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	3b04      	subs	r3, #4
 8008244:	2a00      	cmp	r2, #0
 8008246:	d1f0      	bne.n	800822a <quorem+0xea>
 8008248:	3c01      	subs	r4, #1
 800824a:	e7eb      	b.n	8008224 <quorem+0xe4>
 800824c:	2000      	movs	r0, #0
 800824e:	e7ee      	b.n	800822e <quorem+0xee>

08008250 <_dtoa_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ed2d 8b02 	vpush	{d8}
 8008258:	69c5      	ldr	r5, [r0, #28]
 800825a:	b091      	sub	sp, #68	; 0x44
 800825c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008260:	ec59 8b10 	vmov	r8, r9, d0
 8008264:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008266:	9106      	str	r1, [sp, #24]
 8008268:	4606      	mov	r6, r0
 800826a:	9208      	str	r2, [sp, #32]
 800826c:	930c      	str	r3, [sp, #48]	; 0x30
 800826e:	b975      	cbnz	r5, 800828e <_dtoa_r+0x3e>
 8008270:	2010      	movs	r0, #16
 8008272:	f000 fda5 	bl	8008dc0 <malloc>
 8008276:	4602      	mov	r2, r0
 8008278:	61f0      	str	r0, [r6, #28]
 800827a:	b920      	cbnz	r0, 8008286 <_dtoa_r+0x36>
 800827c:	4ba6      	ldr	r3, [pc, #664]	; (8008518 <_dtoa_r+0x2c8>)
 800827e:	21ef      	movs	r1, #239	; 0xef
 8008280:	48a6      	ldr	r0, [pc, #664]	; (800851c <_dtoa_r+0x2cc>)
 8008282:	f001 fc0b 	bl	8009a9c <__assert_func>
 8008286:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828a:	6005      	str	r5, [r0, #0]
 800828c:	60c5      	str	r5, [r0, #12]
 800828e:	69f3      	ldr	r3, [r6, #28]
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	b151      	cbz	r1, 80082aa <_dtoa_r+0x5a>
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	604a      	str	r2, [r1, #4]
 8008298:	2301      	movs	r3, #1
 800829a:	4093      	lsls	r3, r2
 800829c:	608b      	str	r3, [r1, #8]
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 fe82 	bl	8008fa8 <_Bfree>
 80082a4:	69f3      	ldr	r3, [r6, #28]
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f1b9 0300 	subs.w	r3, r9, #0
 80082ae:	bfbb      	ittet	lt
 80082b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082b4:	9303      	strlt	r3, [sp, #12]
 80082b6:	2300      	movge	r3, #0
 80082b8:	2201      	movlt	r2, #1
 80082ba:	bfac      	ite	ge
 80082bc:	6023      	strge	r3, [r4, #0]
 80082be:	6022      	strlt	r2, [r4, #0]
 80082c0:	4b97      	ldr	r3, [pc, #604]	; (8008520 <_dtoa_r+0x2d0>)
 80082c2:	9c03      	ldr	r4, [sp, #12]
 80082c4:	43a3      	bics	r3, r4
 80082c6:	d11c      	bne.n	8008302 <_dtoa_r+0xb2>
 80082c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80082d4:	ea53 0308 	orrs.w	r3, r3, r8
 80082d8:	f000 84fb 	beq.w	8008cd2 <_dtoa_r+0xa82>
 80082dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082de:	b963      	cbnz	r3, 80082fa <_dtoa_r+0xaa>
 80082e0:	4b90      	ldr	r3, [pc, #576]	; (8008524 <_dtoa_r+0x2d4>)
 80082e2:	e020      	b.n	8008326 <_dtoa_r+0xd6>
 80082e4:	4b90      	ldr	r3, [pc, #576]	; (8008528 <_dtoa_r+0x2d8>)
 80082e6:	9301      	str	r3, [sp, #4]
 80082e8:	3308      	adds	r3, #8
 80082ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	9801      	ldr	r0, [sp, #4]
 80082f0:	b011      	add	sp, #68	; 0x44
 80082f2:	ecbd 8b02 	vpop	{d8}
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	4b8a      	ldr	r3, [pc, #552]	; (8008524 <_dtoa_r+0x2d4>)
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	3303      	adds	r3, #3
 8008300:	e7f3      	b.n	80082ea <_dtoa_r+0x9a>
 8008302:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008306:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d10c      	bne.n	800832a <_dtoa_r+0xda>
 8008310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008312:	2301      	movs	r3, #1
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 84d7 	beq.w	8008ccc <_dtoa_r+0xa7c>
 800831e:	4b83      	ldr	r3, [pc, #524]	; (800852c <_dtoa_r+0x2dc>)
 8008320:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	3b01      	subs	r3, #1
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	e7e1      	b.n	80082ee <_dtoa_r+0x9e>
 800832a:	aa0e      	add	r2, sp, #56	; 0x38
 800832c:	a90f      	add	r1, sp, #60	; 0x3c
 800832e:	4630      	mov	r0, r6
 8008330:	eeb0 0b48 	vmov.f64	d0, d8
 8008334:	f001 f91a 	bl	800956c <__d2b>
 8008338:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800833c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800833e:	4605      	mov	r5, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d046      	beq.n	80083d2 <_dtoa_r+0x182>
 8008344:	eeb0 7b48 	vmov.f64	d7, d8
 8008348:	ee18 1a90 	vmov	r1, s17
 800834c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008350:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008354:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008358:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800835c:	2000      	movs	r0, #0
 800835e:	ee07 1a90 	vmov	s15, r1
 8008362:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008366:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008500 <_dtoa_r+0x2b0>
 800836a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800836e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008508 <_dtoa_r+0x2b8>
 8008372:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008376:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008510 <_dtoa_r+0x2c0>
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008382:	eeb0 7b46 	vmov.f64	d7, d6
 8008386:	eea4 7b05 	vfma.f64	d7, d4, d5
 800838a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800838e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008396:	ee16 ba90 	vmov	fp, s13
 800839a:	9009      	str	r0, [sp, #36]	; 0x24
 800839c:	d508      	bpl.n	80083b0 <_dtoa_r+0x160>
 800839e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80083a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80083a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083aa:	bf18      	it	ne
 80083ac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80083b0:	f1bb 0f16 	cmp.w	fp, #22
 80083b4:	d82b      	bhi.n	800840e <_dtoa_r+0x1be>
 80083b6:	495e      	ldr	r1, [pc, #376]	; (8008530 <_dtoa_r+0x2e0>)
 80083b8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80083bc:	ed91 7b00 	vldr	d7, [r1]
 80083c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	d501      	bpl.n	80083ce <_dtoa_r+0x17e>
 80083ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083ce:	2100      	movs	r1, #0
 80083d0:	e01e      	b.n	8008410 <_dtoa_r+0x1c0>
 80083d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d4:	4413      	add	r3, r2
 80083d6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80083da:	2920      	cmp	r1, #32
 80083dc:	bfc1      	itttt	gt
 80083de:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80083e2:	408c      	lslgt	r4, r1
 80083e4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80083e8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80083ec:	bfd6      	itet	le
 80083ee:	f1c1 0120 	rsble	r1, r1, #32
 80083f2:	4321      	orrgt	r1, r4
 80083f4:	fa08 f101 	lslle.w	r1, r8, r1
 80083f8:	ee07 1a90 	vmov	s15, r1
 80083fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008400:	3b01      	subs	r3, #1
 8008402:	ee17 1a90 	vmov	r1, s15
 8008406:	2001      	movs	r0, #1
 8008408:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800840c:	e7a7      	b.n	800835e <_dtoa_r+0x10e>
 800840e:	2101      	movs	r1, #1
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	1e53      	subs	r3, r2, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	bf45      	ittet	mi
 8008418:	f1c2 0301 	rsbmi	r3, r2, #1
 800841c:	9304      	strmi	r3, [sp, #16]
 800841e:	2300      	movpl	r3, #0
 8008420:	2300      	movmi	r3, #0
 8008422:	bf4c      	ite	mi
 8008424:	9305      	strmi	r3, [sp, #20]
 8008426:	9304      	strpl	r3, [sp, #16]
 8008428:	f1bb 0f00 	cmp.w	fp, #0
 800842c:	910b      	str	r1, [sp, #44]	; 0x2c
 800842e:	db18      	blt.n	8008462 <_dtoa_r+0x212>
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008436:	445b      	add	r3, fp
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	2300      	movs	r3, #0
 800843c:	9a06      	ldr	r2, [sp, #24]
 800843e:	2a09      	cmp	r2, #9
 8008440:	d848      	bhi.n	80084d4 <_dtoa_r+0x284>
 8008442:	2a05      	cmp	r2, #5
 8008444:	bfc4      	itt	gt
 8008446:	3a04      	subgt	r2, #4
 8008448:	9206      	strgt	r2, [sp, #24]
 800844a:	9a06      	ldr	r2, [sp, #24]
 800844c:	f1a2 0202 	sub.w	r2, r2, #2
 8008450:	bfcc      	ite	gt
 8008452:	2400      	movgt	r4, #0
 8008454:	2401      	movle	r4, #1
 8008456:	2a03      	cmp	r2, #3
 8008458:	d847      	bhi.n	80084ea <_dtoa_r+0x29a>
 800845a:	e8df f002 	tbb	[pc, r2]
 800845e:	2d0b      	.short	0x2d0b
 8008460:	392b      	.short	0x392b
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	2200      	movs	r2, #0
 8008466:	eba3 030b 	sub.w	r3, r3, fp
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	920a      	str	r2, [sp, #40]	; 0x28
 800846e:	f1cb 0300 	rsb	r3, fp, #0
 8008472:	e7e3      	b.n	800843c <_dtoa_r+0x1ec>
 8008474:	2200      	movs	r2, #0
 8008476:	9207      	str	r2, [sp, #28]
 8008478:	9a08      	ldr	r2, [sp, #32]
 800847a:	2a00      	cmp	r2, #0
 800847c:	dc38      	bgt.n	80084f0 <_dtoa_r+0x2a0>
 800847e:	f04f 0a01 	mov.w	sl, #1
 8008482:	46d1      	mov	r9, sl
 8008484:	4652      	mov	r2, sl
 8008486:	f8cd a020 	str.w	sl, [sp, #32]
 800848a:	69f7      	ldr	r7, [r6, #28]
 800848c:	2100      	movs	r1, #0
 800848e:	2004      	movs	r0, #4
 8008490:	f100 0c14 	add.w	ip, r0, #20
 8008494:	4594      	cmp	ip, r2
 8008496:	d930      	bls.n	80084fa <_dtoa_r+0x2aa>
 8008498:	6079      	str	r1, [r7, #4]
 800849a:	4630      	mov	r0, r6
 800849c:	930d      	str	r3, [sp, #52]	; 0x34
 800849e:	f000 fd43 	bl	8008f28 <_Balloc>
 80084a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a4:	9001      	str	r0, [sp, #4]
 80084a6:	4602      	mov	r2, r0
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d145      	bne.n	8008538 <_dtoa_r+0x2e8>
 80084ac:	4b21      	ldr	r3, [pc, #132]	; (8008534 <_dtoa_r+0x2e4>)
 80084ae:	f240 11af 	movw	r1, #431	; 0x1af
 80084b2:	e6e5      	b.n	8008280 <_dtoa_r+0x30>
 80084b4:	2201      	movs	r2, #1
 80084b6:	e7de      	b.n	8008476 <_dtoa_r+0x226>
 80084b8:	2200      	movs	r2, #0
 80084ba:	9207      	str	r2, [sp, #28]
 80084bc:	9a08      	ldr	r2, [sp, #32]
 80084be:	eb0b 0a02 	add.w	sl, fp, r2
 80084c2:	f10a 0901 	add.w	r9, sl, #1
 80084c6:	464a      	mov	r2, r9
 80084c8:	2a01      	cmp	r2, #1
 80084ca:	bfb8      	it	lt
 80084cc:	2201      	movlt	r2, #1
 80084ce:	e7dc      	b.n	800848a <_dtoa_r+0x23a>
 80084d0:	2201      	movs	r2, #1
 80084d2:	e7f2      	b.n	80084ba <_dtoa_r+0x26a>
 80084d4:	2401      	movs	r4, #1
 80084d6:	2200      	movs	r2, #0
 80084d8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80084dc:	f04f 3aff 	mov.w	sl, #4294967295
 80084e0:	2100      	movs	r1, #0
 80084e2:	46d1      	mov	r9, sl
 80084e4:	2212      	movs	r2, #18
 80084e6:	9108      	str	r1, [sp, #32]
 80084e8:	e7cf      	b.n	800848a <_dtoa_r+0x23a>
 80084ea:	2201      	movs	r2, #1
 80084ec:	9207      	str	r2, [sp, #28]
 80084ee:	e7f5      	b.n	80084dc <_dtoa_r+0x28c>
 80084f0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80084f4:	46d1      	mov	r9, sl
 80084f6:	4652      	mov	r2, sl
 80084f8:	e7c7      	b.n	800848a <_dtoa_r+0x23a>
 80084fa:	3101      	adds	r1, #1
 80084fc:	0040      	lsls	r0, r0, #1
 80084fe:	e7c7      	b.n	8008490 <_dtoa_r+0x240>
 8008500:	636f4361 	.word	0x636f4361
 8008504:	3fd287a7 	.word	0x3fd287a7
 8008508:	8b60c8b3 	.word	0x8b60c8b3
 800850c:	3fc68a28 	.word	0x3fc68a28
 8008510:	509f79fb 	.word	0x509f79fb
 8008514:	3fd34413 	.word	0x3fd34413
 8008518:	0800aaf9 	.word	0x0800aaf9
 800851c:	0800ab10 	.word	0x0800ab10
 8008520:	7ff00000 	.word	0x7ff00000
 8008524:	0800aaf5 	.word	0x0800aaf5
 8008528:	0800aaec 	.word	0x0800aaec
 800852c:	0800aac9 	.word	0x0800aac9
 8008530:	0800ac00 	.word	0x0800ac00
 8008534:	0800ab68 	.word	0x0800ab68
 8008538:	69f2      	ldr	r2, [r6, #28]
 800853a:	9901      	ldr	r1, [sp, #4]
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	f1b9 0f0e 	cmp.w	r9, #14
 8008542:	d86c      	bhi.n	800861e <_dtoa_r+0x3ce>
 8008544:	2c00      	cmp	r4, #0
 8008546:	d06a      	beq.n	800861e <_dtoa_r+0x3ce>
 8008548:	f1bb 0f00 	cmp.w	fp, #0
 800854c:	f340 80a0 	ble.w	8008690 <_dtoa_r+0x440>
 8008550:	4ac1      	ldr	r2, [pc, #772]	; (8008858 <_dtoa_r+0x608>)
 8008552:	f00b 010f 	and.w	r1, fp, #15
 8008556:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800855a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800855e:	ed92 7b00 	vldr	d7, [r2]
 8008562:	ea4f 122b 	mov.w	r2, fp, asr #4
 8008566:	f000 8087 	beq.w	8008678 <_dtoa_r+0x428>
 800856a:	49bc      	ldr	r1, [pc, #752]	; (800885c <_dtoa_r+0x60c>)
 800856c:	ed91 6b08 	vldr	d6, [r1, #32]
 8008570:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008574:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008578:	f002 020f 	and.w	r2, r2, #15
 800857c:	2103      	movs	r1, #3
 800857e:	48b7      	ldr	r0, [pc, #732]	; (800885c <_dtoa_r+0x60c>)
 8008580:	2a00      	cmp	r2, #0
 8008582:	d17b      	bne.n	800867c <_dtoa_r+0x42c>
 8008584:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008588:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800858c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008592:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008596:	2a00      	cmp	r2, #0
 8008598:	f000 80a0 	beq.w	80086dc <_dtoa_r+0x48c>
 800859c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80085a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80085a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a8:	f140 8098 	bpl.w	80086dc <_dtoa_r+0x48c>
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	f000 8094 	beq.w	80086dc <_dtoa_r+0x48c>
 80085b4:	f1ba 0f00 	cmp.w	sl, #0
 80085b8:	dd2f      	ble.n	800861a <_dtoa_r+0x3ca>
 80085ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80085be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085c6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80085ca:	3101      	adds	r1, #1
 80085cc:	4654      	mov	r4, sl
 80085ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80085d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80085d6:	ee07 1a90 	vmov	s15, r1
 80085da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80085e2:	ee15 7a90 	vmov	r7, s11
 80085e6:	ec51 0b15 	vmov	r0, r1, d5
 80085ea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80085ee:	2c00      	cmp	r4, #0
 80085f0:	d177      	bne.n	80086e2 <_dtoa_r+0x492>
 80085f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80085fa:	ec41 0b17 	vmov	d7, r0, r1
 80085fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008606:	f300 826a 	bgt.w	8008ade <_dtoa_r+0x88e>
 800860a:	eeb1 7b47 	vneg.f64	d7, d7
 800860e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008616:	f100 8260 	bmi.w	8008ada <_dtoa_r+0x88a>
 800861a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800861e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008620:	2a00      	cmp	r2, #0
 8008622:	f2c0 811d 	blt.w	8008860 <_dtoa_r+0x610>
 8008626:	f1bb 0f0e 	cmp.w	fp, #14
 800862a:	f300 8119 	bgt.w	8008860 <_dtoa_r+0x610>
 800862e:	4b8a      	ldr	r3, [pc, #552]	; (8008858 <_dtoa_r+0x608>)
 8008630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008634:	ed93 6b00 	vldr	d6, [r3]
 8008638:	9b08      	ldr	r3, [sp, #32]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f280 80b7 	bge.w	80087ae <_dtoa_r+0x55e>
 8008640:	f1b9 0f00 	cmp.w	r9, #0
 8008644:	f300 80b3 	bgt.w	80087ae <_dtoa_r+0x55e>
 8008648:	f040 8246 	bne.w	8008ad8 <_dtoa_r+0x888>
 800864c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008650:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008658:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800865c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008660:	464c      	mov	r4, r9
 8008662:	464f      	mov	r7, r9
 8008664:	f280 821c 	bge.w	8008aa0 <_dtoa_r+0x850>
 8008668:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800866c:	2331      	movs	r3, #49	; 0x31
 800866e:	f808 3b01 	strb.w	r3, [r8], #1
 8008672:	f10b 0b01 	add.w	fp, fp, #1
 8008676:	e218      	b.n	8008aaa <_dtoa_r+0x85a>
 8008678:	2102      	movs	r1, #2
 800867a:	e780      	b.n	800857e <_dtoa_r+0x32e>
 800867c:	07d4      	lsls	r4, r2, #31
 800867e:	d504      	bpl.n	800868a <_dtoa_r+0x43a>
 8008680:	ed90 6b00 	vldr	d6, [r0]
 8008684:	3101      	adds	r1, #1
 8008686:	ee27 7b06 	vmul.f64	d7, d7, d6
 800868a:	1052      	asrs	r2, r2, #1
 800868c:	3008      	adds	r0, #8
 800868e:	e777      	b.n	8008580 <_dtoa_r+0x330>
 8008690:	d022      	beq.n	80086d8 <_dtoa_r+0x488>
 8008692:	f1cb 0200 	rsb	r2, fp, #0
 8008696:	4970      	ldr	r1, [pc, #448]	; (8008858 <_dtoa_r+0x608>)
 8008698:	f002 000f 	and.w	r0, r2, #15
 800869c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80086a0:	ed91 7b00 	vldr	d7, [r1]
 80086a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80086a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086ac:	486b      	ldr	r0, [pc, #428]	; (800885c <_dtoa_r+0x60c>)
 80086ae:	1112      	asrs	r2, r2, #4
 80086b0:	2400      	movs	r4, #0
 80086b2:	2102      	movs	r1, #2
 80086b4:	b92a      	cbnz	r2, 80086c2 <_dtoa_r+0x472>
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	f43f af6a 	beq.w	8008590 <_dtoa_r+0x340>
 80086bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80086c0:	e766      	b.n	8008590 <_dtoa_r+0x340>
 80086c2:	07d7      	lsls	r7, r2, #31
 80086c4:	d505      	bpl.n	80086d2 <_dtoa_r+0x482>
 80086c6:	ed90 6b00 	vldr	d6, [r0]
 80086ca:	3101      	adds	r1, #1
 80086cc:	2401      	movs	r4, #1
 80086ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086d2:	1052      	asrs	r2, r2, #1
 80086d4:	3008      	adds	r0, #8
 80086d6:	e7ed      	b.n	80086b4 <_dtoa_r+0x464>
 80086d8:	2102      	movs	r1, #2
 80086da:	e759      	b.n	8008590 <_dtoa_r+0x340>
 80086dc:	465a      	mov	r2, fp
 80086de:	464c      	mov	r4, r9
 80086e0:	e775      	b.n	80085ce <_dtoa_r+0x37e>
 80086e2:	ec41 0b17 	vmov	d7, r0, r1
 80086e6:	495c      	ldr	r1, [pc, #368]	; (8008858 <_dtoa_r+0x608>)
 80086e8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80086ec:	ed11 4b02 	vldr	d4, [r1, #-8]
 80086f0:	9901      	ldr	r1, [sp, #4]
 80086f2:	440c      	add	r4, r1
 80086f4:	9907      	ldr	r1, [sp, #28]
 80086f6:	b351      	cbz	r1, 800874e <_dtoa_r+0x4fe>
 80086f8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80086fc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008700:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008704:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008708:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800870c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008710:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008714:	ee14 1a90 	vmov	r1, s9
 8008718:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800871c:	3130      	adds	r1, #48	; 0x30
 800871e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008722:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	f808 1b01 	strb.w	r1, [r8], #1
 800872e:	d439      	bmi.n	80087a4 <_dtoa_r+0x554>
 8008730:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008734:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873c:	d472      	bmi.n	8008824 <_dtoa_r+0x5d4>
 800873e:	45a0      	cmp	r8, r4
 8008740:	f43f af6b 	beq.w	800861a <_dtoa_r+0x3ca>
 8008744:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008748:	ee26 6b03 	vmul.f64	d6, d6, d3
 800874c:	e7e0      	b.n	8008710 <_dtoa_r+0x4c0>
 800874e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008752:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008756:	4620      	mov	r0, r4
 8008758:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800875c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008760:	ee14 1a90 	vmov	r1, s9
 8008764:	3130      	adds	r1, #48	; 0x30
 8008766:	f808 1b01 	strb.w	r1, [r8], #1
 800876a:	45a0      	cmp	r8, r4
 800876c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008770:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008774:	d118      	bne.n	80087a8 <_dtoa_r+0x558>
 8008776:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800877a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800877e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008786:	dc4d      	bgt.n	8008824 <_dtoa_r+0x5d4>
 8008788:	ee35 5b47 	vsub.f64	d5, d5, d7
 800878c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008794:	f57f af41 	bpl.w	800861a <_dtoa_r+0x3ca>
 8008798:	4680      	mov	r8, r0
 800879a:	3801      	subs	r0, #1
 800879c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80087a0:	2b30      	cmp	r3, #48	; 0x30
 80087a2:	d0f9      	beq.n	8008798 <_dtoa_r+0x548>
 80087a4:	4693      	mov	fp, r2
 80087a6:	e02a      	b.n	80087fe <_dtoa_r+0x5ae>
 80087a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80087ac:	e7d6      	b.n	800875c <_dtoa_r+0x50c>
 80087ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80087b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80087be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80087c2:	ee15 3a10 	vmov	r3, s10
 80087c6:	3330      	adds	r3, #48	; 0x30
 80087c8:	f808 3b01 	strb.w	r3, [r8], #1
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	eba8 0303 	sub.w	r3, r8, r3
 80087d2:	4599      	cmp	r9, r3
 80087d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80087d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80087dc:	d133      	bne.n	8008846 <_dtoa_r+0x5f6>
 80087de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80087e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80087e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ea:	dc1a      	bgt.n	8008822 <_dtoa_r+0x5d2>
 80087ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	d103      	bne.n	80087fe <_dtoa_r+0x5ae>
 80087f6:	ee15 3a10 	vmov	r3, s10
 80087fa:	07d9      	lsls	r1, r3, #31
 80087fc:	d411      	bmi.n	8008822 <_dtoa_r+0x5d2>
 80087fe:	4629      	mov	r1, r5
 8008800:	4630      	mov	r0, r6
 8008802:	f000 fbd1 	bl	8008fa8 <_Bfree>
 8008806:	2300      	movs	r3, #0
 8008808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800880a:	f888 3000 	strb.w	r3, [r8]
 800880e:	f10b 0301 	add.w	r3, fp, #1
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008816:	2b00      	cmp	r3, #0
 8008818:	f43f ad69 	beq.w	80082ee <_dtoa_r+0x9e>
 800881c:	f8c3 8000 	str.w	r8, [r3]
 8008820:	e565      	b.n	80082ee <_dtoa_r+0x9e>
 8008822:	465a      	mov	r2, fp
 8008824:	4643      	mov	r3, r8
 8008826:	4698      	mov	r8, r3
 8008828:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800882c:	2939      	cmp	r1, #57	; 0x39
 800882e:	d106      	bne.n	800883e <_dtoa_r+0x5ee>
 8008830:	9901      	ldr	r1, [sp, #4]
 8008832:	4299      	cmp	r1, r3
 8008834:	d1f7      	bne.n	8008826 <_dtoa_r+0x5d6>
 8008836:	9801      	ldr	r0, [sp, #4]
 8008838:	2130      	movs	r1, #48	; 0x30
 800883a:	3201      	adds	r2, #1
 800883c:	7001      	strb	r1, [r0, #0]
 800883e:	7819      	ldrb	r1, [r3, #0]
 8008840:	3101      	adds	r1, #1
 8008842:	7019      	strb	r1, [r3, #0]
 8008844:	e7ae      	b.n	80087a4 <_dtoa_r+0x554>
 8008846:	ee27 7b04 	vmul.f64	d7, d7, d4
 800884a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800884e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008852:	d1b2      	bne.n	80087ba <_dtoa_r+0x56a>
 8008854:	e7d3      	b.n	80087fe <_dtoa_r+0x5ae>
 8008856:	bf00      	nop
 8008858:	0800ac00 	.word	0x0800ac00
 800885c:	0800abd8 	.word	0x0800abd8
 8008860:	9907      	ldr	r1, [sp, #28]
 8008862:	2900      	cmp	r1, #0
 8008864:	f000 80d0 	beq.w	8008a08 <_dtoa_r+0x7b8>
 8008868:	9906      	ldr	r1, [sp, #24]
 800886a:	2901      	cmp	r1, #1
 800886c:	f300 80b4 	bgt.w	80089d8 <_dtoa_r+0x788>
 8008870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008872:	2900      	cmp	r1, #0
 8008874:	f000 80ac 	beq.w	80089d0 <_dtoa_r+0x780>
 8008878:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800887c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008880:	461c      	mov	r4, r3
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	4413      	add	r3, r2
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	2101      	movs	r1, #1
 800888e:	4413      	add	r3, r2
 8008890:	4630      	mov	r0, r6
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	f000 fc3e 	bl	8009114 <__i2b>
 8008898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889a:	4607      	mov	r7, r0
 800889c:	f1b8 0f00 	cmp.w	r8, #0
 80088a0:	d00d      	beq.n	80088be <_dtoa_r+0x66e>
 80088a2:	9a05      	ldr	r2, [sp, #20]
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	dd0a      	ble.n	80088be <_dtoa_r+0x66e>
 80088a8:	4542      	cmp	r2, r8
 80088aa:	9904      	ldr	r1, [sp, #16]
 80088ac:	bfa8      	it	ge
 80088ae:	4642      	movge	r2, r8
 80088b0:	1a89      	subs	r1, r1, r2
 80088b2:	9104      	str	r1, [sp, #16]
 80088b4:	9905      	ldr	r1, [sp, #20]
 80088b6:	eba8 0802 	sub.w	r8, r8, r2
 80088ba:	1a8a      	subs	r2, r1, r2
 80088bc:	9205      	str	r2, [sp, #20]
 80088be:	b303      	cbz	r3, 8008902 <_dtoa_r+0x6b2>
 80088c0:	9a07      	ldr	r2, [sp, #28]
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	f000 80a5 	beq.w	8008a12 <_dtoa_r+0x7c2>
 80088c8:	2c00      	cmp	r4, #0
 80088ca:	dd13      	ble.n	80088f4 <_dtoa_r+0x6a4>
 80088cc:	4639      	mov	r1, r7
 80088ce:	4622      	mov	r2, r4
 80088d0:	4630      	mov	r0, r6
 80088d2:	930d      	str	r3, [sp, #52]	; 0x34
 80088d4:	f000 fcde 	bl	8009294 <__pow5mult>
 80088d8:	462a      	mov	r2, r5
 80088da:	4601      	mov	r1, r0
 80088dc:	4607      	mov	r7, r0
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 fc2e 	bl	8009140 <__multiply>
 80088e4:	4629      	mov	r1, r5
 80088e6:	9009      	str	r0, [sp, #36]	; 0x24
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 fb5d 	bl	8008fa8 <_Bfree>
 80088ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f2:	4615      	mov	r5, r2
 80088f4:	1b1a      	subs	r2, r3, r4
 80088f6:	d004      	beq.n	8008902 <_dtoa_r+0x6b2>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4630      	mov	r0, r6
 80088fc:	f000 fcca 	bl	8009294 <__pow5mult>
 8008900:	4605      	mov	r5, r0
 8008902:	2101      	movs	r1, #1
 8008904:	4630      	mov	r0, r6
 8008906:	f000 fc05 	bl	8009114 <__i2b>
 800890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890c:	2b00      	cmp	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	f340 8081 	ble.w	8008a16 <_dtoa_r+0x7c6>
 8008914:	461a      	mov	r2, r3
 8008916:	4601      	mov	r1, r0
 8008918:	4630      	mov	r0, r6
 800891a:	f000 fcbb 	bl	8009294 <__pow5mult>
 800891e:	9b06      	ldr	r3, [sp, #24]
 8008920:	2b01      	cmp	r3, #1
 8008922:	4604      	mov	r4, r0
 8008924:	dd7a      	ble.n	8008a1c <_dtoa_r+0x7cc>
 8008926:	2300      	movs	r3, #0
 8008928:	9309      	str	r3, [sp, #36]	; 0x24
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008930:	6910      	ldr	r0, [r2, #16]
 8008932:	f000 fba1 	bl	8009078 <__hi0bits>
 8008936:	f1c0 0020 	rsb	r0, r0, #32
 800893a:	9b05      	ldr	r3, [sp, #20]
 800893c:	4418      	add	r0, r3
 800893e:	f010 001f 	ands.w	r0, r0, #31
 8008942:	f000 8093 	beq.w	8008a6c <_dtoa_r+0x81c>
 8008946:	f1c0 0220 	rsb	r2, r0, #32
 800894a:	2a04      	cmp	r2, #4
 800894c:	f340 8085 	ble.w	8008a5a <_dtoa_r+0x80a>
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	f1c0 001c 	rsb	r0, r0, #28
 8008956:	4403      	add	r3, r0
 8008958:	9304      	str	r3, [sp, #16]
 800895a:	9b05      	ldr	r3, [sp, #20]
 800895c:	4480      	add	r8, r0
 800895e:	4403      	add	r3, r0
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dd05      	ble.n	8008974 <_dtoa_r+0x724>
 8008968:	4629      	mov	r1, r5
 800896a:	461a      	mov	r2, r3
 800896c:	4630      	mov	r0, r6
 800896e:	f000 fceb 	bl	8009348 <__lshift>
 8008972:	4605      	mov	r5, r0
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	dd05      	ble.n	8008986 <_dtoa_r+0x736>
 800897a:	4621      	mov	r1, r4
 800897c:	461a      	mov	r2, r3
 800897e:	4630      	mov	r0, r6
 8008980:	f000 fce2 	bl	8009348 <__lshift>
 8008984:	4604      	mov	r4, r0
 8008986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d071      	beq.n	8008a70 <_dtoa_r+0x820>
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 fd46 	bl	8009420 <__mcmp>
 8008994:	2800      	cmp	r0, #0
 8008996:	da6b      	bge.n	8008a70 <_dtoa_r+0x820>
 8008998:	2300      	movs	r3, #0
 800899a:	4629      	mov	r1, r5
 800899c:	220a      	movs	r2, #10
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 fb24 	bl	8008fec <__multadd>
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089aa:	4605      	mov	r5, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8197 	beq.w	8008ce0 <_dtoa_r+0xa90>
 80089b2:	4639      	mov	r1, r7
 80089b4:	2300      	movs	r3, #0
 80089b6:	220a      	movs	r2, #10
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 fb17 	bl	8008fec <__multadd>
 80089be:	f1ba 0f00 	cmp.w	sl, #0
 80089c2:	4607      	mov	r7, r0
 80089c4:	f300 8093 	bgt.w	8008aee <_dtoa_r+0x89e>
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	dc57      	bgt.n	8008a7e <_dtoa_r+0x82e>
 80089ce:	e08e      	b.n	8008aee <_dtoa_r+0x89e>
 80089d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089d6:	e751      	b.n	800887c <_dtoa_r+0x62c>
 80089d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bfbf      	itttt	lt
 80089e0:	1ae2      	sublt	r2, r4, r3
 80089e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089e4:	189b      	addlt	r3, r3, r2
 80089e6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089e8:	bfae      	itee	ge
 80089ea:	1b1c      	subge	r4, r3, r4
 80089ec:	4623      	movlt	r3, r4
 80089ee:	2400      	movlt	r4, #0
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	bfb5      	itete	lt
 80089f6:	9a04      	ldrlt	r2, [sp, #16]
 80089f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80089fc:	eba2 0809 	sublt.w	r8, r2, r9
 8008a00:	464a      	movge	r2, r9
 8008a02:	bfb8      	it	lt
 8008a04:	2200      	movlt	r2, #0
 8008a06:	e73c      	b.n	8008882 <_dtoa_r+0x632>
 8008a08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008a0c:	9f07      	ldr	r7, [sp, #28]
 8008a0e:	461c      	mov	r4, r3
 8008a10:	e744      	b.n	800889c <_dtoa_r+0x64c>
 8008a12:	461a      	mov	r2, r3
 8008a14:	e770      	b.n	80088f8 <_dtoa_r+0x6a8>
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	dc18      	bgt.n	8008a4e <_dtoa_r+0x7fe>
 8008a1c:	9b02      	ldr	r3, [sp, #8]
 8008a1e:	b9b3      	cbnz	r3, 8008a4e <_dtoa_r+0x7fe>
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008a26:	b9a2      	cbnz	r2, 8008a52 <_dtoa_r+0x802>
 8008a28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a2c:	0d12      	lsrs	r2, r2, #20
 8008a2e:	0512      	lsls	r2, r2, #20
 8008a30:	b18a      	cbz	r2, 8008a56 <_dtoa_r+0x806>
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	3301      	adds	r3, #1
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	9305      	str	r3, [sp, #20]
 8008a3e:	2301      	movs	r3, #1
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f47f af70 	bne.w	800892a <_dtoa_r+0x6da>
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	e775      	b.n	800893a <_dtoa_r+0x6ea>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e7f6      	b.n	8008a40 <_dtoa_r+0x7f0>
 8008a52:	9b02      	ldr	r3, [sp, #8]
 8008a54:	e7f4      	b.n	8008a40 <_dtoa_r+0x7f0>
 8008a56:	9209      	str	r2, [sp, #36]	; 0x24
 8008a58:	e7f3      	b.n	8008a42 <_dtoa_r+0x7f2>
 8008a5a:	d082      	beq.n	8008962 <_dtoa_r+0x712>
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	321c      	adds	r2, #28
 8008a60:	4413      	add	r3, r2
 8008a62:	9304      	str	r3, [sp, #16]
 8008a64:	9b05      	ldr	r3, [sp, #20]
 8008a66:	4490      	add	r8, r2
 8008a68:	4413      	add	r3, r2
 8008a6a:	e779      	b.n	8008960 <_dtoa_r+0x710>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	e7f5      	b.n	8008a5c <_dtoa_r+0x80c>
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	dc36      	bgt.n	8008ae4 <_dtoa_r+0x894>
 8008a76:	9b06      	ldr	r3, [sp, #24]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	dd33      	ble.n	8008ae4 <_dtoa_r+0x894>
 8008a7c:	46ca      	mov	sl, r9
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	d10d      	bne.n	8008aa0 <_dtoa_r+0x850>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4653      	mov	r3, sl
 8008a88:	2205      	movs	r2, #5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f000 faae 	bl	8008fec <__multadd>
 8008a90:	4601      	mov	r1, r0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 fcc3 	bl	8009420 <__mcmp>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f73f ade4 	bgt.w	8008668 <_dtoa_r+0x418>
 8008aa0:	9b08      	ldr	r3, [sp, #32]
 8008aa2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008aa6:	ea6f 0b03 	mvn.w	fp, r3
 8008aaa:	f04f 0900 	mov.w	r9, #0
 8008aae:	4621      	mov	r1, r4
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 fa79 	bl	8008fa8 <_Bfree>
 8008ab6:	2f00      	cmp	r7, #0
 8008ab8:	f43f aea1 	beq.w	80087fe <_dtoa_r+0x5ae>
 8008abc:	f1b9 0f00 	cmp.w	r9, #0
 8008ac0:	d005      	beq.n	8008ace <_dtoa_r+0x87e>
 8008ac2:	45b9      	cmp	r9, r7
 8008ac4:	d003      	beq.n	8008ace <_dtoa_r+0x87e>
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 fa6d 	bl	8008fa8 <_Bfree>
 8008ace:	4639      	mov	r1, r7
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 fa69 	bl	8008fa8 <_Bfree>
 8008ad6:	e692      	b.n	80087fe <_dtoa_r+0x5ae>
 8008ad8:	2400      	movs	r4, #0
 8008ada:	4627      	mov	r7, r4
 8008adc:	e7e0      	b.n	8008aa0 <_dtoa_r+0x850>
 8008ade:	4693      	mov	fp, r2
 8008ae0:	4627      	mov	r7, r4
 8008ae2:	e5c1      	b.n	8008668 <_dtoa_r+0x418>
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	46ca      	mov	sl, r9
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8100 	beq.w	8008cee <_dtoa_r+0xa9e>
 8008aee:	f1b8 0f00 	cmp.w	r8, #0
 8008af2:	dd05      	ble.n	8008b00 <_dtoa_r+0x8b0>
 8008af4:	4639      	mov	r1, r7
 8008af6:	4642      	mov	r2, r8
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 fc25 	bl	8009348 <__lshift>
 8008afe:	4607      	mov	r7, r0
 8008b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d05d      	beq.n	8008bc2 <_dtoa_r+0x972>
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 fa0d 	bl	8008f28 <_Balloc>
 8008b0e:	4680      	mov	r8, r0
 8008b10:	b928      	cbnz	r0, 8008b1e <_dtoa_r+0x8ce>
 8008b12:	4b82      	ldr	r3, [pc, #520]	; (8008d1c <_dtoa_r+0xacc>)
 8008b14:	4602      	mov	r2, r0
 8008b16:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b1a:	f7ff bbb1 	b.w	8008280 <_dtoa_r+0x30>
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	3202      	adds	r2, #2
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	f107 010c 	add.w	r1, r7, #12
 8008b28:	300c      	adds	r0, #12
 8008b2a:	f000 ffa9 	bl	8009a80 <memcpy>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4641      	mov	r1, r8
 8008b32:	4630      	mov	r0, r6
 8008b34:	f000 fc08 	bl	8009348 <__lshift>
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	9b01      	ldr	r3, [sp, #4]
 8008b40:	4453      	add	r3, sl
 8008b42:	9308      	str	r3, [sp, #32]
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	46b9      	mov	r9, r7
 8008b4c:	9307      	str	r3, [sp, #28]
 8008b4e:	4607      	mov	r7, r0
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	4621      	mov	r1, r4
 8008b54:	3b01      	subs	r3, #1
 8008b56:	4628      	mov	r0, r5
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	f7ff faf1 	bl	8008140 <quorem>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	3330      	adds	r3, #48	; 0x30
 8008b62:	9005      	str	r0, [sp, #20]
 8008b64:	4649      	mov	r1, r9
 8008b66:	4628      	mov	r0, r5
 8008b68:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6a:	f000 fc59 	bl	8009420 <__mcmp>
 8008b6e:	463a      	mov	r2, r7
 8008b70:	4682      	mov	sl, r0
 8008b72:	4621      	mov	r1, r4
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 fc6f 	bl	8009458 <__mdiff>
 8008b7a:	68c2      	ldr	r2, [r0, #12]
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	4680      	mov	r8, r0
 8008b80:	bb0a      	cbnz	r2, 8008bc6 <_dtoa_r+0x976>
 8008b82:	4601      	mov	r1, r0
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 fc4b 	bl	8009420 <__mcmp>
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4630      	mov	r0, r6
 8008b92:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008b96:	f000 fa07 	bl	8008fa8 <_Bfree>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ba2:	ea43 0102 	orr.w	r1, r3, r2
 8008ba6:	9b07      	ldr	r3, [sp, #28]
 8008ba8:	4319      	orrs	r1, r3
 8008baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bac:	d10d      	bne.n	8008bca <_dtoa_r+0x97a>
 8008bae:	2b39      	cmp	r3, #57	; 0x39
 8008bb0:	d029      	beq.n	8008c06 <_dtoa_r+0x9b6>
 8008bb2:	f1ba 0f00 	cmp.w	sl, #0
 8008bb6:	dd01      	ble.n	8008bbc <_dtoa_r+0x96c>
 8008bb8:	9b05      	ldr	r3, [sp, #20]
 8008bba:	3331      	adds	r3, #49	; 0x31
 8008bbc:	9a02      	ldr	r2, [sp, #8]
 8008bbe:	7013      	strb	r3, [r2, #0]
 8008bc0:	e775      	b.n	8008aae <_dtoa_r+0x85e>
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	e7b8      	b.n	8008b38 <_dtoa_r+0x8e8>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	e7e1      	b.n	8008b8e <_dtoa_r+0x93e>
 8008bca:	f1ba 0f00 	cmp.w	sl, #0
 8008bce:	db06      	blt.n	8008bde <_dtoa_r+0x98e>
 8008bd0:	9906      	ldr	r1, [sp, #24]
 8008bd2:	ea41 0a0a 	orr.w	sl, r1, sl
 8008bd6:	9907      	ldr	r1, [sp, #28]
 8008bd8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008bdc:	d120      	bne.n	8008c20 <_dtoa_r+0x9d0>
 8008bde:	2a00      	cmp	r2, #0
 8008be0:	ddec      	ble.n	8008bbc <_dtoa_r+0x96c>
 8008be2:	4629      	mov	r1, r5
 8008be4:	2201      	movs	r2, #1
 8008be6:	4630      	mov	r0, r6
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	f000 fbad 	bl	8009348 <__lshift>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	f000 fc15 	bl	8009420 <__mcmp>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	dc02      	bgt.n	8008c02 <_dtoa_r+0x9b2>
 8008bfc:	d1de      	bne.n	8008bbc <_dtoa_r+0x96c>
 8008bfe:	07da      	lsls	r2, r3, #31
 8008c00:	d5dc      	bpl.n	8008bbc <_dtoa_r+0x96c>
 8008c02:	2b39      	cmp	r3, #57	; 0x39
 8008c04:	d1d8      	bne.n	8008bb8 <_dtoa_r+0x968>
 8008c06:	9a02      	ldr	r2, [sp, #8]
 8008c08:	2339      	movs	r3, #57	; 0x39
 8008c0a:	7013      	strb	r3, [r2, #0]
 8008c0c:	4643      	mov	r3, r8
 8008c0e:	4698      	mov	r8, r3
 8008c10:	3b01      	subs	r3, #1
 8008c12:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008c16:	2a39      	cmp	r2, #57	; 0x39
 8008c18:	d051      	beq.n	8008cbe <_dtoa_r+0xa6e>
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	e746      	b.n	8008aae <_dtoa_r+0x85e>
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	dd03      	ble.n	8008c2c <_dtoa_r+0x9dc>
 8008c24:	2b39      	cmp	r3, #57	; 0x39
 8008c26:	d0ee      	beq.n	8008c06 <_dtoa_r+0x9b6>
 8008c28:	3301      	adds	r3, #1
 8008c2a:	e7c7      	b.n	8008bbc <_dtoa_r+0x96c>
 8008c2c:	9a04      	ldr	r2, [sp, #16]
 8008c2e:	9908      	ldr	r1, [sp, #32]
 8008c30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c34:	428a      	cmp	r2, r1
 8008c36:	d02b      	beq.n	8008c90 <_dtoa_r+0xa40>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f000 f9d4 	bl	8008fec <__multadd>
 8008c44:	45b9      	cmp	r9, r7
 8008c46:	4605      	mov	r5, r0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	f04f 020a 	mov.w	r2, #10
 8008c50:	4649      	mov	r1, r9
 8008c52:	4630      	mov	r0, r6
 8008c54:	d107      	bne.n	8008c66 <_dtoa_r+0xa16>
 8008c56:	f000 f9c9 	bl	8008fec <__multadd>
 8008c5a:	4681      	mov	r9, r0
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	9b04      	ldr	r3, [sp, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	e774      	b.n	8008b50 <_dtoa_r+0x900>
 8008c66:	f000 f9c1 	bl	8008fec <__multadd>
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220a      	movs	r2, #10
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 f9ba 	bl	8008fec <__multadd>
 8008c78:	4607      	mov	r7, r0
 8008c7a:	e7f0      	b.n	8008c5e <_dtoa_r+0xa0e>
 8008c7c:	f1ba 0f00 	cmp.w	sl, #0
 8008c80:	9a01      	ldr	r2, [sp, #4]
 8008c82:	bfcc      	ite	gt
 8008c84:	46d0      	movgt	r8, sl
 8008c86:	f04f 0801 	movle.w	r8, #1
 8008c8a:	4490      	add	r8, r2
 8008c8c:	f04f 0900 	mov.w	r9, #0
 8008c90:	4629      	mov	r1, r5
 8008c92:	2201      	movs	r2, #1
 8008c94:	4630      	mov	r0, r6
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	f000 fb56 	bl	8009348 <__lshift>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	f000 fbbe 	bl	8009420 <__mcmp>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dcb1      	bgt.n	8008c0c <_dtoa_r+0x9bc>
 8008ca8:	d102      	bne.n	8008cb0 <_dtoa_r+0xa60>
 8008caa:	9b02      	ldr	r3, [sp, #8]
 8008cac:	07db      	lsls	r3, r3, #31
 8008cae:	d4ad      	bmi.n	8008c0c <_dtoa_r+0x9bc>
 8008cb0:	4643      	mov	r3, r8
 8008cb2:	4698      	mov	r8, r3
 8008cb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb8:	2a30      	cmp	r2, #48	; 0x30
 8008cba:	d0fa      	beq.n	8008cb2 <_dtoa_r+0xa62>
 8008cbc:	e6f7      	b.n	8008aae <_dtoa_r+0x85e>
 8008cbe:	9a01      	ldr	r2, [sp, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d1a4      	bne.n	8008c0e <_dtoa_r+0x9be>
 8008cc4:	f10b 0b01 	add.w	fp, fp, #1
 8008cc8:	2331      	movs	r3, #49	; 0x31
 8008cca:	e778      	b.n	8008bbe <_dtoa_r+0x96e>
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <_dtoa_r+0xad0>)
 8008cce:	f7ff bb2a 	b.w	8008326 <_dtoa_r+0xd6>
 8008cd2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f ab05 	bne.w	80082e4 <_dtoa_r+0x94>
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <_dtoa_r+0xad4>)
 8008cdc:	f7ff bb23 	b.w	8008326 <_dtoa_r+0xd6>
 8008ce0:	f1ba 0f00 	cmp.w	sl, #0
 8008ce4:	dc03      	bgt.n	8008cee <_dtoa_r+0xa9e>
 8008ce6:	9b06      	ldr	r3, [sp, #24]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	f73f aec8 	bgt.w	8008a7e <_dtoa_r+0x82e>
 8008cee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f7ff fa23 	bl	8008140 <quorem>
 8008cfa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008cfe:	f808 3b01 	strb.w	r3, [r8], #1
 8008d02:	9a01      	ldr	r2, [sp, #4]
 8008d04:	eba8 0202 	sub.w	r2, r8, r2
 8008d08:	4592      	cmp	sl, r2
 8008d0a:	ddb7      	ble.n	8008c7c <_dtoa_r+0xa2c>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	2300      	movs	r3, #0
 8008d10:	220a      	movs	r2, #10
 8008d12:	4630      	mov	r0, r6
 8008d14:	f000 f96a 	bl	8008fec <__multadd>
 8008d18:	4605      	mov	r5, r0
 8008d1a:	e7ea      	b.n	8008cf2 <_dtoa_r+0xaa2>
 8008d1c:	0800ab68 	.word	0x0800ab68
 8008d20:	0800aac8 	.word	0x0800aac8
 8008d24:	0800aaec 	.word	0x0800aaec

08008d28 <_free_r>:
 8008d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d2a:	2900      	cmp	r1, #0
 8008d2c:	d044      	beq.n	8008db8 <_free_r+0x90>
 8008d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d32:	9001      	str	r0, [sp, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f1a1 0404 	sub.w	r4, r1, #4
 8008d3a:	bfb8      	it	lt
 8008d3c:	18e4      	addlt	r4, r4, r3
 8008d3e:	f000 f8e7 	bl	8008f10 <__malloc_lock>
 8008d42:	4a1e      	ldr	r2, [pc, #120]	; (8008dbc <_free_r+0x94>)
 8008d44:	9801      	ldr	r0, [sp, #4]
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	b933      	cbnz	r3, 8008d58 <_free_r+0x30>
 8008d4a:	6063      	str	r3, [r4, #4]
 8008d4c:	6014      	str	r4, [r2, #0]
 8008d4e:	b003      	add	sp, #12
 8008d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d54:	f000 b8e2 	b.w	8008f1c <__malloc_unlock>
 8008d58:	42a3      	cmp	r3, r4
 8008d5a:	d908      	bls.n	8008d6e <_free_r+0x46>
 8008d5c:	6825      	ldr	r5, [r4, #0]
 8008d5e:	1961      	adds	r1, r4, r5
 8008d60:	428b      	cmp	r3, r1
 8008d62:	bf01      	itttt	eq
 8008d64:	6819      	ldreq	r1, [r3, #0]
 8008d66:	685b      	ldreq	r3, [r3, #4]
 8008d68:	1949      	addeq	r1, r1, r5
 8008d6a:	6021      	streq	r1, [r4, #0]
 8008d6c:	e7ed      	b.n	8008d4a <_free_r+0x22>
 8008d6e:	461a      	mov	r2, r3
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	b10b      	cbz	r3, 8008d78 <_free_r+0x50>
 8008d74:	42a3      	cmp	r3, r4
 8008d76:	d9fa      	bls.n	8008d6e <_free_r+0x46>
 8008d78:	6811      	ldr	r1, [r2, #0]
 8008d7a:	1855      	adds	r5, r2, r1
 8008d7c:	42a5      	cmp	r5, r4
 8008d7e:	d10b      	bne.n	8008d98 <_free_r+0x70>
 8008d80:	6824      	ldr	r4, [r4, #0]
 8008d82:	4421      	add	r1, r4
 8008d84:	1854      	adds	r4, r2, r1
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	6011      	str	r1, [r2, #0]
 8008d8a:	d1e0      	bne.n	8008d4e <_free_r+0x26>
 8008d8c:	681c      	ldr	r4, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	6053      	str	r3, [r2, #4]
 8008d92:	440c      	add	r4, r1
 8008d94:	6014      	str	r4, [r2, #0]
 8008d96:	e7da      	b.n	8008d4e <_free_r+0x26>
 8008d98:	d902      	bls.n	8008da0 <_free_r+0x78>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6003      	str	r3, [r0, #0]
 8008d9e:	e7d6      	b.n	8008d4e <_free_r+0x26>
 8008da0:	6825      	ldr	r5, [r4, #0]
 8008da2:	1961      	adds	r1, r4, r5
 8008da4:	428b      	cmp	r3, r1
 8008da6:	bf04      	itt	eq
 8008da8:	6819      	ldreq	r1, [r3, #0]
 8008daa:	685b      	ldreq	r3, [r3, #4]
 8008dac:	6063      	str	r3, [r4, #4]
 8008dae:	bf04      	itt	eq
 8008db0:	1949      	addeq	r1, r1, r5
 8008db2:	6021      	streq	r1, [r4, #0]
 8008db4:	6054      	str	r4, [r2, #4]
 8008db6:	e7ca      	b.n	8008d4e <_free_r+0x26>
 8008db8:	b003      	add	sp, #12
 8008dba:	bd30      	pop	{r4, r5, pc}
 8008dbc:	20000614 	.word	0x20000614

08008dc0 <malloc>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <malloc+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f000 b823 	b.w	8008e10 <_malloc_r>
 8008dca:	bf00      	nop
 8008dcc:	20000070 	.word	0x20000070

08008dd0 <sbrk_aligned>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4e0e      	ldr	r6, [pc, #56]	; (8008e0c <sbrk_aligned+0x3c>)
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	6831      	ldr	r1, [r6, #0]
 8008dd8:	4605      	mov	r5, r0
 8008dda:	b911      	cbnz	r1, 8008de2 <sbrk_aligned+0x12>
 8008ddc:	f000 fe40 	bl	8009a60 <_sbrk_r>
 8008de0:	6030      	str	r0, [r6, #0]
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 fe3b 	bl	8009a60 <_sbrk_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d00a      	beq.n	8008e04 <sbrk_aligned+0x34>
 8008dee:	1cc4      	adds	r4, r0, #3
 8008df0:	f024 0403 	bic.w	r4, r4, #3
 8008df4:	42a0      	cmp	r0, r4
 8008df6:	d007      	beq.n	8008e08 <sbrk_aligned+0x38>
 8008df8:	1a21      	subs	r1, r4, r0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f000 fe30 	bl	8009a60 <_sbrk_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d101      	bne.n	8008e08 <sbrk_aligned+0x38>
 8008e04:	f04f 34ff 	mov.w	r4, #4294967295
 8008e08:	4620      	mov	r0, r4
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	20000618 	.word	0x20000618

08008e10 <_malloc_r>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4607      	mov	r7, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d905      	bls.n	8008e38 <_malloc_r+0x28>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	2600      	movs	r6, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f0c <_malloc_r+0xfc>
 8008e3c:	f000 f868 	bl	8008f10 <__malloc_lock>
 8008e40:	f8d8 3000 	ldr.w	r3, [r8]
 8008e44:	461c      	mov	r4, r3
 8008e46:	bb5c      	cbnz	r4, 8008ea0 <_malloc_r+0x90>
 8008e48:	4629      	mov	r1, r5
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7ff ffc0 	bl	8008dd0 <sbrk_aligned>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	4604      	mov	r4, r0
 8008e54:	d155      	bne.n	8008f02 <_malloc_r+0xf2>
 8008e56:	f8d8 4000 	ldr.w	r4, [r8]
 8008e5a:	4626      	mov	r6, r4
 8008e5c:	2e00      	cmp	r6, #0
 8008e5e:	d145      	bne.n	8008eec <_malloc_r+0xdc>
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	d048      	beq.n	8008ef6 <_malloc_r+0xe6>
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	4631      	mov	r1, r6
 8008e68:	4638      	mov	r0, r7
 8008e6a:	eb04 0903 	add.w	r9, r4, r3
 8008e6e:	f000 fdf7 	bl	8009a60 <_sbrk_r>
 8008e72:	4581      	cmp	r9, r0
 8008e74:	d13f      	bne.n	8008ef6 <_malloc_r+0xe6>
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	1a6d      	subs	r5, r5, r1
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	f7ff ffa7 	bl	8008dd0 <sbrk_aligned>
 8008e82:	3001      	adds	r0, #1
 8008e84:	d037      	beq.n	8008ef6 <_malloc_r+0xe6>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	442b      	add	r3, r5
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d038      	beq.n	8008f06 <_malloc_r+0xf6>
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	42a2      	cmp	r2, r4
 8008e98:	d12b      	bne.n	8008ef2 <_malloc_r+0xe2>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	605a      	str	r2, [r3, #4]
 8008e9e:	e00f      	b.n	8008ec0 <_malloc_r+0xb0>
 8008ea0:	6822      	ldr	r2, [r4, #0]
 8008ea2:	1b52      	subs	r2, r2, r5
 8008ea4:	d41f      	bmi.n	8008ee6 <_malloc_r+0xd6>
 8008ea6:	2a0b      	cmp	r2, #11
 8008ea8:	d917      	bls.n	8008eda <_malloc_r+0xca>
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	6025      	str	r5, [r4, #0]
 8008eb0:	bf18      	it	ne
 8008eb2:	6059      	strne	r1, [r3, #4]
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	bf08      	it	eq
 8008eb8:	f8c8 1000 	streq.w	r1, [r8]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f104 060b 	add.w	r6, r4, #11
 8008ec6:	f000 f829 	bl	8008f1c <__malloc_unlock>
 8008eca:	f026 0607 	bic.w	r6, r6, #7
 8008ece:	1d23      	adds	r3, r4, #4
 8008ed0:	1af2      	subs	r2, r6, r3
 8008ed2:	d0ae      	beq.n	8008e32 <_malloc_r+0x22>
 8008ed4:	1b9b      	subs	r3, r3, r6
 8008ed6:	50a3      	str	r3, [r4, r2]
 8008ed8:	e7ab      	b.n	8008e32 <_malloc_r+0x22>
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	6862      	ldr	r2, [r4, #4]
 8008ede:	d1dd      	bne.n	8008e9c <_malloc_r+0x8c>
 8008ee0:	f8c8 2000 	str.w	r2, [r8]
 8008ee4:	e7ec      	b.n	8008ec0 <_malloc_r+0xb0>
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	6864      	ldr	r4, [r4, #4]
 8008eea:	e7ac      	b.n	8008e46 <_malloc_r+0x36>
 8008eec:	4634      	mov	r4, r6
 8008eee:	6876      	ldr	r6, [r6, #4]
 8008ef0:	e7b4      	b.n	8008e5c <_malloc_r+0x4c>
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	e7cc      	b.n	8008e90 <_malloc_r+0x80>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	603b      	str	r3, [r7, #0]
 8008efa:	4638      	mov	r0, r7
 8008efc:	f000 f80e 	bl	8008f1c <__malloc_unlock>
 8008f00:	e797      	b.n	8008e32 <_malloc_r+0x22>
 8008f02:	6025      	str	r5, [r4, #0]
 8008f04:	e7dc      	b.n	8008ec0 <_malloc_r+0xb0>
 8008f06:	605b      	str	r3, [r3, #4]
 8008f08:	deff      	udf	#255	; 0xff
 8008f0a:	bf00      	nop
 8008f0c:	20000614 	.word	0x20000614

08008f10 <__malloc_lock>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__malloc_lock+0x8>)
 8008f12:	f7ff b913 	b.w	800813c <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	20000610 	.word	0x20000610

08008f1c <__malloc_unlock>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__malloc_unlock+0x8>)
 8008f1e:	f7ff b90e 	b.w	800813e <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	20000610 	.word	0x20000610

08008f28 <_Balloc>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	69c6      	ldr	r6, [r0, #28]
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	b976      	cbnz	r6, 8008f50 <_Balloc+0x28>
 8008f32:	2010      	movs	r0, #16
 8008f34:	f7ff ff44 	bl	8008dc0 <malloc>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	61e0      	str	r0, [r4, #28]
 8008f3c:	b920      	cbnz	r0, 8008f48 <_Balloc+0x20>
 8008f3e:	4b18      	ldr	r3, [pc, #96]	; (8008fa0 <_Balloc+0x78>)
 8008f40:	4818      	ldr	r0, [pc, #96]	; (8008fa4 <_Balloc+0x7c>)
 8008f42:	216b      	movs	r1, #107	; 0x6b
 8008f44:	f000 fdaa 	bl	8009a9c <__assert_func>
 8008f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f4c:	6006      	str	r6, [r0, #0]
 8008f4e:	60c6      	str	r6, [r0, #12]
 8008f50:	69e6      	ldr	r6, [r4, #28]
 8008f52:	68f3      	ldr	r3, [r6, #12]
 8008f54:	b183      	cbz	r3, 8008f78 <_Balloc+0x50>
 8008f56:	69e3      	ldr	r3, [r4, #28]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f5e:	b9b8      	cbnz	r0, 8008f90 <_Balloc+0x68>
 8008f60:	2101      	movs	r1, #1
 8008f62:	fa01 f605 	lsl.w	r6, r1, r5
 8008f66:	1d72      	adds	r2, r6, #5
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 fdb4 	bl	8009ad8 <_calloc_r>
 8008f70:	b160      	cbz	r0, 8008f8c <_Balloc+0x64>
 8008f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f76:	e00e      	b.n	8008f96 <_Balloc+0x6e>
 8008f78:	2221      	movs	r2, #33	; 0x21
 8008f7a:	2104      	movs	r1, #4
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f000 fdab 	bl	8009ad8 <_calloc_r>
 8008f82:	69e3      	ldr	r3, [r4, #28]
 8008f84:	60f0      	str	r0, [r6, #12]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e4      	bne.n	8008f56 <_Balloc+0x2e>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	6802      	ldr	r2, [r0, #0]
 8008f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f96:	2300      	movs	r3, #0
 8008f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f9c:	e7f7      	b.n	8008f8e <_Balloc+0x66>
 8008f9e:	bf00      	nop
 8008fa0:	0800aaf9 	.word	0x0800aaf9
 8008fa4:	0800ab79 	.word	0x0800ab79

08008fa8 <_Bfree>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	69c6      	ldr	r6, [r0, #28]
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	b976      	cbnz	r6, 8008fd0 <_Bfree+0x28>
 8008fb2:	2010      	movs	r0, #16
 8008fb4:	f7ff ff04 	bl	8008dc0 <malloc>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	61e8      	str	r0, [r5, #28]
 8008fbc:	b920      	cbnz	r0, 8008fc8 <_Bfree+0x20>
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <_Bfree+0x3c>)
 8008fc0:	4809      	ldr	r0, [pc, #36]	; (8008fe8 <_Bfree+0x40>)
 8008fc2:	218f      	movs	r1, #143	; 0x8f
 8008fc4:	f000 fd6a 	bl	8009a9c <__assert_func>
 8008fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fcc:	6006      	str	r6, [r0, #0]
 8008fce:	60c6      	str	r6, [r0, #12]
 8008fd0:	b13c      	cbz	r4, 8008fe2 <_Bfree+0x3a>
 8008fd2:	69eb      	ldr	r3, [r5, #28]
 8008fd4:	6862      	ldr	r2, [r4, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fdc:	6021      	str	r1, [r4, #0]
 8008fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	0800aaf9 	.word	0x0800aaf9
 8008fe8:	0800ab79 	.word	0x0800ab79

08008fec <__multadd>:
 8008fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff0:	690d      	ldr	r5, [r1, #16]
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	461e      	mov	r6, r3
 8008ff8:	f101 0c14 	add.w	ip, r1, #20
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8009002:	b299      	uxth	r1, r3
 8009004:	fb02 6101 	mla	r1, r2, r1, r6
 8009008:	0c1e      	lsrs	r6, r3, #16
 800900a:	0c0b      	lsrs	r3, r1, #16
 800900c:	fb02 3306 	mla	r3, r2, r6, r3
 8009010:	b289      	uxth	r1, r1
 8009012:	3001      	adds	r0, #1
 8009014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009018:	4285      	cmp	r5, r0
 800901a:	f84c 1b04 	str.w	r1, [ip], #4
 800901e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009022:	dcec      	bgt.n	8008ffe <__multadd+0x12>
 8009024:	b30e      	cbz	r6, 800906a <__multadd+0x7e>
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	42ab      	cmp	r3, r5
 800902a:	dc19      	bgt.n	8009060 <__multadd+0x74>
 800902c:	6861      	ldr	r1, [r4, #4]
 800902e:	4638      	mov	r0, r7
 8009030:	3101      	adds	r1, #1
 8009032:	f7ff ff79 	bl	8008f28 <_Balloc>
 8009036:	4680      	mov	r8, r0
 8009038:	b928      	cbnz	r0, 8009046 <__multadd+0x5a>
 800903a:	4602      	mov	r2, r0
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <__multadd+0x84>)
 800903e:	480d      	ldr	r0, [pc, #52]	; (8009074 <__multadd+0x88>)
 8009040:	21ba      	movs	r1, #186	; 0xba
 8009042:	f000 fd2b 	bl	8009a9c <__assert_func>
 8009046:	6922      	ldr	r2, [r4, #16]
 8009048:	3202      	adds	r2, #2
 800904a:	f104 010c 	add.w	r1, r4, #12
 800904e:	0092      	lsls	r2, r2, #2
 8009050:	300c      	adds	r0, #12
 8009052:	f000 fd15 	bl	8009a80 <memcpy>
 8009056:	4621      	mov	r1, r4
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ffa5 	bl	8008fa8 <_Bfree>
 800905e:	4644      	mov	r4, r8
 8009060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009064:	3501      	adds	r5, #1
 8009066:	615e      	str	r6, [r3, #20]
 8009068:	6125      	str	r5, [r4, #16]
 800906a:	4620      	mov	r0, r4
 800906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009070:	0800ab68 	.word	0x0800ab68
 8009074:	0800ab79 	.word	0x0800ab79

08009078 <__hi0bits>:
 8009078:	0c03      	lsrs	r3, r0, #16
 800907a:	041b      	lsls	r3, r3, #16
 800907c:	b9d3      	cbnz	r3, 80090b4 <__hi0bits+0x3c>
 800907e:	0400      	lsls	r0, r0, #16
 8009080:	2310      	movs	r3, #16
 8009082:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009086:	bf04      	itt	eq
 8009088:	0200      	lsleq	r0, r0, #8
 800908a:	3308      	addeq	r3, #8
 800908c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009090:	bf04      	itt	eq
 8009092:	0100      	lsleq	r0, r0, #4
 8009094:	3304      	addeq	r3, #4
 8009096:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800909a:	bf04      	itt	eq
 800909c:	0080      	lsleq	r0, r0, #2
 800909e:	3302      	addeq	r3, #2
 80090a0:	2800      	cmp	r0, #0
 80090a2:	db05      	blt.n	80090b0 <__hi0bits+0x38>
 80090a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090a8:	f103 0301 	add.w	r3, r3, #1
 80090ac:	bf08      	it	eq
 80090ae:	2320      	moveq	r3, #32
 80090b0:	4618      	mov	r0, r3
 80090b2:	4770      	bx	lr
 80090b4:	2300      	movs	r3, #0
 80090b6:	e7e4      	b.n	8009082 <__hi0bits+0xa>

080090b8 <__lo0bits>:
 80090b8:	6803      	ldr	r3, [r0, #0]
 80090ba:	f013 0207 	ands.w	r2, r3, #7
 80090be:	d00c      	beq.n	80090da <__lo0bits+0x22>
 80090c0:	07d9      	lsls	r1, r3, #31
 80090c2:	d422      	bmi.n	800910a <__lo0bits+0x52>
 80090c4:	079a      	lsls	r2, r3, #30
 80090c6:	bf49      	itett	mi
 80090c8:	085b      	lsrmi	r3, r3, #1
 80090ca:	089b      	lsrpl	r3, r3, #2
 80090cc:	6003      	strmi	r3, [r0, #0]
 80090ce:	2201      	movmi	r2, #1
 80090d0:	bf5c      	itt	pl
 80090d2:	6003      	strpl	r3, [r0, #0]
 80090d4:	2202      	movpl	r2, #2
 80090d6:	4610      	mov	r0, r2
 80090d8:	4770      	bx	lr
 80090da:	b299      	uxth	r1, r3
 80090dc:	b909      	cbnz	r1, 80090e2 <__lo0bits+0x2a>
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	2210      	movs	r2, #16
 80090e2:	b2d9      	uxtb	r1, r3
 80090e4:	b909      	cbnz	r1, 80090ea <__lo0bits+0x32>
 80090e6:	3208      	adds	r2, #8
 80090e8:	0a1b      	lsrs	r3, r3, #8
 80090ea:	0719      	lsls	r1, r3, #28
 80090ec:	bf04      	itt	eq
 80090ee:	091b      	lsreq	r3, r3, #4
 80090f0:	3204      	addeq	r2, #4
 80090f2:	0799      	lsls	r1, r3, #30
 80090f4:	bf04      	itt	eq
 80090f6:	089b      	lsreq	r3, r3, #2
 80090f8:	3202      	addeq	r2, #2
 80090fa:	07d9      	lsls	r1, r3, #31
 80090fc:	d403      	bmi.n	8009106 <__lo0bits+0x4e>
 80090fe:	085b      	lsrs	r3, r3, #1
 8009100:	f102 0201 	add.w	r2, r2, #1
 8009104:	d003      	beq.n	800910e <__lo0bits+0x56>
 8009106:	6003      	str	r3, [r0, #0]
 8009108:	e7e5      	b.n	80090d6 <__lo0bits+0x1e>
 800910a:	2200      	movs	r2, #0
 800910c:	e7e3      	b.n	80090d6 <__lo0bits+0x1e>
 800910e:	2220      	movs	r2, #32
 8009110:	e7e1      	b.n	80090d6 <__lo0bits+0x1e>
	...

08009114 <__i2b>:
 8009114:	b510      	push	{r4, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	2101      	movs	r1, #1
 800911a:	f7ff ff05 	bl	8008f28 <_Balloc>
 800911e:	4602      	mov	r2, r0
 8009120:	b928      	cbnz	r0, 800912e <__i2b+0x1a>
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <__i2b+0x24>)
 8009124:	4805      	ldr	r0, [pc, #20]	; (800913c <__i2b+0x28>)
 8009126:	f240 1145 	movw	r1, #325	; 0x145
 800912a:	f000 fcb7 	bl	8009a9c <__assert_func>
 800912e:	2301      	movs	r3, #1
 8009130:	6144      	str	r4, [r0, #20]
 8009132:	6103      	str	r3, [r0, #16]
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	0800ab68 	.word	0x0800ab68
 800913c:	0800ab79 	.word	0x0800ab79

08009140 <__multiply>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	4691      	mov	r9, r2
 8009146:	690a      	ldr	r2, [r1, #16]
 8009148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800914c:	429a      	cmp	r2, r3
 800914e:	bfb8      	it	lt
 8009150:	460b      	movlt	r3, r1
 8009152:	460c      	mov	r4, r1
 8009154:	bfbc      	itt	lt
 8009156:	464c      	movlt	r4, r9
 8009158:	4699      	movlt	r9, r3
 800915a:	6927      	ldr	r7, [r4, #16]
 800915c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009160:	68a3      	ldr	r3, [r4, #8]
 8009162:	6861      	ldr	r1, [r4, #4]
 8009164:	eb07 060a 	add.w	r6, r7, sl
 8009168:	42b3      	cmp	r3, r6
 800916a:	b085      	sub	sp, #20
 800916c:	bfb8      	it	lt
 800916e:	3101      	addlt	r1, #1
 8009170:	f7ff feda 	bl	8008f28 <_Balloc>
 8009174:	b930      	cbnz	r0, 8009184 <__multiply+0x44>
 8009176:	4602      	mov	r2, r0
 8009178:	4b44      	ldr	r3, [pc, #272]	; (800928c <__multiply+0x14c>)
 800917a:	4845      	ldr	r0, [pc, #276]	; (8009290 <__multiply+0x150>)
 800917c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009180:	f000 fc8c 	bl	8009a9c <__assert_func>
 8009184:	f100 0514 	add.w	r5, r0, #20
 8009188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800918c:	462b      	mov	r3, r5
 800918e:	2200      	movs	r2, #0
 8009190:	4543      	cmp	r3, r8
 8009192:	d321      	bcc.n	80091d8 <__multiply+0x98>
 8009194:	f104 0314 	add.w	r3, r4, #20
 8009198:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800919c:	f109 0314 	add.w	r3, r9, #20
 80091a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091a4:	9202      	str	r2, [sp, #8]
 80091a6:	1b3a      	subs	r2, r7, r4
 80091a8:	3a15      	subs	r2, #21
 80091aa:	f022 0203 	bic.w	r2, r2, #3
 80091ae:	3204      	adds	r2, #4
 80091b0:	f104 0115 	add.w	r1, r4, #21
 80091b4:	428f      	cmp	r7, r1
 80091b6:	bf38      	it	cc
 80091b8:	2204      	movcc	r2, #4
 80091ba:	9201      	str	r2, [sp, #4]
 80091bc:	9a02      	ldr	r2, [sp, #8]
 80091be:	9303      	str	r3, [sp, #12]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d80c      	bhi.n	80091de <__multiply+0x9e>
 80091c4:	2e00      	cmp	r6, #0
 80091c6:	dd03      	ble.n	80091d0 <__multiply+0x90>
 80091c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d05b      	beq.n	8009288 <__multiply+0x148>
 80091d0:	6106      	str	r6, [r0, #16]
 80091d2:	b005      	add	sp, #20
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d8:	f843 2b04 	str.w	r2, [r3], #4
 80091dc:	e7d8      	b.n	8009190 <__multiply+0x50>
 80091de:	f8b3 a000 	ldrh.w	sl, [r3]
 80091e2:	f1ba 0f00 	cmp.w	sl, #0
 80091e6:	d024      	beq.n	8009232 <__multiply+0xf2>
 80091e8:	f104 0e14 	add.w	lr, r4, #20
 80091ec:	46a9      	mov	r9, r5
 80091ee:	f04f 0c00 	mov.w	ip, #0
 80091f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091f6:	f8d9 1000 	ldr.w	r1, [r9]
 80091fa:	fa1f fb82 	uxth.w	fp, r2
 80091fe:	b289      	uxth	r1, r1
 8009200:	fb0a 110b 	mla	r1, sl, fp, r1
 8009204:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009208:	f8d9 2000 	ldr.w	r2, [r9]
 800920c:	4461      	add	r1, ip
 800920e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009212:	fb0a c20b 	mla	r2, sl, fp, ip
 8009216:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800921a:	b289      	uxth	r1, r1
 800921c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009220:	4577      	cmp	r7, lr
 8009222:	f849 1b04 	str.w	r1, [r9], #4
 8009226:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800922a:	d8e2      	bhi.n	80091f2 <__multiply+0xb2>
 800922c:	9a01      	ldr	r2, [sp, #4]
 800922e:	f845 c002 	str.w	ip, [r5, r2]
 8009232:	9a03      	ldr	r2, [sp, #12]
 8009234:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009238:	3304      	adds	r3, #4
 800923a:	f1b9 0f00 	cmp.w	r9, #0
 800923e:	d021      	beq.n	8009284 <__multiply+0x144>
 8009240:	6829      	ldr	r1, [r5, #0]
 8009242:	f104 0c14 	add.w	ip, r4, #20
 8009246:	46ae      	mov	lr, r5
 8009248:	f04f 0a00 	mov.w	sl, #0
 800924c:	f8bc b000 	ldrh.w	fp, [ip]
 8009250:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009254:	fb09 220b 	mla	r2, r9, fp, r2
 8009258:	4452      	add	r2, sl
 800925a:	b289      	uxth	r1, r1
 800925c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009260:	f84e 1b04 	str.w	r1, [lr], #4
 8009264:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009268:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800926c:	f8be 1000 	ldrh.w	r1, [lr]
 8009270:	fb09 110a 	mla	r1, r9, sl, r1
 8009274:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009278:	4567      	cmp	r7, ip
 800927a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800927e:	d8e5      	bhi.n	800924c <__multiply+0x10c>
 8009280:	9a01      	ldr	r2, [sp, #4]
 8009282:	50a9      	str	r1, [r5, r2]
 8009284:	3504      	adds	r5, #4
 8009286:	e799      	b.n	80091bc <__multiply+0x7c>
 8009288:	3e01      	subs	r6, #1
 800928a:	e79b      	b.n	80091c4 <__multiply+0x84>
 800928c:	0800ab68 	.word	0x0800ab68
 8009290:	0800ab79 	.word	0x0800ab79

08009294 <__pow5mult>:
 8009294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009298:	4615      	mov	r5, r2
 800929a:	f012 0203 	ands.w	r2, r2, #3
 800929e:	4606      	mov	r6, r0
 80092a0:	460f      	mov	r7, r1
 80092a2:	d007      	beq.n	80092b4 <__pow5mult+0x20>
 80092a4:	4c25      	ldr	r4, [pc, #148]	; (800933c <__pow5mult+0xa8>)
 80092a6:	3a01      	subs	r2, #1
 80092a8:	2300      	movs	r3, #0
 80092aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092ae:	f7ff fe9d 	bl	8008fec <__multadd>
 80092b2:	4607      	mov	r7, r0
 80092b4:	10ad      	asrs	r5, r5, #2
 80092b6:	d03d      	beq.n	8009334 <__pow5mult+0xa0>
 80092b8:	69f4      	ldr	r4, [r6, #28]
 80092ba:	b97c      	cbnz	r4, 80092dc <__pow5mult+0x48>
 80092bc:	2010      	movs	r0, #16
 80092be:	f7ff fd7f 	bl	8008dc0 <malloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	61f0      	str	r0, [r6, #28]
 80092c6:	b928      	cbnz	r0, 80092d4 <__pow5mult+0x40>
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <__pow5mult+0xac>)
 80092ca:	481e      	ldr	r0, [pc, #120]	; (8009344 <__pow5mult+0xb0>)
 80092cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092d0:	f000 fbe4 	bl	8009a9c <__assert_func>
 80092d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092d8:	6004      	str	r4, [r0, #0]
 80092da:	60c4      	str	r4, [r0, #12]
 80092dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092e4:	b94c      	cbnz	r4, 80092fa <__pow5mult+0x66>
 80092e6:	f240 2171 	movw	r1, #625	; 0x271
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7ff ff12 	bl	8009114 <__i2b>
 80092f0:	2300      	movs	r3, #0
 80092f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092f6:	4604      	mov	r4, r0
 80092f8:	6003      	str	r3, [r0, #0]
 80092fa:	f04f 0900 	mov.w	r9, #0
 80092fe:	07eb      	lsls	r3, r5, #31
 8009300:	d50a      	bpl.n	8009318 <__pow5mult+0x84>
 8009302:	4639      	mov	r1, r7
 8009304:	4622      	mov	r2, r4
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ff1a 	bl	8009140 <__multiply>
 800930c:	4639      	mov	r1, r7
 800930e:	4680      	mov	r8, r0
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff fe49 	bl	8008fa8 <_Bfree>
 8009316:	4647      	mov	r7, r8
 8009318:	106d      	asrs	r5, r5, #1
 800931a:	d00b      	beq.n	8009334 <__pow5mult+0xa0>
 800931c:	6820      	ldr	r0, [r4, #0]
 800931e:	b938      	cbnz	r0, 8009330 <__pow5mult+0x9c>
 8009320:	4622      	mov	r2, r4
 8009322:	4621      	mov	r1, r4
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ff0b 	bl	8009140 <__multiply>
 800932a:	6020      	str	r0, [r4, #0]
 800932c:	f8c0 9000 	str.w	r9, [r0]
 8009330:	4604      	mov	r4, r0
 8009332:	e7e4      	b.n	80092fe <__pow5mult+0x6a>
 8009334:	4638      	mov	r0, r7
 8009336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933a:	bf00      	nop
 800933c:	0800acc8 	.word	0x0800acc8
 8009340:	0800aaf9 	.word	0x0800aaf9
 8009344:	0800ab79 	.word	0x0800ab79

08009348 <__lshift>:
 8009348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800934c:	460c      	mov	r4, r1
 800934e:	6849      	ldr	r1, [r1, #4]
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	4607      	mov	r7, r0
 800935a:	4691      	mov	r9, r2
 800935c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009360:	f108 0601 	add.w	r6, r8, #1
 8009364:	42b3      	cmp	r3, r6
 8009366:	db0b      	blt.n	8009380 <__lshift+0x38>
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff fddd 	bl	8008f28 <_Balloc>
 800936e:	4605      	mov	r5, r0
 8009370:	b948      	cbnz	r0, 8009386 <__lshift+0x3e>
 8009372:	4602      	mov	r2, r0
 8009374:	4b28      	ldr	r3, [pc, #160]	; (8009418 <__lshift+0xd0>)
 8009376:	4829      	ldr	r0, [pc, #164]	; (800941c <__lshift+0xd4>)
 8009378:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800937c:	f000 fb8e 	bl	8009a9c <__assert_func>
 8009380:	3101      	adds	r1, #1
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	e7ee      	b.n	8009364 <__lshift+0x1c>
 8009386:	2300      	movs	r3, #0
 8009388:	f100 0114 	add.w	r1, r0, #20
 800938c:	f100 0210 	add.w	r2, r0, #16
 8009390:	4618      	mov	r0, r3
 8009392:	4553      	cmp	r3, sl
 8009394:	db33      	blt.n	80093fe <__lshift+0xb6>
 8009396:	6920      	ldr	r0, [r4, #16]
 8009398:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800939c:	f104 0314 	add.w	r3, r4, #20
 80093a0:	f019 091f 	ands.w	r9, r9, #31
 80093a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093ac:	d02b      	beq.n	8009406 <__lshift+0xbe>
 80093ae:	f1c9 0e20 	rsb	lr, r9, #32
 80093b2:	468a      	mov	sl, r1
 80093b4:	2200      	movs	r2, #0
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	fa00 f009 	lsl.w	r0, r0, r9
 80093bc:	4310      	orrs	r0, r2
 80093be:	f84a 0b04 	str.w	r0, [sl], #4
 80093c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c6:	459c      	cmp	ip, r3
 80093c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093cc:	d8f3      	bhi.n	80093b6 <__lshift+0x6e>
 80093ce:	ebac 0304 	sub.w	r3, ip, r4
 80093d2:	3b15      	subs	r3, #21
 80093d4:	f023 0303 	bic.w	r3, r3, #3
 80093d8:	3304      	adds	r3, #4
 80093da:	f104 0015 	add.w	r0, r4, #21
 80093de:	4584      	cmp	ip, r0
 80093e0:	bf38      	it	cc
 80093e2:	2304      	movcc	r3, #4
 80093e4:	50ca      	str	r2, [r1, r3]
 80093e6:	b10a      	cbz	r2, 80093ec <__lshift+0xa4>
 80093e8:	f108 0602 	add.w	r6, r8, #2
 80093ec:	3e01      	subs	r6, #1
 80093ee:	4638      	mov	r0, r7
 80093f0:	612e      	str	r6, [r5, #16]
 80093f2:	4621      	mov	r1, r4
 80093f4:	f7ff fdd8 	bl	8008fa8 <_Bfree>
 80093f8:	4628      	mov	r0, r5
 80093fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009402:	3301      	adds	r3, #1
 8009404:	e7c5      	b.n	8009392 <__lshift+0x4a>
 8009406:	3904      	subs	r1, #4
 8009408:	f853 2b04 	ldr.w	r2, [r3], #4
 800940c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009410:	459c      	cmp	ip, r3
 8009412:	d8f9      	bhi.n	8009408 <__lshift+0xc0>
 8009414:	e7ea      	b.n	80093ec <__lshift+0xa4>
 8009416:	bf00      	nop
 8009418:	0800ab68 	.word	0x0800ab68
 800941c:	0800ab79 	.word	0x0800ab79

08009420 <__mcmp>:
 8009420:	b530      	push	{r4, r5, lr}
 8009422:	6902      	ldr	r2, [r0, #16]
 8009424:	690c      	ldr	r4, [r1, #16]
 8009426:	1b12      	subs	r2, r2, r4
 8009428:	d10e      	bne.n	8009448 <__mcmp+0x28>
 800942a:	f100 0314 	add.w	r3, r0, #20
 800942e:	3114      	adds	r1, #20
 8009430:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009434:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009438:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800943c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009440:	42a5      	cmp	r5, r4
 8009442:	d003      	beq.n	800944c <__mcmp+0x2c>
 8009444:	d305      	bcc.n	8009452 <__mcmp+0x32>
 8009446:	2201      	movs	r2, #1
 8009448:	4610      	mov	r0, r2
 800944a:	bd30      	pop	{r4, r5, pc}
 800944c:	4283      	cmp	r3, r0
 800944e:	d3f3      	bcc.n	8009438 <__mcmp+0x18>
 8009450:	e7fa      	b.n	8009448 <__mcmp+0x28>
 8009452:	f04f 32ff 	mov.w	r2, #4294967295
 8009456:	e7f7      	b.n	8009448 <__mcmp+0x28>

08009458 <__mdiff>:
 8009458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	4606      	mov	r6, r0
 8009460:	4611      	mov	r1, r2
 8009462:	4620      	mov	r0, r4
 8009464:	4690      	mov	r8, r2
 8009466:	f7ff ffdb 	bl	8009420 <__mcmp>
 800946a:	1e05      	subs	r5, r0, #0
 800946c:	d110      	bne.n	8009490 <__mdiff+0x38>
 800946e:	4629      	mov	r1, r5
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff fd59 	bl	8008f28 <_Balloc>
 8009476:	b930      	cbnz	r0, 8009486 <__mdiff+0x2e>
 8009478:	4b3a      	ldr	r3, [pc, #232]	; (8009564 <__mdiff+0x10c>)
 800947a:	4602      	mov	r2, r0
 800947c:	f240 2137 	movw	r1, #567	; 0x237
 8009480:	4839      	ldr	r0, [pc, #228]	; (8009568 <__mdiff+0x110>)
 8009482:	f000 fb0b 	bl	8009a9c <__assert_func>
 8009486:	2301      	movs	r3, #1
 8009488:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800948c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	bfa4      	itt	ge
 8009492:	4643      	movge	r3, r8
 8009494:	46a0      	movge	r8, r4
 8009496:	4630      	mov	r0, r6
 8009498:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800949c:	bfa6      	itte	ge
 800949e:	461c      	movge	r4, r3
 80094a0:	2500      	movge	r5, #0
 80094a2:	2501      	movlt	r5, #1
 80094a4:	f7ff fd40 	bl	8008f28 <_Balloc>
 80094a8:	b920      	cbnz	r0, 80094b4 <__mdiff+0x5c>
 80094aa:	4b2e      	ldr	r3, [pc, #184]	; (8009564 <__mdiff+0x10c>)
 80094ac:	4602      	mov	r2, r0
 80094ae:	f240 2145 	movw	r1, #581	; 0x245
 80094b2:	e7e5      	b.n	8009480 <__mdiff+0x28>
 80094b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094b8:	6926      	ldr	r6, [r4, #16]
 80094ba:	60c5      	str	r5, [r0, #12]
 80094bc:	f104 0914 	add.w	r9, r4, #20
 80094c0:	f108 0514 	add.w	r5, r8, #20
 80094c4:	f100 0e14 	add.w	lr, r0, #20
 80094c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094d0:	f108 0210 	add.w	r2, r8, #16
 80094d4:	46f2      	mov	sl, lr
 80094d6:	2100      	movs	r1, #0
 80094d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094e0:	fa11 f88b 	uxtah	r8, r1, fp
 80094e4:	b299      	uxth	r1, r3
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	eba8 0801 	sub.w	r8, r8, r1
 80094ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094f4:	fa1f f888 	uxth.w	r8, r8
 80094f8:	1419      	asrs	r1, r3, #16
 80094fa:	454e      	cmp	r6, r9
 80094fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009500:	f84a 3b04 	str.w	r3, [sl], #4
 8009504:	d8e8      	bhi.n	80094d8 <__mdiff+0x80>
 8009506:	1b33      	subs	r3, r6, r4
 8009508:	3b15      	subs	r3, #21
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	3304      	adds	r3, #4
 8009510:	3415      	adds	r4, #21
 8009512:	42a6      	cmp	r6, r4
 8009514:	bf38      	it	cc
 8009516:	2304      	movcc	r3, #4
 8009518:	441d      	add	r5, r3
 800951a:	4473      	add	r3, lr
 800951c:	469e      	mov	lr, r3
 800951e:	462e      	mov	r6, r5
 8009520:	4566      	cmp	r6, ip
 8009522:	d30e      	bcc.n	8009542 <__mdiff+0xea>
 8009524:	f10c 0203 	add.w	r2, ip, #3
 8009528:	1b52      	subs	r2, r2, r5
 800952a:	f022 0203 	bic.w	r2, r2, #3
 800952e:	3d03      	subs	r5, #3
 8009530:	45ac      	cmp	ip, r5
 8009532:	bf38      	it	cc
 8009534:	2200      	movcc	r2, #0
 8009536:	4413      	add	r3, r2
 8009538:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800953c:	b17a      	cbz	r2, 800955e <__mdiff+0x106>
 800953e:	6107      	str	r7, [r0, #16]
 8009540:	e7a4      	b.n	800948c <__mdiff+0x34>
 8009542:	f856 8b04 	ldr.w	r8, [r6], #4
 8009546:	fa11 f288 	uxtah	r2, r1, r8
 800954a:	1414      	asrs	r4, r2, #16
 800954c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009550:	b292      	uxth	r2, r2
 8009552:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009556:	f84e 2b04 	str.w	r2, [lr], #4
 800955a:	1421      	asrs	r1, r4, #16
 800955c:	e7e0      	b.n	8009520 <__mdiff+0xc8>
 800955e:	3f01      	subs	r7, #1
 8009560:	e7ea      	b.n	8009538 <__mdiff+0xe0>
 8009562:	bf00      	nop
 8009564:	0800ab68 	.word	0x0800ab68
 8009568:	0800ab79 	.word	0x0800ab79

0800956c <__d2b>:
 800956c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009570:	460f      	mov	r7, r1
 8009572:	2101      	movs	r1, #1
 8009574:	ec59 8b10 	vmov	r8, r9, d0
 8009578:	4616      	mov	r6, r2
 800957a:	f7ff fcd5 	bl	8008f28 <_Balloc>
 800957e:	4604      	mov	r4, r0
 8009580:	b930      	cbnz	r0, 8009590 <__d2b+0x24>
 8009582:	4602      	mov	r2, r0
 8009584:	4b24      	ldr	r3, [pc, #144]	; (8009618 <__d2b+0xac>)
 8009586:	4825      	ldr	r0, [pc, #148]	; (800961c <__d2b+0xb0>)
 8009588:	f240 310f 	movw	r1, #783	; 0x30f
 800958c:	f000 fa86 	bl	8009a9c <__assert_func>
 8009590:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009598:	bb2d      	cbnz	r5, 80095e6 <__d2b+0x7a>
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	f1b8 0300 	subs.w	r3, r8, #0
 80095a0:	d026      	beq.n	80095f0 <__d2b+0x84>
 80095a2:	4668      	mov	r0, sp
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	f7ff fd87 	bl	80090b8 <__lo0bits>
 80095aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095ae:	b1e8      	cbz	r0, 80095ec <__d2b+0x80>
 80095b0:	f1c0 0320 	rsb	r3, r0, #32
 80095b4:	fa02 f303 	lsl.w	r3, r2, r3
 80095b8:	430b      	orrs	r3, r1
 80095ba:	40c2      	lsrs	r2, r0
 80095bc:	6163      	str	r3, [r4, #20]
 80095be:	9201      	str	r2, [sp, #4]
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	61a3      	str	r3, [r4, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf14      	ite	ne
 80095c8:	2202      	movne	r2, #2
 80095ca:	2201      	moveq	r2, #1
 80095cc:	6122      	str	r2, [r4, #16]
 80095ce:	b1bd      	cbz	r5, 8009600 <__d2b+0x94>
 80095d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095d4:	4405      	add	r5, r0
 80095d6:	603d      	str	r5, [r7, #0]
 80095d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095dc:	6030      	str	r0, [r6, #0]
 80095de:	4620      	mov	r0, r4
 80095e0:	b003      	add	sp, #12
 80095e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ea:	e7d6      	b.n	800959a <__d2b+0x2e>
 80095ec:	6161      	str	r1, [r4, #20]
 80095ee:	e7e7      	b.n	80095c0 <__d2b+0x54>
 80095f0:	a801      	add	r0, sp, #4
 80095f2:	f7ff fd61 	bl	80090b8 <__lo0bits>
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	6163      	str	r3, [r4, #20]
 80095fa:	3020      	adds	r0, #32
 80095fc:	2201      	movs	r2, #1
 80095fe:	e7e5      	b.n	80095cc <__d2b+0x60>
 8009600:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009604:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009608:	6038      	str	r0, [r7, #0]
 800960a:	6918      	ldr	r0, [r3, #16]
 800960c:	f7ff fd34 	bl	8009078 <__hi0bits>
 8009610:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009614:	e7e2      	b.n	80095dc <__d2b+0x70>
 8009616:	bf00      	nop
 8009618:	0800ab68 	.word	0x0800ab68
 800961c:	0800ab79 	.word	0x0800ab79

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	461f      	mov	r7, r3
 8009628:	42be      	cmp	r6, r7
 800962a:	680b      	ldr	r3, [r1, #0]
 800962c:	4682      	mov	sl, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4690      	mov	r8, r2
 8009632:	d82c      	bhi.n	800968e <__ssputs_r+0x6e>
 8009634:	898a      	ldrh	r2, [r1, #12]
 8009636:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800963a:	d026      	beq.n	800968a <__ssputs_r+0x6a>
 800963c:	6965      	ldr	r5, [r4, #20]
 800963e:	6909      	ldr	r1, [r1, #16]
 8009640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009644:	eba3 0901 	sub.w	r9, r3, r1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	1c7b      	adds	r3, r7, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d527      	bpl.n	80096ac <__ssputs_r+0x8c>
 800965c:	4629      	mov	r1, r5
 800965e:	f7ff fbd7 	bl	8008e10 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b360      	cbz	r0, 80096c0 <__ssputs_r+0xa0>
 8009666:	6921      	ldr	r1, [r4, #16]
 8009668:	464a      	mov	r2, r9
 800966a:	f000 fa09 	bl	8009a80 <memcpy>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	6126      	str	r6, [r4, #16]
 800967c:	6165      	str	r5, [r4, #20]
 800967e:	444e      	add	r6, r9
 8009680:	eba5 0509 	sub.w	r5, r5, r9
 8009684:	6026      	str	r6, [r4, #0]
 8009686:	60a5      	str	r5, [r4, #8]
 8009688:	463e      	mov	r6, r7
 800968a:	42be      	cmp	r6, r7
 800968c:	d900      	bls.n	8009690 <__ssputs_r+0x70>
 800968e:	463e      	mov	r6, r7
 8009690:	6820      	ldr	r0, [r4, #0]
 8009692:	4632      	mov	r2, r6
 8009694:	4641      	mov	r1, r8
 8009696:	f000 f9c9 	bl	8009a2c <memmove>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	1b9b      	subs	r3, r3, r6
 800969e:	60a3      	str	r3, [r4, #8]
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	4433      	add	r3, r6
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	2000      	movs	r0, #0
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ac:	462a      	mov	r2, r5
 80096ae:	f000 fa3b 	bl	8009b28 <_realloc_r>
 80096b2:	4606      	mov	r6, r0
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d1e0      	bne.n	800967a <__ssputs_r+0x5a>
 80096b8:	6921      	ldr	r1, [r4, #16]
 80096ba:	4650      	mov	r0, sl
 80096bc:	f7ff fb34 	bl	8008d28 <_free_r>
 80096c0:	230c      	movs	r3, #12
 80096c2:	f8ca 3000 	str.w	r3, [sl]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	e7e9      	b.n	80096a8 <__ssputs_r+0x88>

080096d4 <_svfiprintf_r>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	4698      	mov	r8, r3
 80096da:	898b      	ldrh	r3, [r1, #12]
 80096dc:	061b      	lsls	r3, r3, #24
 80096de:	b09d      	sub	sp, #116	; 0x74
 80096e0:	4607      	mov	r7, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	4614      	mov	r4, r2
 80096e6:	d50e      	bpl.n	8009706 <_svfiprintf_r+0x32>
 80096e8:	690b      	ldr	r3, [r1, #16]
 80096ea:	b963      	cbnz	r3, 8009706 <_svfiprintf_r+0x32>
 80096ec:	2140      	movs	r1, #64	; 0x40
 80096ee:	f7ff fb8f 	bl	8008e10 <_malloc_r>
 80096f2:	6028      	str	r0, [r5, #0]
 80096f4:	6128      	str	r0, [r5, #16]
 80096f6:	b920      	cbnz	r0, 8009702 <_svfiprintf_r+0x2e>
 80096f8:	230c      	movs	r3, #12
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	e0d0      	b.n	80098a4 <_svfiprintf_r+0x1d0>
 8009702:	2340      	movs	r3, #64	; 0x40
 8009704:	616b      	str	r3, [r5, #20]
 8009706:	2300      	movs	r3, #0
 8009708:	9309      	str	r3, [sp, #36]	; 0x24
 800970a:	2320      	movs	r3, #32
 800970c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009710:	f8cd 800c 	str.w	r8, [sp, #12]
 8009714:	2330      	movs	r3, #48	; 0x30
 8009716:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098bc <_svfiprintf_r+0x1e8>
 800971a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800971e:	f04f 0901 	mov.w	r9, #1
 8009722:	4623      	mov	r3, r4
 8009724:	469a      	mov	sl, r3
 8009726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972a:	b10a      	cbz	r2, 8009730 <_svfiprintf_r+0x5c>
 800972c:	2a25      	cmp	r2, #37	; 0x25
 800972e:	d1f9      	bne.n	8009724 <_svfiprintf_r+0x50>
 8009730:	ebba 0b04 	subs.w	fp, sl, r4
 8009734:	d00b      	beq.n	800974e <_svfiprintf_r+0x7a>
 8009736:	465b      	mov	r3, fp
 8009738:	4622      	mov	r2, r4
 800973a:	4629      	mov	r1, r5
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff ff6f 	bl	8009620 <__ssputs_r>
 8009742:	3001      	adds	r0, #1
 8009744:	f000 80a9 	beq.w	800989a <_svfiprintf_r+0x1c6>
 8009748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974a:	445a      	add	r2, fp
 800974c:	9209      	str	r2, [sp, #36]	; 0x24
 800974e:	f89a 3000 	ldrb.w	r3, [sl]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a1 	beq.w	800989a <_svfiprintf_r+0x1c6>
 8009758:	2300      	movs	r3, #0
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009762:	f10a 0a01 	add.w	sl, sl, #1
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800976e:	931a      	str	r3, [sp, #104]	; 0x68
 8009770:	4654      	mov	r4, sl
 8009772:	2205      	movs	r2, #5
 8009774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009778:	4850      	ldr	r0, [pc, #320]	; (80098bc <_svfiprintf_r+0x1e8>)
 800977a:	f7f6 fd61 	bl	8000240 <memchr>
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	b9d8      	cbnz	r0, 80097ba <_svfiprintf_r+0xe6>
 8009782:	06d0      	lsls	r0, r2, #27
 8009784:	bf44      	itt	mi
 8009786:	2320      	movmi	r3, #32
 8009788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978c:	0711      	lsls	r1, r2, #28
 800978e:	bf44      	itt	mi
 8009790:	232b      	movmi	r3, #43	; 0x2b
 8009792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009796:	f89a 3000 	ldrb.w	r3, [sl]
 800979a:	2b2a      	cmp	r3, #42	; 0x2a
 800979c:	d015      	beq.n	80097ca <_svfiprintf_r+0xf6>
 800979e:	9a07      	ldr	r2, [sp, #28]
 80097a0:	4654      	mov	r4, sl
 80097a2:	2000      	movs	r0, #0
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	4621      	mov	r1, r4
 80097aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ae:	3b30      	subs	r3, #48	; 0x30
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d94d      	bls.n	8009850 <_svfiprintf_r+0x17c>
 80097b4:	b1b0      	cbz	r0, 80097e4 <_svfiprintf_r+0x110>
 80097b6:	9207      	str	r2, [sp, #28]
 80097b8:	e014      	b.n	80097e4 <_svfiprintf_r+0x110>
 80097ba:	eba0 0308 	sub.w	r3, r0, r8
 80097be:	fa09 f303 	lsl.w	r3, r9, r3
 80097c2:	4313      	orrs	r3, r2
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	46a2      	mov	sl, r4
 80097c8:	e7d2      	b.n	8009770 <_svfiprintf_r+0x9c>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	1d19      	adds	r1, r3, #4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	9103      	str	r1, [sp, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bfbb      	ittet	lt
 80097d6:	425b      	neglt	r3, r3
 80097d8:	f042 0202 	orrlt.w	r2, r2, #2
 80097dc:	9307      	strge	r3, [sp, #28]
 80097de:	9307      	strlt	r3, [sp, #28]
 80097e0:	bfb8      	it	lt
 80097e2:	9204      	strlt	r2, [sp, #16]
 80097e4:	7823      	ldrb	r3, [r4, #0]
 80097e6:	2b2e      	cmp	r3, #46	; 0x2e
 80097e8:	d10c      	bne.n	8009804 <_svfiprintf_r+0x130>
 80097ea:	7863      	ldrb	r3, [r4, #1]
 80097ec:	2b2a      	cmp	r3, #42	; 0x2a
 80097ee:	d134      	bne.n	800985a <_svfiprintf_r+0x186>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	1d1a      	adds	r2, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	9203      	str	r2, [sp, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfb8      	it	lt
 80097fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009800:	3402      	adds	r4, #2
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098cc <_svfiprintf_r+0x1f8>
 8009808:	7821      	ldrb	r1, [r4, #0]
 800980a:	2203      	movs	r2, #3
 800980c:	4650      	mov	r0, sl
 800980e:	f7f6 fd17 	bl	8000240 <memchr>
 8009812:	b138      	cbz	r0, 8009824 <_svfiprintf_r+0x150>
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	eba0 000a 	sub.w	r0, r0, sl
 800981a:	2240      	movs	r2, #64	; 0x40
 800981c:	4082      	lsls	r2, r0
 800981e:	4313      	orrs	r3, r2
 8009820:	3401      	adds	r4, #1
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009828:	4825      	ldr	r0, [pc, #148]	; (80098c0 <_svfiprintf_r+0x1ec>)
 800982a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800982e:	2206      	movs	r2, #6
 8009830:	f7f6 fd06 	bl	8000240 <memchr>
 8009834:	2800      	cmp	r0, #0
 8009836:	d038      	beq.n	80098aa <_svfiprintf_r+0x1d6>
 8009838:	4b22      	ldr	r3, [pc, #136]	; (80098c4 <_svfiprintf_r+0x1f0>)
 800983a:	bb1b      	cbnz	r3, 8009884 <_svfiprintf_r+0x1b0>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	3307      	adds	r3, #7
 8009840:	f023 0307 	bic.w	r3, r3, #7
 8009844:	3308      	adds	r3, #8
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984a:	4433      	add	r3, r6
 800984c:	9309      	str	r3, [sp, #36]	; 0x24
 800984e:	e768      	b.n	8009722 <_svfiprintf_r+0x4e>
 8009850:	fb0c 3202 	mla	r2, ip, r2, r3
 8009854:	460c      	mov	r4, r1
 8009856:	2001      	movs	r0, #1
 8009858:	e7a6      	b.n	80097a8 <_svfiprintf_r+0xd4>
 800985a:	2300      	movs	r3, #0
 800985c:	3401      	adds	r4, #1
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	4619      	mov	r1, r3
 8009862:	f04f 0c0a 	mov.w	ip, #10
 8009866:	4620      	mov	r0, r4
 8009868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800986c:	3a30      	subs	r2, #48	; 0x30
 800986e:	2a09      	cmp	r2, #9
 8009870:	d903      	bls.n	800987a <_svfiprintf_r+0x1a6>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0c6      	beq.n	8009804 <_svfiprintf_r+0x130>
 8009876:	9105      	str	r1, [sp, #20]
 8009878:	e7c4      	b.n	8009804 <_svfiprintf_r+0x130>
 800987a:	fb0c 2101 	mla	r1, ip, r1, r2
 800987e:	4604      	mov	r4, r0
 8009880:	2301      	movs	r3, #1
 8009882:	e7f0      	b.n	8009866 <_svfiprintf_r+0x192>
 8009884:	ab03      	add	r3, sp, #12
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	462a      	mov	r2, r5
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <_svfiprintf_r+0x1f4>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	4638      	mov	r0, r7
 8009890:	f7fd ff1a 	bl	80076c8 <_printf_float>
 8009894:	1c42      	adds	r2, r0, #1
 8009896:	4606      	mov	r6, r0
 8009898:	d1d6      	bne.n	8009848 <_svfiprintf_r+0x174>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	065b      	lsls	r3, r3, #25
 800989e:	f53f af2d 	bmi.w	80096fc <_svfiprintf_r+0x28>
 80098a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a4:	b01d      	add	sp, #116	; 0x74
 80098a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <_svfiprintf_r+0x1f4>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7fe f98f 	bl	8007bd8 <_printf_i>
 80098ba:	e7eb      	b.n	8009894 <_svfiprintf_r+0x1c0>
 80098bc:	0800acd4 	.word	0x0800acd4
 80098c0:	0800acde 	.word	0x0800acde
 80098c4:	080076c9 	.word	0x080076c9
 80098c8:	08009621 	.word	0x08009621
 80098cc:	0800acda 	.word	0x0800acda

080098d0 <__sflush_r>:
 80098d0:	898a      	ldrh	r2, [r1, #12]
 80098d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d6:	4605      	mov	r5, r0
 80098d8:	0710      	lsls	r0, r2, #28
 80098da:	460c      	mov	r4, r1
 80098dc:	d458      	bmi.n	8009990 <__sflush_r+0xc0>
 80098de:	684b      	ldr	r3, [r1, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dc05      	bgt.n	80098f0 <__sflush_r+0x20>
 80098e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	dc02      	bgt.n	80098f0 <__sflush_r+0x20>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098f2:	2e00      	cmp	r6, #0
 80098f4:	d0f9      	beq.n	80098ea <__sflush_r+0x1a>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098fc:	682f      	ldr	r7, [r5, #0]
 80098fe:	6a21      	ldr	r1, [r4, #32]
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	d032      	beq.n	800996a <__sflush_r+0x9a>
 8009904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	075a      	lsls	r2, r3, #29
 800990a:	d505      	bpl.n	8009918 <__sflush_r+0x48>
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	1ac0      	subs	r0, r0, r3
 8009910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009912:	b10b      	cbz	r3, 8009918 <__sflush_r+0x48>
 8009914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009916:	1ac0      	subs	r0, r0, r3
 8009918:	2300      	movs	r3, #0
 800991a:	4602      	mov	r2, r0
 800991c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800991e:	6a21      	ldr	r1, [r4, #32]
 8009920:	4628      	mov	r0, r5
 8009922:	47b0      	blx	r6
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	d106      	bne.n	8009938 <__sflush_r+0x68>
 800992a:	6829      	ldr	r1, [r5, #0]
 800992c:	291d      	cmp	r1, #29
 800992e:	d82b      	bhi.n	8009988 <__sflush_r+0xb8>
 8009930:	4a29      	ldr	r2, [pc, #164]	; (80099d8 <__sflush_r+0x108>)
 8009932:	410a      	asrs	r2, r1
 8009934:	07d6      	lsls	r6, r2, #31
 8009936:	d427      	bmi.n	8009988 <__sflush_r+0xb8>
 8009938:	2200      	movs	r2, #0
 800993a:	6062      	str	r2, [r4, #4]
 800993c:	04d9      	lsls	r1, r3, #19
 800993e:	6922      	ldr	r2, [r4, #16]
 8009940:	6022      	str	r2, [r4, #0]
 8009942:	d504      	bpl.n	800994e <__sflush_r+0x7e>
 8009944:	1c42      	adds	r2, r0, #1
 8009946:	d101      	bne.n	800994c <__sflush_r+0x7c>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b903      	cbnz	r3, 800994e <__sflush_r+0x7e>
 800994c:	6560      	str	r0, [r4, #84]	; 0x54
 800994e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009950:	602f      	str	r7, [r5, #0]
 8009952:	2900      	cmp	r1, #0
 8009954:	d0c9      	beq.n	80098ea <__sflush_r+0x1a>
 8009956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995a:	4299      	cmp	r1, r3
 800995c:	d002      	beq.n	8009964 <__sflush_r+0x94>
 800995e:	4628      	mov	r0, r5
 8009960:	f7ff f9e2 	bl	8008d28 <_free_r>
 8009964:	2000      	movs	r0, #0
 8009966:	6360      	str	r0, [r4, #52]	; 0x34
 8009968:	e7c0      	b.n	80098ec <__sflush_r+0x1c>
 800996a:	2301      	movs	r3, #1
 800996c:	4628      	mov	r0, r5
 800996e:	47b0      	blx	r6
 8009970:	1c41      	adds	r1, r0, #1
 8009972:	d1c8      	bne.n	8009906 <__sflush_r+0x36>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0c5      	beq.n	8009906 <__sflush_r+0x36>
 800997a:	2b1d      	cmp	r3, #29
 800997c:	d001      	beq.n	8009982 <__sflush_r+0xb2>
 800997e:	2b16      	cmp	r3, #22
 8009980:	d101      	bne.n	8009986 <__sflush_r+0xb6>
 8009982:	602f      	str	r7, [r5, #0]
 8009984:	e7b1      	b.n	80098ea <__sflush_r+0x1a>
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800998c:	81a3      	strh	r3, [r4, #12]
 800998e:	e7ad      	b.n	80098ec <__sflush_r+0x1c>
 8009990:	690f      	ldr	r7, [r1, #16]
 8009992:	2f00      	cmp	r7, #0
 8009994:	d0a9      	beq.n	80098ea <__sflush_r+0x1a>
 8009996:	0793      	lsls	r3, r2, #30
 8009998:	680e      	ldr	r6, [r1, #0]
 800999a:	bf08      	it	eq
 800999c:	694b      	ldreq	r3, [r1, #20]
 800999e:	600f      	str	r7, [r1, #0]
 80099a0:	bf18      	it	ne
 80099a2:	2300      	movne	r3, #0
 80099a4:	eba6 0807 	sub.w	r8, r6, r7
 80099a8:	608b      	str	r3, [r1, #8]
 80099aa:	f1b8 0f00 	cmp.w	r8, #0
 80099ae:	dd9c      	ble.n	80098ea <__sflush_r+0x1a>
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099b4:	4643      	mov	r3, r8
 80099b6:	463a      	mov	r2, r7
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b0      	blx	r6
 80099bc:	2800      	cmp	r0, #0
 80099be:	dc06      	bgt.n	80099ce <__sflush_r+0xfe>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	e78e      	b.n	80098ec <__sflush_r+0x1c>
 80099ce:	4407      	add	r7, r0
 80099d0:	eba8 0800 	sub.w	r8, r8, r0
 80099d4:	e7e9      	b.n	80099aa <__sflush_r+0xda>
 80099d6:	bf00      	nop
 80099d8:	dfbffffe 	.word	0xdfbffffe

080099dc <_fflush_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	690b      	ldr	r3, [r1, #16]
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b913      	cbnz	r3, 80099ec <_fflush_r+0x10>
 80099e6:	2500      	movs	r5, #0
 80099e8:	4628      	mov	r0, r5
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	b118      	cbz	r0, 80099f6 <_fflush_r+0x1a>
 80099ee:	6a03      	ldr	r3, [r0, #32]
 80099f0:	b90b      	cbnz	r3, 80099f6 <_fflush_r+0x1a>
 80099f2:	f7fe fa8d 	bl	8007f10 <__sinit>
 80099f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0f3      	beq.n	80099e6 <_fflush_r+0xa>
 80099fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a00:	07d0      	lsls	r0, r2, #31
 8009a02:	d404      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a04:	0599      	lsls	r1, r3, #22
 8009a06:	d402      	bmi.n	8009a0e <_fflush_r+0x32>
 8009a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0a:	f7fe fb97 	bl	800813c <__retarget_lock_acquire_recursive>
 8009a0e:	4628      	mov	r0, r5
 8009a10:	4621      	mov	r1, r4
 8009a12:	f7ff ff5d 	bl	80098d0 <__sflush_r>
 8009a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a18:	07da      	lsls	r2, r3, #31
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	d4e4      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	059b      	lsls	r3, r3, #22
 8009a22:	d4e1      	bmi.n	80099e8 <_fflush_r+0xc>
 8009a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a26:	f7fe fb8a 	bl	800813e <__retarget_lock_release_recursive>
 8009a2a:	e7dd      	b.n	80099e8 <_fflush_r+0xc>

08009a2c <memmove>:
 8009a2c:	4288      	cmp	r0, r1
 8009a2e:	b510      	push	{r4, lr}
 8009a30:	eb01 0402 	add.w	r4, r1, r2
 8009a34:	d902      	bls.n	8009a3c <memmove+0x10>
 8009a36:	4284      	cmp	r4, r0
 8009a38:	4623      	mov	r3, r4
 8009a3a:	d807      	bhi.n	8009a4c <memmove+0x20>
 8009a3c:	1e43      	subs	r3, r0, #1
 8009a3e:	42a1      	cmp	r1, r4
 8009a40:	d008      	beq.n	8009a54 <memmove+0x28>
 8009a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a4a:	e7f8      	b.n	8009a3e <memmove+0x12>
 8009a4c:	4402      	add	r2, r0
 8009a4e:	4601      	mov	r1, r0
 8009a50:	428a      	cmp	r2, r1
 8009a52:	d100      	bne.n	8009a56 <memmove+0x2a>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a5e:	e7f7      	b.n	8009a50 <memmove+0x24>

08009a60 <_sbrk_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	; (8009a7c <_sbrk_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f8 fa4e 	bl	8001f0c <_sbrk>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_sbrk_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_sbrk_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	2000060c 	.word	0x2000060c

08009a80 <memcpy>:
 8009a80:	440a      	add	r2, r1
 8009a82:	4291      	cmp	r1, r2
 8009a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a88:	d100      	bne.n	8009a8c <memcpy+0xc>
 8009a8a:	4770      	bx	lr
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a96:	4291      	cmp	r1, r2
 8009a98:	d1f9      	bne.n	8009a8e <memcpy+0xe>
 8009a9a:	bd10      	pop	{r4, pc}

08009a9c <__assert_func>:
 8009a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a9e:	4614      	mov	r4, r2
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <__assert_func+0x2c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	68d8      	ldr	r0, [r3, #12]
 8009aaa:	b14c      	cbz	r4, 8009ac0 <__assert_func+0x24>
 8009aac:	4b07      	ldr	r3, [pc, #28]	; (8009acc <__assert_func+0x30>)
 8009aae:	9100      	str	r1, [sp, #0]
 8009ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ab4:	4906      	ldr	r1, [pc, #24]	; (8009ad0 <__assert_func+0x34>)
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f000 f872 	bl	8009ba0 <fiprintf>
 8009abc:	f000 f882 	bl	8009bc4 <abort>
 8009ac0:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <__assert_func+0x38>)
 8009ac2:	461c      	mov	r4, r3
 8009ac4:	e7f3      	b.n	8009aae <__assert_func+0x12>
 8009ac6:	bf00      	nop
 8009ac8:	20000070 	.word	0x20000070
 8009acc:	0800acef 	.word	0x0800acef
 8009ad0:	0800acfc 	.word	0x0800acfc
 8009ad4:	0800ad2a 	.word	0x0800ad2a

08009ad8 <_calloc_r>:
 8009ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ada:	fba1 2402 	umull	r2, r4, r1, r2
 8009ade:	b94c      	cbnz	r4, 8009af4 <_calloc_r+0x1c>
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	9201      	str	r2, [sp, #4]
 8009ae4:	f7ff f994 	bl	8008e10 <_malloc_r>
 8009ae8:	9a01      	ldr	r2, [sp, #4]
 8009aea:	4605      	mov	r5, r0
 8009aec:	b930      	cbnz	r0, 8009afc <_calloc_r+0x24>
 8009aee:	4628      	mov	r0, r5
 8009af0:	b003      	add	sp, #12
 8009af2:	bd30      	pop	{r4, r5, pc}
 8009af4:	220c      	movs	r2, #12
 8009af6:	6002      	str	r2, [r0, #0]
 8009af8:	2500      	movs	r5, #0
 8009afa:	e7f8      	b.n	8009aee <_calloc_r+0x16>
 8009afc:	4621      	mov	r1, r4
 8009afe:	f7fe faa0 	bl	8008042 <memset>
 8009b02:	e7f4      	b.n	8009aee <_calloc_r+0x16>

08009b04 <__ascii_mbtowc>:
 8009b04:	b082      	sub	sp, #8
 8009b06:	b901      	cbnz	r1, 8009b0a <__ascii_mbtowc+0x6>
 8009b08:	a901      	add	r1, sp, #4
 8009b0a:	b142      	cbz	r2, 8009b1e <__ascii_mbtowc+0x1a>
 8009b0c:	b14b      	cbz	r3, 8009b22 <__ascii_mbtowc+0x1e>
 8009b0e:	7813      	ldrb	r3, [r2, #0]
 8009b10:	600b      	str	r3, [r1, #0]
 8009b12:	7812      	ldrb	r2, [r2, #0]
 8009b14:	1e10      	subs	r0, r2, #0
 8009b16:	bf18      	it	ne
 8009b18:	2001      	movne	r0, #1
 8009b1a:	b002      	add	sp, #8
 8009b1c:	4770      	bx	lr
 8009b1e:	4610      	mov	r0, r2
 8009b20:	e7fb      	b.n	8009b1a <__ascii_mbtowc+0x16>
 8009b22:	f06f 0001 	mvn.w	r0, #1
 8009b26:	e7f8      	b.n	8009b1a <__ascii_mbtowc+0x16>

08009b28 <_realloc_r>:
 8009b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4614      	mov	r4, r2
 8009b30:	460e      	mov	r6, r1
 8009b32:	b921      	cbnz	r1, 8009b3e <_realloc_r+0x16>
 8009b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	4611      	mov	r1, r2
 8009b3a:	f7ff b969 	b.w	8008e10 <_malloc_r>
 8009b3e:	b92a      	cbnz	r2, 8009b4c <_realloc_r+0x24>
 8009b40:	f7ff f8f2 	bl	8008d28 <_free_r>
 8009b44:	4625      	mov	r5, r4
 8009b46:	4628      	mov	r0, r5
 8009b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4c:	f000 f841 	bl	8009bd2 <_malloc_usable_size_r>
 8009b50:	4284      	cmp	r4, r0
 8009b52:	4607      	mov	r7, r0
 8009b54:	d802      	bhi.n	8009b5c <_realloc_r+0x34>
 8009b56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b5a:	d812      	bhi.n	8009b82 <_realloc_r+0x5a>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f7ff f956 	bl	8008e10 <_malloc_r>
 8009b64:	4605      	mov	r5, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0ed      	beq.n	8009b46 <_realloc_r+0x1e>
 8009b6a:	42bc      	cmp	r4, r7
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4631      	mov	r1, r6
 8009b70:	bf28      	it	cs
 8009b72:	463a      	movcs	r2, r7
 8009b74:	f7ff ff84 	bl	8009a80 <memcpy>
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f7ff f8d4 	bl	8008d28 <_free_r>
 8009b80:	e7e1      	b.n	8009b46 <_realloc_r+0x1e>
 8009b82:	4635      	mov	r5, r6
 8009b84:	e7df      	b.n	8009b46 <_realloc_r+0x1e>

08009b86 <__ascii_wctomb>:
 8009b86:	b149      	cbz	r1, 8009b9c <__ascii_wctomb+0x16>
 8009b88:	2aff      	cmp	r2, #255	; 0xff
 8009b8a:	bf85      	ittet	hi
 8009b8c:	238a      	movhi	r3, #138	; 0x8a
 8009b8e:	6003      	strhi	r3, [r0, #0]
 8009b90:	700a      	strbls	r2, [r1, #0]
 8009b92:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b96:	bf98      	it	ls
 8009b98:	2001      	movls	r0, #1
 8009b9a:	4770      	bx	lr
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4770      	bx	lr

08009ba0 <fiprintf>:
 8009ba0:	b40e      	push	{r1, r2, r3}
 8009ba2:	b503      	push	{r0, r1, lr}
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	ab03      	add	r3, sp, #12
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <fiprintf+0x20>)
 8009baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bae:	6800      	ldr	r0, [r0, #0]
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	f000 f83f 	bl	8009c34 <_vfiprintf_r>
 8009bb6:	b002      	add	sp, #8
 8009bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bbc:	b003      	add	sp, #12
 8009bbe:	4770      	bx	lr
 8009bc0:	20000070 	.word	0x20000070

08009bc4 <abort>:
 8009bc4:	b508      	push	{r3, lr}
 8009bc6:	2006      	movs	r0, #6
 8009bc8:	f000 fa0c 	bl	8009fe4 <raise>
 8009bcc:	2001      	movs	r0, #1
 8009bce:	f7f8 f925 	bl	8001e1c <_exit>

08009bd2 <_malloc_usable_size_r>:
 8009bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd6:	1f18      	subs	r0, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bfbc      	itt	lt
 8009bdc:	580b      	ldrlt	r3, [r1, r0]
 8009bde:	18c0      	addlt	r0, r0, r3
 8009be0:	4770      	bx	lr

08009be2 <__sfputc_r>:
 8009be2:	6893      	ldr	r3, [r2, #8]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	b410      	push	{r4}
 8009bea:	6093      	str	r3, [r2, #8]
 8009bec:	da08      	bge.n	8009c00 <__sfputc_r+0x1e>
 8009bee:	6994      	ldr	r4, [r2, #24]
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	db01      	blt.n	8009bf8 <__sfputc_r+0x16>
 8009bf4:	290a      	cmp	r1, #10
 8009bf6:	d103      	bne.n	8009c00 <__sfputc_r+0x1e>
 8009bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bfc:	f000 b934 	b.w	8009e68 <__swbuf_r>
 8009c00:	6813      	ldr	r3, [r2, #0]
 8009c02:	1c58      	adds	r0, r3, #1
 8009c04:	6010      	str	r0, [r2, #0]
 8009c06:	7019      	strb	r1, [r3, #0]
 8009c08:	4608      	mov	r0, r1
 8009c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <__sfputs_r>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	4606      	mov	r6, r0
 8009c14:	460f      	mov	r7, r1
 8009c16:	4614      	mov	r4, r2
 8009c18:	18d5      	adds	r5, r2, r3
 8009c1a:	42ac      	cmp	r4, r5
 8009c1c:	d101      	bne.n	8009c22 <__sfputs_r+0x12>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	e007      	b.n	8009c32 <__sfputs_r+0x22>
 8009c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c26:	463a      	mov	r2, r7
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ffda 	bl	8009be2 <__sfputc_r>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	d1f3      	bne.n	8009c1a <__sfputs_r+0xa>
 8009c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c34 <_vfiprintf_r>:
 8009c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460d      	mov	r5, r1
 8009c3a:	b09d      	sub	sp, #116	; 0x74
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	4698      	mov	r8, r3
 8009c40:	4606      	mov	r6, r0
 8009c42:	b118      	cbz	r0, 8009c4c <_vfiprintf_r+0x18>
 8009c44:	6a03      	ldr	r3, [r0, #32]
 8009c46:	b90b      	cbnz	r3, 8009c4c <_vfiprintf_r+0x18>
 8009c48:	f7fe f962 	bl	8007f10 <__sinit>
 8009c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c4e:	07d9      	lsls	r1, r3, #31
 8009c50:	d405      	bmi.n	8009c5e <_vfiprintf_r+0x2a>
 8009c52:	89ab      	ldrh	r3, [r5, #12]
 8009c54:	059a      	lsls	r2, r3, #22
 8009c56:	d402      	bmi.n	8009c5e <_vfiprintf_r+0x2a>
 8009c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5a:	f7fe fa6f 	bl	800813c <__retarget_lock_acquire_recursive>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	071b      	lsls	r3, r3, #28
 8009c62:	d501      	bpl.n	8009c68 <_vfiprintf_r+0x34>
 8009c64:	692b      	ldr	r3, [r5, #16]
 8009c66:	b99b      	cbnz	r3, 8009c90 <_vfiprintf_r+0x5c>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 f93a 	bl	8009ee4 <__swsetup_r>
 8009c70:	b170      	cbz	r0, 8009c90 <_vfiprintf_r+0x5c>
 8009c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c74:	07dc      	lsls	r4, r3, #31
 8009c76:	d504      	bpl.n	8009c82 <_vfiprintf_r+0x4e>
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	b01d      	add	sp, #116	; 0x74
 8009c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	0598      	lsls	r0, r3, #22
 8009c86:	d4f7      	bmi.n	8009c78 <_vfiprintf_r+0x44>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f7fe fa58 	bl	800813e <__retarget_lock_release_recursive>
 8009c8e:	e7f3      	b.n	8009c78 <_vfiprintf_r+0x44>
 8009c90:	2300      	movs	r3, #0
 8009c92:	9309      	str	r3, [sp, #36]	; 0x24
 8009c94:	2320      	movs	r3, #32
 8009c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c9e:	2330      	movs	r3, #48	; 0x30
 8009ca0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e54 <_vfiprintf_r+0x220>
 8009ca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca8:	f04f 0901 	mov.w	r9, #1
 8009cac:	4623      	mov	r3, r4
 8009cae:	469a      	mov	sl, r3
 8009cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb4:	b10a      	cbz	r2, 8009cba <_vfiprintf_r+0x86>
 8009cb6:	2a25      	cmp	r2, #37	; 0x25
 8009cb8:	d1f9      	bne.n	8009cae <_vfiprintf_r+0x7a>
 8009cba:	ebba 0b04 	subs.w	fp, sl, r4
 8009cbe:	d00b      	beq.n	8009cd8 <_vfiprintf_r+0xa4>
 8009cc0:	465b      	mov	r3, fp
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f7ff ffa2 	bl	8009c10 <__sfputs_r>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f000 80a9 	beq.w	8009e24 <_vfiprintf_r+0x1f0>
 8009cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd4:	445a      	add	r2, fp
 8009cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 80a1 	beq.w	8009e24 <_vfiprintf_r+0x1f0>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cec:	f10a 0a01 	add.w	sl, sl, #1
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	9307      	str	r3, [sp, #28]
 8009cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8009cfa:	4654      	mov	r4, sl
 8009cfc:	2205      	movs	r2, #5
 8009cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d02:	4854      	ldr	r0, [pc, #336]	; (8009e54 <_vfiprintf_r+0x220>)
 8009d04:	f7f6 fa9c 	bl	8000240 <memchr>
 8009d08:	9a04      	ldr	r2, [sp, #16]
 8009d0a:	b9d8      	cbnz	r0, 8009d44 <_vfiprintf_r+0x110>
 8009d0c:	06d1      	lsls	r1, r2, #27
 8009d0e:	bf44      	itt	mi
 8009d10:	2320      	movmi	r3, #32
 8009d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d16:	0713      	lsls	r3, r2, #28
 8009d18:	bf44      	itt	mi
 8009d1a:	232b      	movmi	r3, #43	; 0x2b
 8009d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d20:	f89a 3000 	ldrb.w	r3, [sl]
 8009d24:	2b2a      	cmp	r3, #42	; 0x2a
 8009d26:	d015      	beq.n	8009d54 <_vfiprintf_r+0x120>
 8009d28:	9a07      	ldr	r2, [sp, #28]
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f04f 0c0a 	mov.w	ip, #10
 8009d32:	4621      	mov	r1, r4
 8009d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d38:	3b30      	subs	r3, #48	; 0x30
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d94d      	bls.n	8009dda <_vfiprintf_r+0x1a6>
 8009d3e:	b1b0      	cbz	r0, 8009d6e <_vfiprintf_r+0x13a>
 8009d40:	9207      	str	r2, [sp, #28]
 8009d42:	e014      	b.n	8009d6e <_vfiprintf_r+0x13a>
 8009d44:	eba0 0308 	sub.w	r3, r0, r8
 8009d48:	fa09 f303 	lsl.w	r3, r9, r3
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	46a2      	mov	sl, r4
 8009d52:	e7d2      	b.n	8009cfa <_vfiprintf_r+0xc6>
 8009d54:	9b03      	ldr	r3, [sp, #12]
 8009d56:	1d19      	adds	r1, r3, #4
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	9103      	str	r1, [sp, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bfbb      	ittet	lt
 8009d60:	425b      	neglt	r3, r3
 8009d62:	f042 0202 	orrlt.w	r2, r2, #2
 8009d66:	9307      	strge	r3, [sp, #28]
 8009d68:	9307      	strlt	r3, [sp, #28]
 8009d6a:	bfb8      	it	lt
 8009d6c:	9204      	strlt	r2, [sp, #16]
 8009d6e:	7823      	ldrb	r3, [r4, #0]
 8009d70:	2b2e      	cmp	r3, #46	; 0x2e
 8009d72:	d10c      	bne.n	8009d8e <_vfiprintf_r+0x15a>
 8009d74:	7863      	ldrb	r3, [r4, #1]
 8009d76:	2b2a      	cmp	r3, #42	; 0x2a
 8009d78:	d134      	bne.n	8009de4 <_vfiprintf_r+0x1b0>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	9203      	str	r2, [sp, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfb8      	it	lt
 8009d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d8a:	3402      	adds	r4, #2
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e64 <_vfiprintf_r+0x230>
 8009d92:	7821      	ldrb	r1, [r4, #0]
 8009d94:	2203      	movs	r2, #3
 8009d96:	4650      	mov	r0, sl
 8009d98:	f7f6 fa52 	bl	8000240 <memchr>
 8009d9c:	b138      	cbz	r0, 8009dae <_vfiprintf_r+0x17a>
 8009d9e:	9b04      	ldr	r3, [sp, #16]
 8009da0:	eba0 000a 	sub.w	r0, r0, sl
 8009da4:	2240      	movs	r2, #64	; 0x40
 8009da6:	4082      	lsls	r2, r0
 8009da8:	4313      	orrs	r3, r2
 8009daa:	3401      	adds	r4, #1
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db2:	4829      	ldr	r0, [pc, #164]	; (8009e58 <_vfiprintf_r+0x224>)
 8009db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db8:	2206      	movs	r2, #6
 8009dba:	f7f6 fa41 	bl	8000240 <memchr>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d03f      	beq.n	8009e42 <_vfiprintf_r+0x20e>
 8009dc2:	4b26      	ldr	r3, [pc, #152]	; (8009e5c <_vfiprintf_r+0x228>)
 8009dc4:	bb1b      	cbnz	r3, 8009e0e <_vfiprintf_r+0x1da>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	3307      	adds	r3, #7
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	3308      	adds	r3, #8
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd4:	443b      	add	r3, r7
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	e768      	b.n	8009cac <_vfiprintf_r+0x78>
 8009dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dde:	460c      	mov	r4, r1
 8009de0:	2001      	movs	r0, #1
 8009de2:	e7a6      	b.n	8009d32 <_vfiprintf_r+0xfe>
 8009de4:	2300      	movs	r3, #0
 8009de6:	3401      	adds	r4, #1
 8009de8:	9305      	str	r3, [sp, #20]
 8009dea:	4619      	mov	r1, r3
 8009dec:	f04f 0c0a 	mov.w	ip, #10
 8009df0:	4620      	mov	r0, r4
 8009df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009df6:	3a30      	subs	r2, #48	; 0x30
 8009df8:	2a09      	cmp	r2, #9
 8009dfa:	d903      	bls.n	8009e04 <_vfiprintf_r+0x1d0>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0c6      	beq.n	8009d8e <_vfiprintf_r+0x15a>
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	e7c4      	b.n	8009d8e <_vfiprintf_r+0x15a>
 8009e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e08:	4604      	mov	r4, r0
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e7f0      	b.n	8009df0 <_vfiprintf_r+0x1bc>
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	462a      	mov	r2, r5
 8009e14:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <_vfiprintf_r+0x22c>)
 8009e16:	a904      	add	r1, sp, #16
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7fd fc55 	bl	80076c8 <_printf_float>
 8009e1e:	4607      	mov	r7, r0
 8009e20:	1c78      	adds	r0, r7, #1
 8009e22:	d1d6      	bne.n	8009dd2 <_vfiprintf_r+0x19e>
 8009e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e26:	07d9      	lsls	r1, r3, #31
 8009e28:	d405      	bmi.n	8009e36 <_vfiprintf_r+0x202>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	059a      	lsls	r2, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_vfiprintf_r+0x202>
 8009e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e32:	f7fe f984 	bl	800813e <__retarget_lock_release_recursive>
 8009e36:	89ab      	ldrh	r3, [r5, #12]
 8009e38:	065b      	lsls	r3, r3, #25
 8009e3a:	f53f af1d 	bmi.w	8009c78 <_vfiprintf_r+0x44>
 8009e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e40:	e71c      	b.n	8009c7c <_vfiprintf_r+0x48>
 8009e42:	ab03      	add	r3, sp, #12
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	462a      	mov	r2, r5
 8009e48:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <_vfiprintf_r+0x22c>)
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7fd fec3 	bl	8007bd8 <_printf_i>
 8009e52:	e7e4      	b.n	8009e1e <_vfiprintf_r+0x1ea>
 8009e54:	0800acd4 	.word	0x0800acd4
 8009e58:	0800acde 	.word	0x0800acde
 8009e5c:	080076c9 	.word	0x080076c9
 8009e60:	08009c11 	.word	0x08009c11
 8009e64:	0800acda 	.word	0x0800acda

08009e68 <__swbuf_r>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	4614      	mov	r4, r2
 8009e6e:	4605      	mov	r5, r0
 8009e70:	b118      	cbz	r0, 8009e7a <__swbuf_r+0x12>
 8009e72:	6a03      	ldr	r3, [r0, #32]
 8009e74:	b90b      	cbnz	r3, 8009e7a <__swbuf_r+0x12>
 8009e76:	f7fe f84b 	bl	8007f10 <__sinit>
 8009e7a:	69a3      	ldr	r3, [r4, #24]
 8009e7c:	60a3      	str	r3, [r4, #8]
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	071a      	lsls	r2, r3, #28
 8009e82:	d525      	bpl.n	8009ed0 <__swbuf_r+0x68>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	b31b      	cbz	r3, 8009ed0 <__swbuf_r+0x68>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	6922      	ldr	r2, [r4, #16]
 8009e8c:	1a98      	subs	r0, r3, r2
 8009e8e:	6963      	ldr	r3, [r4, #20]
 8009e90:	b2f6      	uxtb	r6, r6
 8009e92:	4283      	cmp	r3, r0
 8009e94:	4637      	mov	r7, r6
 8009e96:	dc04      	bgt.n	8009ea2 <__swbuf_r+0x3a>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f7ff fd9e 	bl	80099dc <_fflush_r>
 8009ea0:	b9e0      	cbnz	r0, 8009edc <__swbuf_r+0x74>
 8009ea2:	68a3      	ldr	r3, [r4, #8]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	60a3      	str	r3, [r4, #8]
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	6022      	str	r2, [r4, #0]
 8009eae:	701e      	strb	r6, [r3, #0]
 8009eb0:	6962      	ldr	r2, [r4, #20]
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d004      	beq.n	8009ec2 <__swbuf_r+0x5a>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	07db      	lsls	r3, r3, #31
 8009ebc:	d506      	bpl.n	8009ecc <__swbuf_r+0x64>
 8009ebe:	2e0a      	cmp	r6, #10
 8009ec0:	d104      	bne.n	8009ecc <__swbuf_r+0x64>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f7ff fd89 	bl	80099dc <_fflush_r>
 8009eca:	b938      	cbnz	r0, 8009edc <__swbuf_r+0x74>
 8009ecc:	4638      	mov	r0, r7
 8009ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 f806 	bl	8009ee4 <__swsetup_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d0d5      	beq.n	8009e88 <__swbuf_r+0x20>
 8009edc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee0:	e7f4      	b.n	8009ecc <__swbuf_r+0x64>
	...

08009ee4 <__swsetup_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4b2a      	ldr	r3, [pc, #168]	; (8009f90 <__swsetup_r+0xac>)
 8009ee8:	4605      	mov	r5, r0
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	460c      	mov	r4, r1
 8009eee:	b118      	cbz	r0, 8009ef8 <__swsetup_r+0x14>
 8009ef0:	6a03      	ldr	r3, [r0, #32]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <__swsetup_r+0x14>
 8009ef4:	f7fe f80c 	bl	8007f10 <__sinit>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009efe:	0718      	lsls	r0, r3, #28
 8009f00:	d422      	bmi.n	8009f48 <__swsetup_r+0x64>
 8009f02:	06d9      	lsls	r1, r3, #27
 8009f04:	d407      	bmi.n	8009f16 <__swsetup_r+0x32>
 8009f06:	2309      	movs	r3, #9
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f0e:	81a3      	strh	r3, [r4, #12]
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	e034      	b.n	8009f80 <__swsetup_r+0x9c>
 8009f16:	0758      	lsls	r0, r3, #29
 8009f18:	d512      	bpl.n	8009f40 <__swsetup_r+0x5c>
 8009f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1c:	b141      	cbz	r1, 8009f30 <__swsetup_r+0x4c>
 8009f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f22:	4299      	cmp	r1, r3
 8009f24:	d002      	beq.n	8009f2c <__swsetup_r+0x48>
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7fe fefe 	bl	8008d28 <_free_r>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6363      	str	r3, [r4, #52]	; 0x34
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6063      	str	r3, [r4, #4]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f043 0308 	orr.w	r3, r3, #8
 8009f46:	81a3      	strh	r3, [r4, #12]
 8009f48:	6923      	ldr	r3, [r4, #16]
 8009f4a:	b94b      	cbnz	r3, 8009f60 <__swsetup_r+0x7c>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f56:	d003      	beq.n	8009f60 <__swsetup_r+0x7c>
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f000 f884 	bl	800a068 <__smakebuf_r>
 8009f60:	89a0      	ldrh	r0, [r4, #12]
 8009f62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f66:	f010 0301 	ands.w	r3, r0, #1
 8009f6a:	d00a      	beq.n	8009f82 <__swsetup_r+0x9e>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60a3      	str	r3, [r4, #8]
 8009f70:	6963      	ldr	r3, [r4, #20]
 8009f72:	425b      	negs	r3, r3
 8009f74:	61a3      	str	r3, [r4, #24]
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	b943      	cbnz	r3, 8009f8c <__swsetup_r+0xa8>
 8009f7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f7e:	d1c4      	bne.n	8009f0a <__swsetup_r+0x26>
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	0781      	lsls	r1, r0, #30
 8009f84:	bf58      	it	pl
 8009f86:	6963      	ldrpl	r3, [r4, #20]
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	e7f4      	b.n	8009f76 <__swsetup_r+0x92>
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	e7f7      	b.n	8009f80 <__swsetup_r+0x9c>
 8009f90:	20000070 	.word	0x20000070

08009f94 <_raise_r>:
 8009f94:	291f      	cmp	r1, #31
 8009f96:	b538      	push	{r3, r4, r5, lr}
 8009f98:	4604      	mov	r4, r0
 8009f9a:	460d      	mov	r5, r1
 8009f9c:	d904      	bls.n	8009fa8 <_raise_r+0x14>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009faa:	b112      	cbz	r2, 8009fb2 <_raise_r+0x1e>
 8009fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fb0:	b94b      	cbnz	r3, 8009fc6 <_raise_r+0x32>
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f830 	bl	800a018 <_getpid_r>
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4601      	mov	r1, r0
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc2:	f000 b817 	b.w	8009ff4 <_kill_r>
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d00a      	beq.n	8009fe0 <_raise_r+0x4c>
 8009fca:	1c59      	adds	r1, r3, #1
 8009fcc:	d103      	bne.n	8009fd6 <_raise_r+0x42>
 8009fce:	2316      	movs	r3, #22
 8009fd0:	6003      	str	r3, [r0, #0]
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e7e7      	b.n	8009fa6 <_raise_r+0x12>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fdc:	4628      	mov	r0, r5
 8009fde:	4798      	blx	r3
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e7e0      	b.n	8009fa6 <_raise_r+0x12>

08009fe4 <raise>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <raise+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f7ff bfd3 	b.w	8009f94 <_raise_r>
 8009fee:	bf00      	nop
 8009ff0:	20000070 	.word	0x20000070

08009ff4 <_kill_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_kill_r+0x20>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	4611      	mov	r1, r2
 800a000:	602b      	str	r3, [r5, #0]
 800a002:	f7f7 fefb 	bl	8001dfc <_kill>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d102      	bne.n	800a010 <_kill_r+0x1c>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	b103      	cbz	r3, 800a010 <_kill_r+0x1c>
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	bd38      	pop	{r3, r4, r5, pc}
 800a012:	bf00      	nop
 800a014:	2000060c 	.word	0x2000060c

0800a018 <_getpid_r>:
 800a018:	f7f7 bee8 	b.w	8001dec <_getpid>

0800a01c <__swhatbuf_r>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	460c      	mov	r4, r1
 800a020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a024:	2900      	cmp	r1, #0
 800a026:	b096      	sub	sp, #88	; 0x58
 800a028:	4615      	mov	r5, r2
 800a02a:	461e      	mov	r6, r3
 800a02c:	da0d      	bge.n	800a04a <__swhatbuf_r+0x2e>
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a034:	f04f 0100 	mov.w	r1, #0
 800a038:	bf0c      	ite	eq
 800a03a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a03e:	2340      	movne	r3, #64	; 0x40
 800a040:	2000      	movs	r0, #0
 800a042:	6031      	str	r1, [r6, #0]
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	b016      	add	sp, #88	; 0x58
 800a048:	bd70      	pop	{r4, r5, r6, pc}
 800a04a:	466a      	mov	r2, sp
 800a04c:	f000 f848 	bl	800a0e0 <_fstat_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	dbec      	blt.n	800a02e <__swhatbuf_r+0x12>
 800a054:	9901      	ldr	r1, [sp, #4]
 800a056:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a05a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a05e:	4259      	negs	r1, r3
 800a060:	4159      	adcs	r1, r3
 800a062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a066:	e7eb      	b.n	800a040 <__swhatbuf_r+0x24>

0800a068 <__smakebuf_r>:
 800a068:	898b      	ldrh	r3, [r1, #12]
 800a06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a06c:	079d      	lsls	r5, r3, #30
 800a06e:	4606      	mov	r6, r0
 800a070:	460c      	mov	r4, r1
 800a072:	d507      	bpl.n	800a084 <__smakebuf_r+0x1c>
 800a074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	6123      	str	r3, [r4, #16]
 800a07c:	2301      	movs	r3, #1
 800a07e:	6163      	str	r3, [r4, #20]
 800a080:	b002      	add	sp, #8
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	ab01      	add	r3, sp, #4
 800a086:	466a      	mov	r2, sp
 800a088:	f7ff ffc8 	bl	800a01c <__swhatbuf_r>
 800a08c:	9900      	ldr	r1, [sp, #0]
 800a08e:	4605      	mov	r5, r0
 800a090:	4630      	mov	r0, r6
 800a092:	f7fe febd 	bl	8008e10 <_malloc_r>
 800a096:	b948      	cbnz	r0, 800a0ac <__smakebuf_r+0x44>
 800a098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09c:	059a      	lsls	r2, r3, #22
 800a09e:	d4ef      	bmi.n	800a080 <__smakebuf_r+0x18>
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	f043 0302 	orr.w	r3, r3, #2
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	e7e3      	b.n	800a074 <__smakebuf_r+0xc>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	6020      	str	r0, [r4, #0]
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	6120      	str	r0, [r4, #16]
 800a0be:	b15b      	cbz	r3, 800a0d8 <__smakebuf_r+0x70>
 800a0c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f000 f81d 	bl	800a104 <_isatty_r>
 800a0ca:	b128      	cbz	r0, 800a0d8 <__smakebuf_r+0x70>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	431d      	orrs	r5, r3
 800a0dc:	81a5      	strh	r5, [r4, #12]
 800a0de:	e7cf      	b.n	800a080 <__smakebuf_r+0x18>

0800a0e0 <_fstat_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d07      	ldr	r5, [pc, #28]	; (800a100 <_fstat_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	f7f7 fee4 	bl	8001eba <_fstat>
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d102      	bne.n	800a0fc <_fstat_r+0x1c>
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	b103      	cbz	r3, 800a0fc <_fstat_r+0x1c>
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	2000060c 	.word	0x2000060c

0800a104 <_isatty_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_isatty_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f7 fee3 	bl	8001eda <_isatty>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_isatty_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_isatty_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	2000060c 	.word	0x2000060c
 800a124:	00000000 	.word	0x00000000

0800a128 <sqrt>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	ed2d 8b04 	vpush	{d8-d9}
 800a12e:	eeb0 8b40 	vmov.f64	d8, d0
 800a132:	f000 fa9d 	bl	800a670 <__ieee754_sqrt>
 800a136:	eeb4 8b48 	vcmp.f64	d8, d8
 800a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13e:	d60c      	bvs.n	800a15a <sqrt+0x32>
 800a140:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800a160 <sqrt+0x38>
 800a144:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14c:	d505      	bpl.n	800a15a <sqrt+0x32>
 800a14e:	f7fd ffcb 	bl	80080e8 <__errno>
 800a152:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a156:	2321      	movs	r3, #33	; 0x21
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	ecbd 8b04 	vpop	{d8-d9}
 800a15e:	bd08      	pop	{r3, pc}
	...

0800a168 <checkint>:
 800a168:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a16c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800a170:	429a      	cmp	r2, r3
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	dd2a      	ble.n	800a1cc <checkint+0x64>
 800a176:	f240 4333 	movw	r3, #1075	; 0x433
 800a17a:	429a      	cmp	r2, r3
 800a17c:	dc24      	bgt.n	800a1c8 <checkint+0x60>
 800a17e:	1a9b      	subs	r3, r3, r2
 800a180:	f1a3 0620 	sub.w	r6, r3, #32
 800a184:	f04f 32ff 	mov.w	r2, #4294967295
 800a188:	fa02 f403 	lsl.w	r4, r2, r3
 800a18c:	fa02 f606 	lsl.w	r6, r2, r6
 800a190:	f1c3 0520 	rsb	r5, r3, #32
 800a194:	fa22 f505 	lsr.w	r5, r2, r5
 800a198:	4334      	orrs	r4, r6
 800a19a:	432c      	orrs	r4, r5
 800a19c:	409a      	lsls	r2, r3
 800a19e:	ea20 0202 	bic.w	r2, r0, r2
 800a1a2:	ea21 0404 	bic.w	r4, r1, r4
 800a1a6:	4322      	orrs	r2, r4
 800a1a8:	f1a3 0420 	sub.w	r4, r3, #32
 800a1ac:	f1c3 0220 	rsb	r2, r3, #32
 800a1b0:	d10c      	bne.n	800a1cc <checkint+0x64>
 800a1b2:	40d8      	lsrs	r0, r3
 800a1b4:	fa01 f302 	lsl.w	r3, r1, r2
 800a1b8:	4318      	orrs	r0, r3
 800a1ba:	40e1      	lsrs	r1, r4
 800a1bc:	4308      	orrs	r0, r1
 800a1be:	f000 0001 	and.w	r0, r0, #1
 800a1c2:	f1d0 0002 	rsbs	r0, r0, #2
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	2002      	movs	r0, #2
 800a1ca:	e7fc      	b.n	800a1c6 <checkint+0x5e>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e7fa      	b.n	800a1c6 <checkint+0x5e>

0800a1d0 <pow>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	ee10 4a90 	vmov	r4, s1
 800a1d8:	ed2d 8b0a 	vpush	{d8-d12}
 800a1dc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800a1e0:	ee11 aa90 	vmov	sl, s3
 800a1e4:	f108 32ff 	add.w	r2, r8, #4294967295
 800a1e8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	ee10 5a10 	vmov	r5, s0
 800a1f2:	ee11 0a10 	vmov	r0, s2
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	46c4      	mov	ip, r8
 800a1fa:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800a1fe:	d806      	bhi.n	800a20e <pow+0x3e>
 800a200:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800a204:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800a208:	2b7f      	cmp	r3, #127	; 0x7f
 800a20a:	f240 8156 	bls.w	800a4ba <pow+0x2ea>
 800a20e:	1802      	adds	r2, r0, r0
 800a210:	eb4a 010a 	adc.w	r1, sl, sl
 800a214:	f06f 0b01 	mvn.w	fp, #1
 800a218:	1e57      	subs	r7, r2, #1
 800a21a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a21e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800a222:	45bb      	cmp	fp, r7
 800a224:	eb7e 0303 	sbcs.w	r3, lr, r3
 800a228:	d242      	bcs.n	800a2b0 <pow+0xe0>
 800a22a:	ea52 0301 	orrs.w	r3, r2, r1
 800a22e:	f04f 0300 	mov.w	r3, #0
 800a232:	d10c      	bne.n	800a24e <pow+0x7e>
 800a234:	196d      	adds	r5, r5, r5
 800a236:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800a23a:	4164      	adcs	r4, r4
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a242:	41a3      	sbcs	r3, r4
 800a244:	f0c0 808f 	bcc.w	800a366 <pow+0x196>
 800a248:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a24c:	e02b      	b.n	800a2a6 <pow+0xd6>
 800a24e:	4ed4      	ldr	r6, [pc, #848]	; (800a5a0 <pow+0x3d0>)
 800a250:	42b4      	cmp	r4, r6
 800a252:	bf08      	it	eq
 800a254:	429d      	cmpeq	r5, r3
 800a256:	d109      	bne.n	800a26c <pow+0x9c>
 800a258:	1800      	adds	r0, r0, r0
 800a25a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800a25e:	eb4a 0a0a 	adc.w	sl, sl, sl
 800a262:	4283      	cmp	r3, r0
 800a264:	4bcf      	ldr	r3, [pc, #828]	; (800a5a4 <pow+0x3d4>)
 800a266:	eb73 030a 	sbcs.w	r3, r3, sl
 800a26a:	e7eb      	b.n	800a244 <pow+0x74>
 800a26c:	196d      	adds	r5, r5, r5
 800a26e:	48ce      	ldr	r0, [pc, #824]	; (800a5a8 <pow+0x3d8>)
 800a270:	4164      	adcs	r4, r4
 800a272:	42ab      	cmp	r3, r5
 800a274:	eb70 0604 	sbcs.w	r6, r0, r4
 800a278:	d375      	bcc.n	800a366 <pow+0x196>
 800a27a:	4281      	cmp	r1, r0
 800a27c:	bf08      	it	eq
 800a27e:	429a      	cmpeq	r2, r3
 800a280:	d171      	bne.n	800a366 <pow+0x196>
 800a282:	4aca      	ldr	r2, [pc, #808]	; (800a5ac <pow+0x3dc>)
 800a284:	4294      	cmp	r4, r2
 800a286:	bf08      	it	eq
 800a288:	429d      	cmpeq	r5, r3
 800a28a:	d0dd      	beq.n	800a248 <pow+0x78>
 800a28c:	4294      	cmp	r4, r2
 800a28e:	ea6f 0a0a 	mvn.w	sl, sl
 800a292:	bf34      	ite	cc
 800a294:	2400      	movcc	r4, #0
 800a296:	2401      	movcs	r4, #1
 800a298:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800a29c:	4554      	cmp	r4, sl
 800a29e:	f040 81dc 	bne.w	800a65a <pow+0x48a>
 800a2a2:	ee21 0b01 	vmul.f64	d0, d1, d1
 800a2a6:	b007      	add	sp, #28
 800a2a8:	ecbd 8b0a 	vpop	{d8-d12}
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	196f      	adds	r7, r5, r5
 800a2b2:	eb44 0904 	adc.w	r9, r4, r4
 800a2b6:	1e7a      	subs	r2, r7, #1
 800a2b8:	f169 0300 	sbc.w	r3, r9, #0
 800a2bc:	4593      	cmp	fp, r2
 800a2be:	eb7e 0303 	sbcs.w	r3, lr, r3
 800a2c2:	d225      	bcs.n	800a310 <pow+0x140>
 800a2c4:	ee20 0b00 	vmul.f64	d0, d0, d0
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	da13      	bge.n	800a2f4 <pow+0x124>
 800a2cc:	4651      	mov	r1, sl
 800a2ce:	f7ff ff4b 	bl	800a168 <checkint>
 800a2d2:	2801      	cmp	r0, #1
 800a2d4:	d10e      	bne.n	800a2f4 <pow+0x124>
 800a2d6:	eeb1 0b40 	vneg.f64	d0, d0
 800a2da:	ea57 0909 	orrs.w	r9, r7, r9
 800a2de:	d10b      	bne.n	800a2f8 <pow+0x128>
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	dadf      	bge.n	800a2a6 <pow+0xd6>
 800a2e6:	b007      	add	sp, #28
 800a2e8:	ecbd 8b0a 	vpop	{d8-d12}
 800a2ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	f000 b9ee 	b.w	800a6d0 <__math_divzero>
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	e7f0      	b.n	800a2da <pow+0x10a>
 800a2f8:	f1ba 0f00 	cmp.w	sl, #0
 800a2fc:	dad3      	bge.n	800a2a6 <pow+0xd6>
 800a2fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a302:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a306:	ed8d 7b00 	vstr	d7, [sp]
 800a30a:	ed9d 0b00 	vldr	d0, [sp]
 800a30e:	e7ca      	b.n	800a2a6 <pow+0xd6>
 800a310:	2c00      	cmp	r4, #0
 800a312:	da2b      	bge.n	800a36c <pow+0x19c>
 800a314:	4651      	mov	r1, sl
 800a316:	f7ff ff27 	bl	800a168 <checkint>
 800a31a:	b930      	cbnz	r0, 800a32a <pow+0x15a>
 800a31c:	b007      	add	sp, #28
 800a31e:	ecbd 8b0a 	vpop	{d8-d12}
 800a322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a326:	f000 b9eb 	b.w	800a700 <__math_invalid>
 800a32a:	1e41      	subs	r1, r0, #1
 800a32c:	4248      	negs	r0, r1
 800a32e:	4148      	adcs	r0, r1
 800a330:	0480      	lsls	r0, r0, #18
 800a332:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a336:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800a33a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800a33e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800a342:	2b7f      	cmp	r3, #127	; 0x7f
 800a344:	d92d      	bls.n	800a3a2 <pow+0x1d2>
 800a346:	4b96      	ldr	r3, [pc, #600]	; (800a5a0 <pow+0x3d0>)
 800a348:	2000      	movs	r0, #0
 800a34a:	429c      	cmp	r4, r3
 800a34c:	bf08      	it	eq
 800a34e:	4285      	cmpeq	r5, r0
 800a350:	f43f af7a 	beq.w	800a248 <pow+0x78>
 800a354:	f240 31bd 	movw	r1, #957	; 0x3bd
 800a358:	428a      	cmp	r2, r1
 800a35a:	d80c      	bhi.n	800a376 <pow+0x1a6>
 800a35c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a360:	42a8      	cmp	r0, r5
 800a362:	41a3      	sbcs	r3, r4
 800a364:	d204      	bcs.n	800a370 <pow+0x1a0>
 800a366:	ee31 0b00 	vadd.f64	d0, d1, d0
 800a36a:	e79c      	b.n	800a2a6 <pow+0xd6>
 800a36c:	2000      	movs	r0, #0
 800a36e:	e7e4      	b.n	800a33a <pow+0x16a>
 800a370:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a374:	e797      	b.n	800a2a6 <pow+0xd6>
 800a376:	2d01      	cmp	r5, #1
 800a378:	eb74 0303 	sbcs.w	r3, r4, r3
 800a37c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a380:	bf34      	ite	cc
 800a382:	2301      	movcc	r3, #1
 800a384:	2300      	movcs	r3, #0
 800a386:	4296      	cmp	r6, r2
 800a388:	bf8c      	ite	hi
 800a38a:	2600      	movhi	r6, #0
 800a38c:	2601      	movls	r6, #1
 800a38e:	42b3      	cmp	r3, r6
 800a390:	f000 809b 	beq.w	800a4ca <pow+0x2fa>
 800a394:	b007      	add	sp, #28
 800a396:	ecbd 8b0a 	vpop	{d8-d12}
 800a39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39e:	f000 b98f 	b.w	800a6c0 <__math_oflow>
 800a3a2:	f1bc 0f00 	cmp.w	ip, #0
 800a3a6:	d10b      	bne.n	800a3c0 <pow+0x1f0>
 800a3a8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800a590 <pow+0x3c0>
 800a3ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a3b0:	ec53 2b17 	vmov	r2, r3, d7
 800a3b4:	ee17 5a10 	vmov	r5, s14
 800a3b8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a3bc:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800a3c0:	4b7b      	ldr	r3, [pc, #492]	; (800a5b0 <pow+0x3e0>)
 800a3c2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a3c6:	4423      	add	r3, r4
 800a3c8:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800a3cc:	1519      	asrs	r1, r3, #20
 800a3ce:	0d1b      	lsrs	r3, r3, #20
 800a3d0:	051b      	lsls	r3, r3, #20
 800a3d2:	1ae7      	subs	r7, r4, r3
 800a3d4:	4b77      	ldr	r3, [pc, #476]	; (800a5b4 <pow+0x3e4>)
 800a3d6:	ee03 1a10 	vmov	s6, r1
 800a3da:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800a3de:	1e2e      	subs	r6, r5, #0
 800a3e0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800a3e4:	ec47 6b15 	vmov	d5, r6, r7
 800a3e8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800a3ec:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a3f0:	ed93 7b00 	vldr	d7, [r3]
 800a3f4:	ed93 5b02 	vldr	d5, [r3, #8]
 800a3f8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800a3fc:	eea3 2b07 	vfma.f64	d2, d3, d7
 800a400:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800a404:	ee36 4b02 	vadd.f64	d4, d6, d2
 800a408:	ee32 2b44 	vsub.f64	d2, d2, d4
 800a40c:	eea3 7b05 	vfma.f64	d7, d3, d5
 800a410:	ed93 5b04 	vldr	d5, [r3, #16]
 800a414:	ee32 2b06 	vadd.f64	d2, d2, d6
 800a418:	ee37 7b02 	vadd.f64	d7, d7, d2
 800a41c:	ee26 5b05 	vmul.f64	d5, d6, d5
 800a420:	ee26 0b05 	vmul.f64	d0, d6, d5
 800a424:	ee34 8b00 	vadd.f64	d8, d4, d0
 800a428:	eeb0 9b40 	vmov.f64	d9, d0
 800a42c:	ee34 4b48 	vsub.f64	d4, d4, d8
 800a430:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800a434:	ee34 ab00 	vadd.f64	d10, d4, d0
 800a438:	ed93 5b06 	vldr	d5, [r3, #24]
 800a43c:	ee26 bb00 	vmul.f64	d11, d6, d0
 800a440:	ee37 7b09 	vadd.f64	d7, d7, d9
 800a444:	ed93 4b08 	vldr	d4, [r3, #32]
 800a448:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800a44c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800a450:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a454:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800a458:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800a45c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a460:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800a464:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800a468:	eea0 4b03 	vfma.f64	d4, d0, d3
 800a46c:	eea0 5b04 	vfma.f64	d5, d0, d4
 800a470:	eeab 7b05 	vfma.f64	d7, d11, d5
 800a474:	ee38 4b07 	vadd.f64	d4, d8, d7
 800a478:	ee21 6b04 	vmul.f64	d6, d1, d4
 800a47c:	ee16 3a90 	vmov	r3, s13
 800a480:	eeb0 5b46 	vmov.f64	d5, d6
 800a484:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800a488:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800a48c:	18b2      	adds	r2, r6, r2
 800a48e:	2a3e      	cmp	r2, #62	; 0x3e
 800a490:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800a494:	ee38 8b44 	vsub.f64	d8, d8, d4
 800a498:	ee38 8b07 	vadd.f64	d8, d8, d7
 800a49c:	eea1 5b08 	vfma.f64	d5, d1, d8
 800a4a0:	d91b      	bls.n	800a4da <pow+0x30a>
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	da0b      	bge.n	800a4be <pow+0x2ee>
 800a4a6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a4aa:	ee36 0b00 	vadd.f64	d0, d6, d0
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f aef9 	beq.w	800a2a6 <pow+0xd6>
 800a4b4:	eeb1 0b40 	vneg.f64	d0, d0
 800a4b8:	e6f5      	b.n	800a2a6 <pow+0xd6>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e780      	b.n	800a3c0 <pow+0x1f0>
 800a4be:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800a4c2:	d909      	bls.n	800a4d8 <pow+0x308>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f6bf af65 	bge.w	800a394 <pow+0x1c4>
 800a4ca:	b007      	add	sp, #28
 800a4cc:	ecbd 8b0a 	vpop	{d8-d12}
 800a4d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	f000 b8ec 	b.w	800a6b0 <__math_uflow>
 800a4d8:	2600      	movs	r6, #0
 800a4da:	4937      	ldr	r1, [pc, #220]	; (800a5b8 <pow+0x3e8>)
 800a4dc:	ed91 4b02 	vldr	d4, [r1, #8]
 800a4e0:	ed91 3b00 	vldr	d3, [r1]
 800a4e4:	eeb0 7b44 	vmov.f64	d7, d4
 800a4e8:	eea6 7b03 	vfma.f64	d7, d6, d3
 800a4ec:	ee17 5a10 	vmov	r5, s14
 800a4f0:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a4f4:	ed91 4b04 	vldr	d4, [r1, #16]
 800a4f8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800a4fc:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a500:	ed91 4b06 	vldr	d4, [r1, #24]
 800a504:	18dc      	adds	r4, r3, r3
 800a506:	f104 030f 	add.w	r3, r4, #15
 800a50a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a50e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a512:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800a516:	ee35 5b06 	vadd.f64	d5, d5, d6
 800a51a:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a51e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800a522:	ed91 4b08 	vldr	d4, [r1, #32]
 800a526:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a52a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800a52e:	eea5 4b03 	vfma.f64	d4, d5, d3
 800a532:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800a536:	eea6 7b04 	vfma.f64	d7, d6, d4
 800a53a:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a53e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800a542:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800a546:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800a54a:	eea5 4b03 	vfma.f64	d4, d5, d3
 800a54e:	1940      	adds	r0, r0, r5
 800a550:	2700      	movs	r7, #0
 800a552:	eb17 020c 	adds.w	r2, r7, ip
 800a556:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800a55a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800a55e:	2e00      	cmp	r6, #0
 800a560:	d176      	bne.n	800a650 <pow+0x480>
 800a562:	42bd      	cmp	r5, r7
 800a564:	db2a      	blt.n	800a5bc <pow+0x3ec>
 800a566:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800a56a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800a56e:	4610      	mov	r0, r2
 800a570:	ec41 0b10 	vmov	d0, r0, r1
 800a574:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a578:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a598 <pow+0x3c8>
 800a57c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a580:	b007      	add	sp, #28
 800a582:	ecbd 8b0a 	vpop	{d8-d12}
 800a586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	f000 b8d1 	b.w	800a730 <__math_check_oflow>
 800a58e:	bf00      	nop
 800a590:	00000000 	.word	0x00000000
 800a594:	43300000 	.word	0x43300000
 800a598:	00000000 	.word	0x00000000
 800a59c:	7f000000 	.word	0x7f000000
 800a5a0:	3ff00000 	.word	0x3ff00000
 800a5a4:	fff00000 	.word	0xfff00000
 800a5a8:	ffe00000 	.word	0xffe00000
 800a5ac:	7fe00000 	.word	0x7fe00000
 800a5b0:	c0196aab 	.word	0xc0196aab
 800a5b4:	0800ae30 	.word	0x0800ae30
 800a5b8:	0800be78 	.word	0x0800be78
 800a5bc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a5c0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	ec41 0b15 	vmov	d5, r0, r1
 800a5ca:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800a5ce:	ee27 6b05 	vmul.f64	d6, d7, d5
 800a5d2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800a5d6:	eeb0 4bc7 	vabs.f64	d4, d7
 800a5da:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800a5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800a660 <pow+0x490>
 800a5e6:	d52a      	bpl.n	800a63e <pow+0x46e>
 800a5e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a5ec:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f4:	ee35 5b06 	vadd.f64	d5, d5, d6
 800a5f8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800a5fc:	bf58      	it	pl
 800a5fe:	eeb0 4b43 	vmovpl.f64	d4, d3
 800a602:	ee37 3b04 	vadd.f64	d3, d7, d4
 800a606:	ee34 6b43 	vsub.f64	d6, d4, d3
 800a60a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a60e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800a612:	ee36 6b03 	vadd.f64	d6, d6, d3
 800a616:	ee36 7b44 	vsub.f64	d7, d6, d4
 800a61a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	d104      	bne.n	800a62e <pow+0x45e>
 800a624:	4632      	mov	r2, r6
 800a626:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a62a:	ec43 2b17 	vmov	d7, r2, r3
 800a62e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a632:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a636:	ee26 6b00 	vmul.f64	d6, d6, d0
 800a63a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a63e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a642:	b007      	add	sp, #28
 800a644:	ecbd 8b0a 	vpop	{d8-d12}
 800a648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	f000 b867 	b.w	800a71e <__math_check_uflow>
 800a650:	ec43 2b10 	vmov	d0, r2, r3
 800a654:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a658:	e625      	b.n	800a2a6 <pow+0xd6>
 800a65a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800a668 <pow+0x498>
 800a65e:	e622      	b.n	800a2a6 <pow+0xd6>
 800a660:	00000000 	.word	0x00000000
 800a664:	00100000 	.word	0x00100000
	...

0800a670 <__ieee754_sqrt>:
 800a670:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a674:	4770      	bx	lr

0800a676 <with_errno>:
 800a676:	b513      	push	{r0, r1, r4, lr}
 800a678:	4604      	mov	r4, r0
 800a67a:	ed8d 0b00 	vstr	d0, [sp]
 800a67e:	f7fd fd33 	bl	80080e8 <__errno>
 800a682:	ed9d 0b00 	vldr	d0, [sp]
 800a686:	6004      	str	r4, [r0, #0]
 800a688:	b002      	add	sp, #8
 800a68a:	bd10      	pop	{r4, pc}

0800a68c <xflow>:
 800a68c:	b082      	sub	sp, #8
 800a68e:	b158      	cbz	r0, 800a6a8 <xflow+0x1c>
 800a690:	eeb1 7b40 	vneg.f64	d7, d0
 800a694:	ed8d 7b00 	vstr	d7, [sp]
 800a698:	ed9d 7b00 	vldr	d7, [sp]
 800a69c:	2022      	movs	r0, #34	; 0x22
 800a69e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a6a2:	b002      	add	sp, #8
 800a6a4:	f7ff bfe7 	b.w	800a676 <with_errno>
 800a6a8:	eeb0 7b40 	vmov.f64	d7, d0
 800a6ac:	e7f2      	b.n	800a694 <xflow+0x8>
	...

0800a6b0 <__math_uflow>:
 800a6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a6b8 <__math_uflow+0x8>
 800a6b4:	f7ff bfea 	b.w	800a68c <xflow>
 800a6b8:	00000000 	.word	0x00000000
 800a6bc:	10000000 	.word	0x10000000

0800a6c0 <__math_oflow>:
 800a6c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a6c8 <__math_oflow+0x8>
 800a6c4:	f7ff bfe2 	b.w	800a68c <xflow>
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	70000000 	.word	0x70000000

0800a6d0 <__math_divzero>:
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a6d8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800a6dc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800a6e0:	ed8d 7b00 	vstr	d7, [sp]
 800a6e4:	ed9d 0b00 	vldr	d0, [sp]
 800a6e8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800a6f8 <__math_divzero+0x28>
 800a6ec:	2022      	movs	r0, #34	; 0x22
 800a6ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800a6f2:	b002      	add	sp, #8
 800a6f4:	f7ff bfbf 	b.w	800a676 <with_errno>
	...

0800a700 <__math_invalid>:
 800a700:	eeb0 7b40 	vmov.f64	d7, d0
 800a704:	eeb4 7b47 	vcmp.f64	d7, d7
 800a708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800a710:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800a714:	d602      	bvs.n	800a71c <__math_invalid+0x1c>
 800a716:	2021      	movs	r0, #33	; 0x21
 800a718:	f7ff bfad 	b.w	800a676 <with_errno>
 800a71c:	4770      	bx	lr

0800a71e <__math_check_uflow>:
 800a71e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a726:	d102      	bne.n	800a72e <__math_check_uflow+0x10>
 800a728:	2022      	movs	r0, #34	; 0x22
 800a72a:	f7ff bfa4 	b.w	800a676 <with_errno>
 800a72e:	4770      	bx	lr

0800a730 <__math_check_oflow>:
 800a730:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a750 <__math_check_oflow+0x20>
 800a734:	eeb0 7bc0 	vabs.f64	d7, d0
 800a738:	eeb4 7b46 	vcmp.f64	d7, d6
 800a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a740:	dd02      	ble.n	800a748 <__math_check_oflow+0x18>
 800a742:	2022      	movs	r0, #34	; 0x22
 800a744:	f7ff bf97 	b.w	800a676 <with_errno>
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	f3af 8000 	nop.w
 800a750:	ffffffff 	.word	0xffffffff
 800a754:	7fefffff 	.word	0x7fefffff

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
