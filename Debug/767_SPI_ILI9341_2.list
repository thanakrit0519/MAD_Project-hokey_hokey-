
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f18  08009708  08009708  00019708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b620  0800b620  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b620  0800b620  0001b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b628  0800b628  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b628  0800b628  0001b628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001e0  0800b810  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  0800b810  00020584  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b1e  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e51  00000000  00000000  00037d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001185  00000000  00000000  0003d238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bff0  00000000  00000000  0003e3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dcdb  00000000  00000000  0006a3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106cf7  00000000  00000000  00088088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f00  00000000  00000000  0018ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00195c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080096f0 	.word	0x080096f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080096f0 	.word	0x080096f0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f002 fad5 	bl	8002bfc <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000658:	f001 f814 	bl	8001684 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f002 fb09 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000678:	f001 f804 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001fc 	.word	0x200001fc
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f002 fe1b 	bl	8003330 <HAL_GPIO_Init>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4ba7      	ldr	r3, [pc, #668]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aa6      	ldr	r2, [pc, #664]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4ba4      	ldr	r3, [pc, #656]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4ba1      	ldr	r3, [pc, #644]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa0      	ldr	r2, [pc, #640]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9e      	ldr	r3, [pc, #632]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b9b      	ldr	r3, [pc, #620]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a9a      	ldr	r2, [pc, #616]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b98      	ldr	r3, [pc, #608]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b95      	ldr	r3, [pc, #596]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a94      	ldr	r2, [pc, #592]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b92      	ldr	r3, [pc, #584]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b8f      	ldr	r3, [pc, #572]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8e      	ldr	r2, [pc, #568]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b8c      	ldr	r3, [pc, #560]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b89      	ldr	r3, [pc, #548]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a88      	ldr	r2, [pc, #544]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b86      	ldr	r3, [pc, #536]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b83      	ldr	r3, [pc, #524]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a82      	ldr	r2, [pc, #520]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b80      	ldr	r3, [pc, #512]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b7d      	ldr	r3, [pc, #500]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a7c      	ldr	r2, [pc, #496]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b7a      	ldr	r3, [pc, #488]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	4877      	ldr	r0, [pc, #476]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 80007ec:	f002 ff64 	bl	80036b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	4875      	ldr	r0, [pc, #468]	; (80009cc <MX_GPIO_Init+0x2bc>)
 80007f8:	f002 ff5e 	bl	80036b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4873      	ldr	r0, [pc, #460]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 8000802:	f002 ff59 	bl	80036b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	4871      	ldr	r0, [pc, #452]	; (80009d4 <MX_GPIO_Init+0x2c4>)
 800080e:	f002 ff53 	bl	80036b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, stepMotor_Pin | dirMotor_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2118      	movs	r1, #24
 8000816:	4870      	ldr	r0, [pc, #448]	; (80009d8 <MX_GPIO_Init+0x2c8>)
 8000818:	f002 ff4e 	bl	80036b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 800081c:	2314      	movs	r3, #20
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4866      	ldr	r0, [pc, #408]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 8000830:	f002 fd7e 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 8000834:	2368      	movs	r3, #104	; 0x68
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	485f      	ldr	r0, [pc, #380]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800084c:	f002 fd70 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	485b      	ldr	r0, [pc, #364]	; (80009d4 <MX_GPIO_Init+0x2c4>)
 8000866:	f002 fd63 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087a:	230b      	movs	r3, #11
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	4619      	mov	r1, r3
 8000884:	4853      	ldr	r0, [pc, #332]	; (80009d4 <MX_GPIO_Init+0x2c4>)
 8000886:	f002 fd53 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800088a:	2386      	movs	r3, #134	; 0x86
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089a:	230b      	movs	r3, #11
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	484d      	ldr	r0, [pc, #308]	; (80009dc <MX_GPIO_Init+0x2cc>)
 80008a6:	f002 fd43 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008bc:	230b      	movs	r3, #11
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4841      	ldr	r0, [pc, #260]	; (80009cc <MX_GPIO_Init+0x2bc>)
 80008c8:	f002 fd32 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80008cc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <MX_GPIO_Init+0x2bc>)
 80008e6:	f002 fd23 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	; 0x40
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4833      	ldr	r0, [pc, #204]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 8000902:	f002 fd15 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	482d      	ldr	r0, [pc, #180]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 800091a:	f002 fd09 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 800091e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4827      	ldr	r0, [pc, #156]	; (80009d4 <MX_GPIO_Init+0x2c4>)
 8000938:	f002 fcfa 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin PDPin PDPin
	 PDPin */
	GPIO_InitStruct.Pin = swMotor1_Pin | swMotor2_Pin | swPush_Pin
 800093c:	2367      	movs	r3, #103	; 0x67
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
			| leftLimitSw_Pin | rightLimitSw_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4822      	ldr	r0, [pc, #136]	; (80009d8 <MX_GPIO_Init+0x2c8>)
 8000950:	f002 fcee 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PDPin PDPin */
	GPIO_InitStruct.Pin = stepMotor_Pin | dirMotor_Pin;
 8000954:	2318      	movs	r3, #24
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x2c8>)
 800096c:	f002 fce0 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_GPIO_Init+0x2d0>)
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <MX_GPIO_Init+0x2c8>)
 8000984:	f002 fcd4 	bl	8003330 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000988:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800099a:	230b      	movs	r3, #11
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 80009a6:	f002 fcc3 	bl	8003330 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2101      	movs	r1, #1
 80009ae:	2017      	movs	r0, #23
 80009b0:	f002 fc87 	bl	80032c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b4:	2017      	movs	r0, #23
 80009b6:	f002 fca0 	bl	80032fa <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000
 80009e0:	10110000 	.word	0x10110000

080009e4 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f002 fe7c 	bl	800371c <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000a2a:	f000 fe2b 	bl	8001684 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f002 ff03 	bl	800383c <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000a3c:	f000 fe22 	bl	8001684 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f002 ff45 	bl	80038d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000a4e:	f000 fe19 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000244 	.word	0x20000244
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	00c0eaff 	.word	0x00c0eaff

08000a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_I2C_MspInit+0x7c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d128      	bne.n	8000ad8 <HAL_I2C_MspInit+0x74>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <HAL_I2C_MspInit+0x84>)
 8000abc:	f002 fc38 	bl	8003330 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_I2C_MspInit+0x80>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000af0:	f3bf 8f4f 	dsb	sy
}
 8000af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af6:	f3bf 8f6f 	isb	sy
}
 8000afa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <SCB_EnableICache+0x48>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b04:	f3bf 8f4f 	dsb	sy
}
 8000b08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b0a:	f3bf 8f6f 	isb	sy
}
 8000b0e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <SCB_EnableICache+0x48>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <SCB_EnableICache+0x48>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy
}
 8000b26:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
}
 8000b4a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b52:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0b5b      	lsrs	r3, r3, #13
 8000b58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b5c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b66:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	015a      	lsls	r2, r3, #5
 8000b6c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b70:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b76:	4911      	ldr	r1, [pc, #68]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ef      	bne.n	8000b68 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	1e5a      	subs	r2, r3, #1
 8000b8c:	60fa      	str	r2, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1e5      	bne.n	8000b5e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <SCB_EnableDCache+0x84>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba4:	f3bf 8f4f 	dsb	sy
}
 8000ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000baa:	f3bf 8f6f 	isb	sy
}
 8000bae:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000bc4:	f7ff ff92 	bl	8000aec <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000bc8:	f7ff ffb6 	bl	8000b38 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bcc:	f001 ff86 	bl	8002adc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bd0:	f000 f84e 	bl	8000c70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bd4:	f7ff fd9c 	bl	8000710 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000bd8:	f001 f826 	bl	8001c28 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8000bdc:	f000 fd8a 	bl	80016f4 <MX_SPI5_Init>
	MX_TIM1_Init();
 8000be0:	f000 ff48 	bl	8001a74 <MX_TIM1_Init>
	MX_RNG_Init();
 8000be4:	f000 fd52 	bl	800168c <MX_RNG_Init>
	MX_I2C1_Init();
 8000be8:	f7ff fefc 	bl	80009e4 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000bec:	f000 ff96 	bl	8001b1c <MX_TIM2_Init>
	MX_ADC1_Init();
 8000bf0:	f7ff fcfc 	bl	80005ec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000bf4:	f001 fb36 	bl	8002264 <ILI9341_Init>
	ILI9341_Fill_Screen(WHITE);
 8000bf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bfc:	f001 fcde 	bl	80025bc <ILI9341_Fill_Screen>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c00:	4819      	ldr	r0, [pc, #100]	; (8000c68 <main+0xa8>)
 8000c02:	f004 fc0b 	bl	800541c <HAL_TIM_Base_Start_IT>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (playState == 0) {
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <main+0xac>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <main+0x54>
			state0();
 8000c0e:	f000 f8c9 	bl	8000da4 <state0>
 8000c12:	e7f8      	b.n	8000c06 <main+0x46>
		} else if (playState == 1) {
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <main+0xac>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d102      	bne.n	8000c22 <main+0x62>
			state1();
 8000c1c:	f000 f92c 	bl	8000e78 <state1>
 8000c20:	e7f1      	b.n	8000c06 <main+0x46>
		} else if (playState == 2) {
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <main+0xac>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d102      	bne.n	8000c30 <main+0x70>
			state2();
 8000c2a:	f000 f9c1 	bl	8000fb0 <state2>
 8000c2e:	e7ea      	b.n	8000c06 <main+0x46>
		} else if (playState == 3) {
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <main+0xac>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d102      	bne.n	8000c3e <main+0x7e>
			state3();
 8000c38:	f000 fb0a 	bl	8001250 <state3>
 8000c3c:	e7e3      	b.n	8000c06 <main+0x46>
		} else if (playState == 4) {
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <main+0xac>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d102      	bne.n	8000c4c <main+0x8c>
			state4();
 8000c46:	f000 fc63 	bl	8001510 <state4>
 8000c4a:	e7dc      	b.n	8000c06 <main+0x46>
		} else if (playState == 5) {
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <main+0xac>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d102      	bne.n	8000c5a <main+0x9a>
			state5();
 8000c54:	f000 fcce 	bl	80015f4 <state5>
 8000c58:	e7d5      	b.n	8000c06 <main+0x46>
		}
		else if (playState == 6) {
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <main+0xac>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d1d1      	bne.n	8000c06 <main+0x46>
					state6();
 8000c62:	f000 fccf 	bl	8001604 <state6>
		if (playState == 0) {
 8000c66:	e7ce      	b.n	8000c06 <main+0x46>
 8000c68:	20000364 	.word	0x20000364
 8000c6c:	20000294 	.word	0x20000294

08000c70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0b8      	sub	sp, #224	; 0xe0
 8000c74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c7a:	2234      	movs	r2, #52	; 0x34
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f006 f9ab 	bl	8006fda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2290      	movs	r2, #144	; 0x90
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 f99c 	bl	8006fda <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000ca2:	f002 fe63 	bl	800396c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <SystemClock_Config+0x128>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a3b      	ldr	r2, [pc, #236]	; (8000d98 <SystemClock_Config+0x128>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <SystemClock_Config+0x128>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <SystemClock_Config+0x12c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a36      	ldr	r2, [pc, #216]	; (8000d9c <SystemClock_Config+0x12c>)
 8000cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <SystemClock_Config+0x12c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000cf8:	23c8      	movs	r3, #200	; 0xc8
 8000cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d04:	2309      	movs	r3, #9
 8000d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fe89 	bl	8003a2c <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xb4>
		Error_Handler();
 8000d20:	f000 fcb0 	bl	8001684 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000d24:	f002 fe32 	bl	800398c <HAL_PWREx_EnableOverDrive>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xc2>
		Error_Handler();
 8000d2e:	f000 fca9 	bl	8001684 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000d54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d58:	2106      	movs	r1, #6
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 f914 	bl	8003f88 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xfa>
		Error_Handler();
 8000d66:	f000 fc8d 	bl	8001684 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <SystemClock_Config+0x130>)
 8000d6c:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fb27 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x120>
		Error_Handler();
 8000d8c:	f000 fc7a 	bl	8001684 <Error_Handler>
	}
}
 8000d90:	bf00      	nop
 8000d92:	37e0      	adds	r7, #224	; 0xe0
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000
 8000da0:	00204100 	.word	0x00204100

08000da4 <state0>:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 0);
	}
	doMotor();
}

void state0() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f001 f9fc 	bl	80021a8 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Hokey Hokey", 65, 35, BLACK, 3, WHITE);
 8000db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	2303      	movs	r3, #3
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2223      	movs	r2, #35	; 0x23
 8000dbe:	2141      	movs	r1, #65	; 0x41
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <state0+0xc4>)
 8000dc2:	f001 f8f1 	bl	8001fa8 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <state0+0xc8>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d117      	bne.n	8000dfe <state0+0x5a>
		ILI9341_Draw_Rectangle(60, 70, 200, 120, RED);
 8000dce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2378      	movs	r3, #120	; 0x78
 8000dd6:	22c8      	movs	r2, #200	; 0xc8
 8000dd8:	2146      	movs	r1, #70	; 0x46
 8000dda:	203c      	movs	r0, #60	; 0x3c
 8000ddc:	f001 fcee 	bl	80027bc <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("PLAY", 105, 110, WHITE, 5, RED);
 8000de0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	2305      	movs	r3, #5
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dee:	226e      	movs	r2, #110	; 0x6e
 8000df0:	2169      	movs	r1, #105	; 0x69
 8000df2:	481f      	ldr	r0, [pc, #124]	; (8000e70 <state0+0xcc>)
 8000df4:	f001 f8d8 	bl	8001fa8 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <state0+0xc8>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8000dfe:	f001 fe5d 	bl	8002abc <TP_Touchpad_Pressed>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d02b      	beq.n	8000e60 <state0+0xbc>
		uint16_t x_pos = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000e10:	463b      	mov	r3, r7
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fd90 	bl	8002938 <TP_Read_Coordinates>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d120      	bne.n	8000e60 <state0+0xbc>
			y_pos = 240 - position_array[0];
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000e24:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 70 && y_pos <= 190 && x_pos >= 60 && x_pos <= 260) {
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	2b45      	cmp	r3, #69	; 0x45
 8000e2e:	d917      	bls.n	8000e60 <state0+0xbc>
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	2bbe      	cmp	r3, #190	; 0xbe
 8000e34:	d814      	bhi.n	8000e60 <state0+0xbc>
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	2b3b      	cmp	r3, #59	; 0x3b
 8000e3a:	d911      	bls.n	8000e60 <state0+0xbc>
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000e42:	d80d      	bhi.n	8000e60 <state0+0xbc>
				playState = 1;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <state0+0xd0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <state0+0xc8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8000e50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e54:	f001 feae 	bl	8002bb4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 8000e58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e5c:	f001 fbae 	bl	80025bc <ILI9341_Fill_Screen>
			}
		}

	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	08009708 	.word	0x08009708
 8000e6c:	20000295 	.word	0x20000295
 8000e70:	08009714 	.word	0x08009714
 8000e74:	20000294 	.word	0x20000294

08000e78 <state1>:
void state1() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f992 	bl	80021a8 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Select Mode", 65, 35, BLACK, 3, WHITE);
 8000e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2223      	movs	r2, #35	; 0x23
 8000e92:	2141      	movs	r1, #65	; 0x41
 8000e94:	4841      	ldr	r0, [pc, #260]	; (8000f9c <state1+0x124>)
 8000e96:	f001 f887 	bl	8001fa8 <ILI9341_Draw_Text>
	if (isDrawButton == 0) {
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <state1+0x128>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d12c      	bne.n	8000efc <state1+0x84>
		ILI9341_Draw_Rectangle(55, 80, 210, 50, RED);
 8000ea2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2332      	movs	r3, #50	; 0x32
 8000eaa:	22d2      	movs	r2, #210	; 0xd2
 8000eac:	2150      	movs	r1, #80	; 0x50
 8000eae:	2037      	movs	r0, #55	; 0x37
 8000eb0:	f001 fc84 	bl	80027bc <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("No time to limit", 67, 97, WHITE, 2, RED);
 8000eb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	2302      	movs	r3, #2
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec2:	2261      	movs	r2, #97	; 0x61
 8000ec4:	2143      	movs	r1, #67	; 0x43
 8000ec6:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <state1+0x12c>)
 8000ec8:	f001 f86e 	bl	8001fa8 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(55, 145, 210, 50, RED);
 8000ecc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2332      	movs	r3, #50	; 0x32
 8000ed4:	22d2      	movs	r2, #210	; 0xd2
 8000ed6:	2191      	movs	r1, #145	; 0x91
 8000ed8:	2037      	movs	r0, #55	; 0x37
 8000eda:	f001 fc6f 	bl	80027bc <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("limit time", 102, 162, WHITE, 2, RED);
 8000ede:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eec:	22a2      	movs	r2, #162	; 0xa2
 8000eee:	2166      	movs	r1, #102	; 0x66
 8000ef0:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <state1+0x130>)
 8000ef2:	f001 f859 	bl	8001fa8 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <state1+0x128>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8000efc:	f001 fdde 	bl	8002abc <TP_Touchpad_Pressed>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d046      	beq.n	8000f94 <state1+0x11c>
		uint16_t x_pos = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	80fb      	strh	r3, [r7, #6]
		uint16_t y_pos = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	80bb      	strh	r3, [r7, #4]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fd11 	bl	8002938 <TP_Read_Coordinates>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d13b      	bne.n	8000f94 <state1+0x11c>
			y_pos = 240 - position_array[0];
 8000f1c:	883b      	ldrh	r3, [r7, #0]
 8000f1e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000f22:	80bb      	strh	r3, [r7, #4]
			x_pos = position_array[1];
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	80fb      	strh	r3, [r7, #6]
			if (y_pos >= 80 && y_pos <= 130 && x_pos >= 55 && x_pos <= 265) {
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	2b4f      	cmp	r3, #79	; 0x4f
 8000f2c:	d917      	bls.n	8000f5e <state1+0xe6>
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	2b82      	cmp	r3, #130	; 0x82
 8000f32:	d814      	bhi.n	8000f5e <state1+0xe6>
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	2b36      	cmp	r3, #54	; 0x36
 8000f38:	d911      	bls.n	8000f5e <state1+0xe6>
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000f40:	d20d      	bcs.n	8000f5e <state1+0xe6>
				playState = 2;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <state1+0x134>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <state1+0x128>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8000f4e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f52:	f001 fe2f 	bl	8002bb4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 8000f56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f5a:	f001 fb2f 	bl	80025bc <ILI9341_Fill_Screen>
			}
			if (y_pos >= 145 && y_pos <= 195 && x_pos >= 55 && x_pos <= 265) {
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	2b90      	cmp	r3, #144	; 0x90
 8000f62:	d917      	bls.n	8000f94 <state1+0x11c>
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	2bc3      	cmp	r3, #195	; 0xc3
 8000f68:	d814      	bhi.n	8000f94 <state1+0x11c>
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2b36      	cmp	r3, #54	; 0x36
 8000f6e:	d911      	bls.n	8000f94 <state1+0x11c>
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8000f76:	d20d      	bcs.n	8000f94 <state1+0x11c>
				playState = 3;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <state1+0x134>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <state1+0x128>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
				HAL_Delay(400);
 8000f84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f88:	f001 fe14 	bl	8002bb4 <HAL_Delay>
				ILI9341_Fill_Screen(WHITE);
 8000f8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f90:	f001 fb14 	bl	80025bc <ILI9341_Fill_Screen>
			}
		}

	}
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800971c 	.word	0x0800971c
 8000fa0:	20000295 	.word	0x20000295
 8000fa4:	08009728 	.word	0x08009728
 8000fa8:	0800973c 	.word	0x0800973c
 8000fac:	20000294 	.word	0x20000294

08000fb0 <state2>:

void state2() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	ed2d 8b02 	vpush	{d8}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8000fba:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <state2+0x278>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d14b      	bne.n	800105a <state2+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f001 f8f0 	bl	80021a8 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select max hp", 30, 35, BLACK, 3, WHITE);
 8000fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2303      	movs	r3, #3
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2223      	movs	r2, #35	; 0x23
 8000fd6:	211e      	movs	r1, #30
 8000fd8:	4894      	ldr	r0, [pc, #592]	; (800122c <state2+0x27c>)
 8000fda:	f000 ffe5 	bl	8001fa8 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 8000fde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2328      	movs	r3, #40	; 0x28
 8000fe6:	2264      	movs	r2, #100	; 0x64
 8000fe8:	21b4      	movs	r1, #180	; 0xb4
 8000fea:	206e      	movs	r0, #110	; 0x6e
 8000fec:	f001 fbe6 	bl	80027bc <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 8000ff0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	22bb      	movs	r2, #187	; 0xbb
 8001000:	2175      	movs	r1, #117	; 0x75
 8001002:	488b      	ldr	r0, [pc, #556]	; (8001230 <state2+0x280>)
 8001004:	f000 ffd0 	bl	8001fa8 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(70, 115, 30, RED);
 8001008:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800100c:	221e      	movs	r2, #30
 800100e:	2173      	movs	r1, #115	; 0x73
 8001010:	2046      	movs	r0, #70	; 0x46
 8001012:	f000 fea6 	bl	8001d62 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 48, 108, WHITE, 2, RED);
 8001016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	2302      	movs	r3, #2
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	226c      	movs	r2, #108	; 0x6c
 8001026:	2130      	movs	r1, #48	; 0x30
 8001028:	4882      	ldr	r0, [pc, #520]	; (8001234 <state2+0x284>)
 800102a:	f000 ffbd 	bl	8001fa8 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 800102e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001032:	221e      	movs	r2, #30
 8001034:	2173      	movs	r1, #115	; 0x73
 8001036:	20fa      	movs	r0, #250	; 0xfa
 8001038:	f000 fe93 	bl	8001d62 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 800103c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800104a:	226c      	movs	r2, #108	; 0x6c
 800104c:	21f3      	movs	r1, #243	; 0xf3
 800104e:	487a      	ldr	r0, [pc, #488]	; (8001238 <state2+0x288>)
 8001050:	f000 ffaa 	bl	8001fa8 <ILI9341_Draw_Text>
		isDrawButton = 1;
 8001054:	4b74      	ldr	r3, [pc, #464]	; (8001228 <state2+0x278>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 800105a:	4b78      	ldr	r3, [pc, #480]	; (800123c <state2+0x28c>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b78      	ldr	r3, [pc, #480]	; (8001240 <state2+0x290>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d036      	beq.n	80010d4 <state2+0x124>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 8001066:	2300      	movs	r3, #0
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2350      	movs	r3, #80	; 0x50
 800106c:	2250      	movs	r2, #80	; 0x50
 800106e:	214b      	movs	r1, #75	; 0x4b
 8001070:	2078      	movs	r0, #120	; 0x78
 8001072:	f001 fba3 	bl	80027bc <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 8001076:	4b72      	ldr	r3, [pc, #456]	; (8001240 <state2+0x290>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4971      	ldr	r1, [pc, #452]	; (8001244 <state2+0x294>)
 8001080:	4618      	mov	r0, r3
 8001082:	f005 ff47 	bl	8006f14 <siprintf>
		uint8_t x = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	77fb      	strb	r3, [r7, #31]
		if (strlen(str) == 1) {
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f927 	bl	80002e0 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d10c      	bne.n	80010b2 <state2+0x102>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2304      	movs	r3, #4
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a4:	2264      	movs	r2, #100	; 0x64
 80010a6:	218a      	movs	r1, #138	; 0x8a
 80010a8:	4867      	ldr	r0, [pc, #412]	; (8001248 <state2+0x298>)
 80010aa:	f000 ff7d 	bl	8001fa8 <ILI9341_Draw_Text>
			x = 27;
 80010ae:	231b      	movs	r3, #27
 80010b0:	77fb      	strb	r3, [r7, #31]
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	3b76      	subs	r3, #118	; 0x76
 80010b6:	b2d9      	uxtb	r1, r3
 80010b8:	1d38      	adds	r0, r7, #4
 80010ba:	2300      	movs	r3, #0
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2304      	movs	r3, #4
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	2264      	movs	r2, #100	; 0x64
 80010c8:	f000 ff6e 	bl	8001fa8 <ILI9341_Draw_Text>
		lastHp = Hp;
 80010cc:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <state2+0x290>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <state2+0x28c>)
 80010d2:	801a      	strh	r2, [r3, #0]
	}
	if (TP_Touchpad_Pressed()) {
 80010d4:	f001 fcf2 	bl	8002abc <TP_Touchpad_Pressed>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 809d 	beq.w	800121a <state2+0x26a>
		uint16_t x_pos = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	83bb      	strh	r3, [r7, #28]
		uint16_t y_pos = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	837b      	strh	r3, [r7, #26]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fc24 	bl	8002938 <TP_Read_Coordinates>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f040 8091 	bne.w	800121a <state2+0x26a>
			y_pos = 240 - position_array[0];
 80010f8:	883b      	ldrh	r3, [r7, #0]
 80010fa:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80010fe:	837b      	strh	r3, [r7, #26]
			x_pos = position_array[1];
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	83bb      	strh	r3, [r7, #28]
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 8001104:	8b7b      	ldrh	r3, [r7, #26]
 8001106:	2bb3      	cmp	r3, #179	; 0xb3
 8001108:	d916      	bls.n	8001138 <state2+0x188>
 800110a:	8b7b      	ldrh	r3, [r7, #26]
 800110c:	2bdc      	cmp	r3, #220	; 0xdc
 800110e:	d813      	bhi.n	8001138 <state2+0x188>
 8001110:	8bbb      	ldrh	r3, [r7, #28]
 8001112:	2b6d      	cmp	r3, #109	; 0x6d
 8001114:	d910      	bls.n	8001138 <state2+0x188>
 8001116:	8bbb      	ldrh	r3, [r7, #28]
 8001118:	2bd2      	cmp	r3, #210	; 0xd2
 800111a:	d80d      	bhi.n	8001138 <state2+0x188>
				playState = 4;
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <state2+0x29c>)
 800111e:	2204      	movs	r2, #4
 8001120:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <state2+0x278>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
				lastHp = -1;
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <state2+0x28c>)
 800112a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112e:	801a      	strh	r2, [r3, #0]
				ILI9341_Fill_Screen(WHITE);
 8001130:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001134:	f001 fa42 	bl	80025bc <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 70, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001138:	8bbb      	ldrh	r3, [r7, #28]
 800113a:	3b46      	subs	r3, #70	; 0x46
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001144:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001148:	eeb0 0b47 	vmov.f64	d0, d7
 800114c:	f008 f80c 	bl	8009168 <pow>
 8001150:	eeb0 8b40 	vmov.f64	d8, d0
 8001154:	8b7b      	ldrh	r3, [r7, #26]
 8001156:	3b73      	subs	r3, #115	; 0x73
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001160:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001164:	eeb0 0b47 	vmov.f64	d0, d7
 8001168:	f007 fffe 	bl	8009168 <pow>
 800116c:	eeb0 7b40 	vmov.f64	d7, d0
 8001170:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001174:	eeb0 0b47 	vmov.f64	d0, d7
 8001178:	f007 ffa2 	bl	80090c0 <sqrt>
 800117c:	eeb0 7b40 	vmov.f64	d7, d0
 8001180:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8001184:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d80c      	bhi.n	80011a8 <state2+0x1f8>
				if (Hp > 1) {
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <state2+0x290>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d908      	bls.n	80011a8 <state2+0x1f8>
					Hp--;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <state2+0x290>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <state2+0x290>)
 80011a0:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f001 fd06 	bl	8002bb4 <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 80011a8:	8bbb      	ldrh	r3, [r7, #28]
 80011aa:	3bfa      	subs	r3, #250	; 0xfa
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011b4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80011b8:	eeb0 0b47 	vmov.f64	d0, d7
 80011bc:	f007 ffd4 	bl	8009168 <pow>
 80011c0:	eeb0 8b40 	vmov.f64	d8, d0
 80011c4:	8b7b      	ldrh	r3, [r7, #26]
 80011c6:	3b73      	subs	r3, #115	; 0x73
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80011d4:	eeb0 0b47 	vmov.f64	d0, d7
 80011d8:	f007 ffc6 	bl	8009168 <pow>
 80011dc:	eeb0 7b40 	vmov.f64	d7, d0
 80011e0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80011e4:	eeb0 0b47 	vmov.f64	d0, d7
 80011e8:	f007 ff6a 	bl	80090c0 <sqrt>
 80011ec:	eeb0 7b40 	vmov.f64	d7, d0
 80011f0:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80011f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d900      	bls.n	8001200 <state2+0x250>
				}
			}
		}

	}
}
 80011fe:	e00c      	b.n	800121a <state2+0x26a>
				if (Hp < 99) {
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <state2+0x290>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	2b62      	cmp	r3, #98	; 0x62
 8001206:	d808      	bhi.n	800121a <state2+0x26a>
					Hp++;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <state2+0x290>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <state2+0x290>)
 8001212:	801a      	strh	r2, [r3, #0]
					HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f001 fccd 	bl	8002bb4 <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	ecbd 8b02 	vpop	{d8}
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000295 	.word	0x20000295
 800122c:	08009748 	.word	0x08009748
 8001230:	08009758 	.word	0x08009758
 8001234:	08009760 	.word	0x08009760
 8001238:	08009768 	.word	0x08009768
 800123c:	20000296 	.word	0x20000296
 8001240:	20000000 	.word	0x20000000
 8001244:	0800976c 	.word	0x0800976c
 8001248:	08009770 	.word	0x08009770
 800124c:	20000294 	.word	0x20000294

08001250 <state3>:
void state3() {
 8001250:	b580      	push	{r7, lr}
 8001252:	ed2d 8b02 	vpush	{d8}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 800125a:	4ba0      	ldr	r3, [pc, #640]	; (80014dc <state3+0x28c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d14b      	bne.n	80012fa <state3+0xaa>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 ffa0 	bl	80021a8 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("Select time to end", 40, 35, BLACK, 2, WHITE);
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	2302      	movs	r3, #2
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	2223      	movs	r2, #35	; 0x23
 8001276:	2128      	movs	r1, #40	; 0x28
 8001278:	4899      	ldr	r0, [pc, #612]	; (80014e0 <state3+0x290>)
 800127a:	f000 fe95 	bl	8001fa8 <ILI9341_Draw_Text>
		ILI9341_Draw_Rectangle(110, 180, 100, 40, RED);
 800127e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2328      	movs	r3, #40	; 0x28
 8001286:	2264      	movs	r2, #100	; 0x64
 8001288:	21b4      	movs	r1, #180	; 0xb4
 800128a:	206e      	movs	r0, #110	; 0x6e
 800128c:	f001 fa96 	bl	80027bc <ILI9341_Draw_Rectangle>
		ILI9341_Draw_Text("start", 117, 187, WHITE, 3, RED);
 8001290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2303      	movs	r3, #3
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129e:	22bb      	movs	r2, #187	; 0xbb
 80012a0:	2175      	movs	r1, #117	; 0x75
 80012a2:	4890      	ldr	r0, [pc, #576]	; (80014e4 <state3+0x294>)
 80012a4:	f000 fe80 	bl	8001fa8 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(55, 115, 30, RED);
 80012a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ac:	221e      	movs	r2, #30
 80012ae:	2173      	movs	r1, #115	; 0x73
 80012b0:	2037      	movs	r0, #55	; 0x37
 80012b2:	f000 fd56 	bl	8001d62 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("down", 33, 108, WHITE, 2, RED);
 80012b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2302      	movs	r3, #2
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	226c      	movs	r2, #108	; 0x6c
 80012c6:	2121      	movs	r1, #33	; 0x21
 80012c8:	4887      	ldr	r0, [pc, #540]	; (80014e8 <state3+0x298>)
 80012ca:	f000 fe6d 	bl	8001fa8 <ILI9341_Draw_Text>

		ILI9341_Draw_Filled_Circle(250, 115, 30, RED);
 80012ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012d2:	221e      	movs	r2, #30
 80012d4:	2173      	movs	r1, #115	; 0x73
 80012d6:	20fa      	movs	r0, #250	; 0xfa
 80012d8:	f000 fd43 	bl	8001d62 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text("up", 243, 108, WHITE, 2, RED);
 80012dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2302      	movs	r3, #2
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ea:	226c      	movs	r2, #108	; 0x6c
 80012ec:	21f3      	movs	r1, #243	; 0xf3
 80012ee:	487f      	ldr	r0, [pc, #508]	; (80014ec <state3+0x29c>)
 80012f0:	f000 fe5a 	bl	8001fa8 <ILI9341_Draw_Text>
		isDrawButton = 1;
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <state3+0x28c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
	}
	if (lastCountPlayTime != countPlayTime) {
 80012fa:	4b7d      	ldr	r3, [pc, #500]	; (80014f0 <state3+0x2a0>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <state3+0x2a4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d040      	beq.n	8001388 <state3+0x138>
		char str[20];
		ILI9341_Draw_Rectangle(93, 75, 122, 80, BLACK);
 8001306:	2300      	movs	r3, #0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2350      	movs	r3, #80	; 0x50
 800130c:	227a      	movs	r2, #122	; 0x7a
 800130e:	214b      	movs	r1, #75	; 0x4b
 8001310:	205d      	movs	r0, #93	; 0x5d
 8001312:	f001 fa53 	bl	80027bc <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", countPlayTime);
 8001316:	4b77      	ldr	r3, [pc, #476]	; (80014f4 <state3+0x2a4>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4976      	ldr	r1, [pc, #472]	; (80014f8 <state3+0x2a8>)
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fdf8 	bl	8006f14 <siprintf>
		uint8_t x = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
		if (strlen(str) == 1) {
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ffd8 	bl	80002e0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10c      	bne.n	8001350 <state3+0x100>
			ILI9341_Draw_Text("0", 105, 100, WHITE, 4, BLACK);
 8001336:	2300      	movs	r3, #0
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2304      	movs	r3, #4
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001342:	2264      	movs	r2, #100	; 0x64
 8001344:	2169      	movs	r1, #105	; 0x69
 8001346:	486d      	ldr	r0, [pc, #436]	; (80014fc <state3+0x2ac>)
 8001348:	f000 fe2e 	bl	8001fa8 <ILI9341_Draw_Text>
			x = 27;
 800134c:	231b      	movs	r3, #27
 800134e:	77fb      	strb	r3, [r7, #31]
		}
		ILI9341_Draw_Text(str, 105 + x, 100, WHITE, 4, BLACK);
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	3369      	adds	r3, #105	; 0x69
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	1d38      	adds	r0, r7, #4
 8001358:	2300      	movs	r3, #0
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	2304      	movs	r3, #4
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	f000 fe1f 	bl	8001fa8 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("min", 160, 105, WHITE, 3, BLACK);
 800136a:	2300      	movs	r3, #0
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	2303      	movs	r3, #3
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001376:	2269      	movs	r2, #105	; 0x69
 8001378:	21a0      	movs	r1, #160	; 0xa0
 800137a:	4861      	ldr	r0, [pc, #388]	; (8001500 <state3+0x2b0>)
 800137c:	f000 fe14 	bl	8001fa8 <ILI9341_Draw_Text>
		lastCountPlayTime = countPlayTime;
 8001380:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <state3+0x2a4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5a      	ldr	r2, [pc, #360]	; (80014f0 <state3+0x2a0>)
 8001386:	6013      	str	r3, [r2, #0]
	}
	if (TP_Touchpad_Pressed()) {
 8001388:	f001 fb98 	bl	8002abc <TP_Touchpad_Pressed>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 809e 	beq.w	80014d0 <state3+0x280>
		uint16_t x_pos = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	83bb      	strh	r3, [r7, #28]
		uint16_t y_pos = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	837b      	strh	r3, [r7, #26]
		uint16_t position_array[2];

		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 800139c:	463b      	mov	r3, r7
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 faca 	bl	8002938 <TP_Read_Coordinates>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	f040 8092 	bne.w	80014d0 <state3+0x280>
			y_pos = 240 - position_array[0];
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80013b2:	837b      	strh	r3, [r7, #26]
			x_pos = position_array[1];
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	83bb      	strh	r3, [r7, #28]
			if (y_pos >= 180 && y_pos <= 220 && x_pos >= 110 && x_pos <= 210) {
 80013b8:	8b7b      	ldrh	r3, [r7, #26]
 80013ba:	2bb3      	cmp	r3, #179	; 0xb3
 80013bc:	d919      	bls.n	80013f2 <state3+0x1a2>
 80013be:	8b7b      	ldrh	r3, [r7, #26]
 80013c0:	2bdc      	cmp	r3, #220	; 0xdc
 80013c2:	d816      	bhi.n	80013f2 <state3+0x1a2>
 80013c4:	8bbb      	ldrh	r3, [r7, #28]
 80013c6:	2b6d      	cmp	r3, #109	; 0x6d
 80013c8:	d913      	bls.n	80013f2 <state3+0x1a2>
 80013ca:	8bbb      	ldrh	r3, [r7, #28]
 80013cc:	2bd2      	cmp	r3, #210	; 0xd2
 80013ce:	d810      	bhi.n	80013f2 <state3+0x1a2>
				playState = 5;
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <state3+0x2b4>)
 80013d2:	2205      	movs	r2, #5
 80013d4:	701a      	strb	r2, [r3, #0]
				isDrawButton = 0;
 80013d6:	4b41      	ldr	r3, [pc, #260]	; (80014dc <state3+0x28c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
				Hp = 0;
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <state3+0x2b8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	801a      	strh	r2, [r3, #0]
				lastHp = -1;
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <state3+0x2bc>)
 80013e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e8:	801a      	strh	r2, [r3, #0]
				ILI9341_Fill_Screen(WHITE);
 80013ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013ee:	f001 f8e5 	bl	80025bc <ILI9341_Fill_Screen>
			}
			if (sqrt(pow(x_pos - 55, 2) + pow(y_pos - 115, 2)) <= 30) {
 80013f2:	8bbb      	ldrh	r3, [r7, #28]
 80013f4:	3b37      	subs	r3, #55	; 0x37
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001402:	eeb0 0b47 	vmov.f64	d0, d7
 8001406:	f007 feaf 	bl	8009168 <pow>
 800140a:	eeb0 8b40 	vmov.f64	d8, d0
 800140e:	8b7b      	ldrh	r3, [r7, #26]
 8001410:	3b73      	subs	r3, #115	; 0x73
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800141a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800141e:	eeb0 0b47 	vmov.f64	d0, d7
 8001422:	f007 fea1 	bl	8009168 <pow>
 8001426:	eeb0 7b40 	vmov.f64	d7, d0
 800142a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800142e:	eeb0 0b47 	vmov.f64	d0, d7
 8001432:	f007 fe45 	bl	80090c0 <sqrt>
 8001436:	eeb0 7b40 	vmov.f64	d7, d0
 800143a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800143e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d80b      	bhi.n	8001460 <state3+0x210>
				if (countPlayTime > 1) {
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <state3+0x2a4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d907      	bls.n	8001460 <state3+0x210>
					countPlayTime--;
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <state3+0x2a4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <state3+0x2a4>)
 8001458:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f001 fbaa 	bl	8002bb4 <HAL_Delay>
				}
			}
			if (sqrt(pow(x_pos - 250, 2) + pow(y_pos - 115, 2)) <= 30) {
 8001460:	8bbb      	ldrh	r3, [r7, #28]
 8001462:	3bfa      	subs	r3, #250	; 0xfa
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800146c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001470:	eeb0 0b47 	vmov.f64	d0, d7
 8001474:	f007 fe78 	bl	8009168 <pow>
 8001478:	eeb0 8b40 	vmov.f64	d8, d0
 800147c:	8b7b      	ldrh	r3, [r7, #26]
 800147e:	3b73      	subs	r3, #115	; 0x73
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001488:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800148c:	eeb0 0b47 	vmov.f64	d0, d7
 8001490:	f007 fe6a 	bl	8009168 <pow>
 8001494:	eeb0 7b40 	vmov.f64	d7, d0
 8001498:	ee38 7b07 	vadd.f64	d7, d8, d7
 800149c:	eeb0 0b47 	vmov.f64	d0, d7
 80014a0:	f007 fe0e 	bl	80090c0 <sqrt>
 80014a4:	eeb0 7b40 	vmov.f64	d7, d0
 80014a8:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 80014ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	d900      	bls.n	80014b8 <state3+0x268>
				}
			}
		}

	}
}
 80014b6:	e00b      	b.n	80014d0 <state3+0x280>
				if (countPlayTime < 99) {
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <state3+0x2a4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b62      	cmp	r3, #98	; 0x62
 80014be:	d807      	bhi.n	80014d0 <state3+0x280>
					countPlayTime++;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <state3+0x2a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <state3+0x2a4>)
 80014c8:	6013      	str	r3, [r2, #0]
					HAL_Delay(100);
 80014ca:	2064      	movs	r0, #100	; 0x64
 80014cc:	f001 fb72 	bl	8002bb4 <HAL_Delay>
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	ecbd 8b02 	vpop	{d8}
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000295 	.word	0x20000295
 80014e0:	08009774 	.word	0x08009774
 80014e4:	08009758 	.word	0x08009758
 80014e8:	08009760 	.word	0x08009760
 80014ec:	08009768 	.word	0x08009768
 80014f0:	20000298 	.word	0x20000298
 80014f4:	20000004 	.word	0x20000004
 80014f8:	0800976c 	.word	0x0800976c
 80014fc:	08009770 	.word	0x08009770
 8001500:	08009788 	.word	0x08009788
 8001504:	20000294 	.word	0x20000294
 8001508:	20000000 	.word	0x20000000
 800150c:	20000296 	.word	0x20000296

08001510 <state4>:
void state4() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
	if (isDrawButton == 0) {
 8001516:	4b30      	ldr	r3, [pc, #192]	; (80015d8 <state4+0xc8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d110      	bne.n	8001540 <state4+0x30>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800151e:	2001      	movs	r0, #1
 8001520:	f000 fe42 	bl	80021a8 <ILI9341_Set_Rotation>
		ILI9341_Draw_Text("your hp", 100, 35, BLACK, 3, WHITE);
 8001524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2303      	movs	r3, #3
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	2223      	movs	r2, #35	; 0x23
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	4829      	ldr	r0, [pc, #164]	; (80015dc <state4+0xcc>)
 8001536:	f000 fd37 	bl	8001fa8 <ILI9341_Draw_Text>
		isDrawButton = 1;
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <state4+0xc8>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
	}
	if (lastHp != Hp) {
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <state4+0xd0>)
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <state4+0xd4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d036      	beq.n	80015ba <state4+0xaa>
		char str[20];
		ILI9341_Draw_Rectangle(120, 75, 80, 80, BLACK);
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2350      	movs	r3, #80	; 0x50
 8001552:	2250      	movs	r2, #80	; 0x50
 8001554:	214b      	movs	r1, #75	; 0x4b
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f001 f930 	bl	80027bc <ILI9341_Draw_Rectangle>
		sprintf(str, "%d", Hp);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <state4+0xd4>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	463b      	mov	r3, r7
 8001564:	4920      	ldr	r1, [pc, #128]	; (80015e8 <state4+0xd8>)
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fcd4 	bl	8006f14 <siprintf>
		uint8_t x = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
		if (strlen(str) == 1) {
 8001570:	463b      	mov	r3, r7
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe feb4 	bl	80002e0 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d10c      	bne.n	8001598 <state4+0x88>
			ILI9341_Draw_Text("0", 138, 100, WHITE, 4, BLACK);
 800157e:	2300      	movs	r3, #0
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2304      	movs	r3, #4
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158a:	2264      	movs	r2, #100	; 0x64
 800158c:	218a      	movs	r1, #138	; 0x8a
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <state4+0xdc>)
 8001590:	f000 fd0a 	bl	8001fa8 <ILI9341_Draw_Text>
			x = 27;
 8001594:	231b      	movs	r3, #27
 8001596:	75fb      	strb	r3, [r7, #23]
		}
		ILI9341_Draw_Text(str, 138 + x, 100, WHITE, 4, BLACK);
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	3b76      	subs	r3, #118	; 0x76
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	4638      	mov	r0, r7
 80015a0:	2300      	movs	r3, #0
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	2304      	movs	r3, #4
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ac:	2264      	movs	r2, #100	; 0x64
 80015ae:	f000 fcfb 	bl	8001fa8 <ILI9341_Draw_Text>
		lastHp = Hp;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <state4+0xd4>)
 80015b4:	881a      	ldrh	r2, [r3, #0]
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <state4+0xd0>)
 80015b8:	801a      	strh	r2, [r3, #0]
	}
	if (Hp <= 0) {
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <state4+0xd4>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <state4+0xc0>
		ILI9341_Fill_Screen(WHITE);
 80015c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015c6:	f000 fff9 	bl	80025bc <ILI9341_Fill_Screen>
		playState = 6;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <state4+0xe0>)
 80015cc:	2206      	movs	r2, #6
 80015ce:	701a      	strb	r2, [r3, #0]
	}
}
 80015d0:	bf00      	nop
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000295 	.word	0x20000295
 80015dc:	0800978c 	.word	0x0800978c
 80015e0:	20000296 	.word	0x20000296
 80015e4:	20000000 	.word	0x20000000
 80015e8:	0800976c 	.word	0x0800976c
 80015ec:	08009770 	.word	0x08009770
 80015f0:	20000294 	.word	0x20000294

080015f4 <state5>:
void state5() {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <state6>:
void state6() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("win", 100, 100, BLACK, 4, WHITE);
 800160a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2304      	movs	r3, #4
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	2264      	movs	r2, #100	; 0x64
 8001618:	2164      	movs	r1, #100	; 0x64
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <state6+0x24>)
 800161c:	f000 fcc4 	bl	8001fa8 <ILI9341_Draw_Text>
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	08009794 	.word	0x08009794

0800162c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_7) {
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	2b80      	cmp	r3, #128	; 0x80
 800163a:	d114      	bne.n	8001666 <HAL_GPIO_EXTI_Callback+0x3a>
		if (playState == 4) {
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_GPIO_EXTI_Callback+0x48>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d110      	bne.n	8001666 <HAL_GPIO_EXTI_Callback+0x3a>
			if (count - debounceSw > 200) {
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_GPIO_EXTI_Callback+0x50>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2bc8      	cmp	r3, #200	; 0xc8
 8001650:	d909      	bls.n	8001666 <HAL_GPIO_EXTI_Callback+0x3a>
				Hp--;
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_GPIO_EXTI_Callback+0x54>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_GPIO_EXTI_Callback+0x54>)
 800165c:	801a      	strh	r2, [r3, #0]
				debounceSw = count;
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_GPIO_EXTI_Callback+0x50>)
 8001664:	6013      	str	r3, [r2, #0]
			}
		}
	}
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000294 	.word	0x20000294
 8001678:	20000290 	.word	0x20000290
 800167c:	2000029c 	.word	0x2000029c
 8001680:	20000000 	.word	0x20000000

08001684 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x4>
	...

0800168c <MX_RNG_Init>:
/* USER CODE END 0 */

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_RNG_Init+0x20>)
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <MX_RNG_Init+0x24>)
 8001694:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_RNG_Init+0x20>)
 8001698:	f003 fac4 	bl	8004c24 <HAL_RNG_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_RNG_Init+0x1a>
		Error_Handler();
 80016a2:	f7ff ffef 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002a0 	.word	0x200002a0
 80016b0:	50060800 	.word	0x50060800

080016b4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

	if (rngHandle->Instance == RNG) {
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_RNG_MspInit+0x38>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_RNG_MspInit+0x2a>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_RNG_MspInit+0x3c>)
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RNG_MspInit+0x3c>)
 80016cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d0:	6353      	str	r3, [r2, #52]	; 0x34
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_RNG_MspInit+0x3c>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	50060800 	.word	0x50060800
 80016f0:	40023800 	.word	0x40023800

080016f4 <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_SPI5_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_SPI5_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI5_Init+0x74>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_SPI5_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI5_Init+0x74>)
 800170e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001712:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI5_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_SPI5_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI5_Init+0x74>)
 8001722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001726:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI5_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI5_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI5_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI5_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI5_Init+0x74>)
 8001742:	2207      	movs	r2, #7
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI5_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI5_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI5_Init+0x74>)
 8001754:	f003 fa90 	bl	8004c78 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI5_Init+0x6e>
		Error_Handler();
 800175e:	f7ff ff91 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002b0 	.word	0x200002b0
 800176c:	40015000 	.word	0x40015000

08001770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x7c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d128      	bne.n	80017e4 <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80017c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017c6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017d4:	2305      	movs	r3, #5
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_SPI_MspInit+0x84>)
 80017e0:	f001 fda6 	bl	8003330 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40015000 	.word	0x40015000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40021400 	.word	0x40021400

080017f8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x44>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x44>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x44>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x44>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x44>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x44>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <SysTick_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001844:	f001 f996 	bl	8002b74 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001850:	2080      	movs	r0, #128	; 0x80
 8001852:	f001 ff4b 	bl	80036ec <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <TIM2_IRQHandler+0x18>)
 8001862:	f003 fe53 	bl	800550c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	count++;
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <TIM2_IRQHandler+0x1c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	4a02      	ldr	r2, [pc, #8]	; (8001878 <TIM2_IRQHandler+0x1c>)
 800186e:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM2_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000364 	.word	0x20000364
 8001878:	20000290 	.word	0x20000290

0800187c <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001896:	f005 fbf3 	bl	8007080 <__errno>
 800189a:	4603      	mov	r3, r0
 800189c:	2216      	movs	r2, #22
 800189e:	601a      	str	r2, [r3, #0]
	return -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_exit>:

void _exit(int status) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe7 	bl	800188c <_kill>
	while (1) {
 80018be:	e7fe      	b.n	80018be <_exit+0x12>

080018c0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
		*ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
	}

	return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e009      	b.n	8001920 <_write+0x26>
		__io_putchar(*ptr++);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf1      	blt.n	800190c <_write+0x12>
	}
	return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_close>:

int _close(int file) {
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	return -1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_fstat>:

int _fstat(int file, struct stat *st) {
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195a:	605a      	str	r2, [r3, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file) {
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
		errno = ENOMEM;
 80019cc:	f005 fb58 	bl	8007080 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20080000 	.word	0x20080000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	20000314 	.word	0x20000314
 8001a04:	20000588 	.word	0x20000588

08001a08 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <SystemInit+0x5c>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <SystemInit+0x5c>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <SystemInit+0x60>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <SystemInit+0x60>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <SystemInit+0x60>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <SystemInit+0x60>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <SystemInit+0x60>)
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <SystemInit+0x64>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <SystemInit+0x60>)
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <SystemInit+0x68>)
 8001a3e:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <SystemInit+0x60>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <SystemInit+0x60>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x60>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SystemInit+0x5c>)
 8001a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a58:	609a      	str	r2, [r3, #8]
#endif
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	fef6ffff 	.word	0xfef6ffff
 8001a70:	24003010 	.word	0x24003010

08001a74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <MX_TIM1_Init+0xa4>)
 8001a96:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001a9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a9e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001ac2:	f003 fc53 	bl	800536c <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM1_Init+0x5c>
		Error_Handler();
 8001acc:	f7ff fdda 	bl	8001684 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001ade:	f003 fe35 	bl	800574c <HAL_TIM_ConfigClockSource>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x78>
		Error_Handler();
 8001ae8:	f7ff fdcc 	bl	8001684 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	; (8001b14 <MX_TIM1_Init+0xa0>)
 8001afe:	f004 f857 	bl	8005bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001b08:	f7ff fdbc 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000318 	.word	0x20000318
 8001b18:	40010000 	.word	0x40010000

08001b1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b40:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b48:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b52:	2263      	movs	r2, #99	; 0x63
 8001b54:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b64:	f003 fc02 	bl	800536c <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001b6e:	f7ff fd89 	bl	8001684 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b80:	f003 fde4 	bl	800574c <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0x72>
		Error_Handler();
 8001b8a:	f7ff fd7b 	bl	8001684 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM2_Init+0x98>)
 8001b9c:	f004 f808 	bl	8005bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001ba6:	f7ff fd6d 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000364 	.word	0x20000364

08001bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_TIM_Base_MspInit+0x68>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 8001be2:	e018      	b.n	8001c16 <HAL_TIM_Base_MspInit+0x5e>
	} else if (tim_baseHandle->Instance == TIM2) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d113      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0x5e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0x6c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2101      	movs	r1, #1
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f001 fb59 	bl	80032c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	201c      	movs	r0, #28
 8001c12:	f001 fb72 	bl	80032fa <HAL_NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800

08001c28 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c2e:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <MX_USART3_UART_Init+0x5c>)
 8001c30:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART3_UART_Init+0x58>)
 8001c6c:	f004 f84c 	bl	8005d08 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001c76:	f7ff fd05 	bl	8001684 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200003b0 	.word	0x200003b0
 8001c84:	40004800 	.word	0x40004800

08001c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART3) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0x7c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d128      	bne.n	8001cfc <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_MspInit+0x80>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001cda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cde:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cec:	2307      	movs	r3, #7
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_UART_MspInit+0x84>)
 8001cf8:	f001 fb1a 	bl	8003330 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40004800 	.word	0x40004800
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020c00 	.word	0x40020c00

08001d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d16:	e003      	b.n	8001d20 <LoopCopyDataInit>

08001d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d1e:	3104      	adds	r1, #4

08001d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d28:	d3f6      	bcc.n	8001d18 <CopyDataInit>
  ldr  r2, =_sbss
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d2c:	e002      	b.n	8001d34 <LoopFillZerobss>

08001d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d30:	f842 3b04 	str.w	r3, [r2], #4

08001d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d38:	d3f9      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d3a:	f7ff fe65 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3e:	f005 f9a5 	bl	800708c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d42:	f7fe ff3d 	bl	8000bc0 <main>
  bx  lr    
 8001d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d48:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001d4c:	0800b630 	.word	0x0800b630
  ldr  r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d54:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001d58:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001d5c:	20000584 	.word	0x20000584

08001d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC_IRQHandler>

08001d62 <ILI9341_Draw_Filled_Circle>:
	}
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour) {
 8001d62:	b590      	push	{r4, r7, lr}
 8001d64:	b08b      	sub	sp, #44	; 0x2c
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4604      	mov	r4, r0
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4623      	mov	r3, r4
 8001d72:	80fb      	strh	r3, [r7, #6]
 8001d74:	4603      	mov	r3, r0
 8001d76:	80bb      	strh	r3, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	f1c3 0301 	rsb	r3, r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]

	while (x >= y) {
 8001d9a:	e061      	b.n	8001e60 <ILI9341_Draw_Filled_Circle+0xfe>
		for (int i = X - x; i <= X + x; i++) {
 8001d9c:	88fa      	ldrh	r2, [r7, #6]
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e018      	b.n	8001dd8 <ILI9341_Draw_Filled_Circle+0x76>
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	b298      	uxth	r0, r3
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	f000 fc26 	bl	8002608 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	b298      	uxth	r0, r3
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	88ba      	ldrh	r2, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	883a      	ldrh	r2, [r7, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f000 fc1b 	bl	8002608 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++) {
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dde0      	ble.n	8001da6 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++) {
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e018      	b.n	8001e20 <ILI9341_Draw_Filled_Circle+0xbe>
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	b298      	uxth	r0, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	883a      	ldrh	r2, [r7, #0]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f000 fc02 	bl	8002608 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	b298      	uxth	r0, r3
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	88ba      	ldrh	r2, [r7, #4]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	883a      	ldrh	r2, [r7, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f000 fbf7 	bl	8002608 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++) {
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	4413      	add	r3, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dde0      	ble.n	8001dee <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0) {
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005a      	lsls	r2, r3, #1
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	dd09      	ble.n	8001e60 <ILI9341_Draw_Filled_Circle+0xfe>
			x--;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	4413      	add	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
	while (x >= y) {
 8001e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	da99      	bge.n	8001d9c <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	372c      	adds	r7, #44	; 0x2c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
	...

08001e74 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	71fb      	strb	r3, [r7, #7]
 8001e86:	4603      	mov	r3, r0
 8001e88:	71bb      	strb	r3, [r7, #6]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	717b      	strb	r3, [r7, #5]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ') {
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b1f      	cmp	r3, #31
 8001e9a:	d802      	bhi.n	8001ea2 <ILI9341_Draw_Char+0x2e>
		Character = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	e002      	b.n	8001ea8 <ILI9341_Draw_Char+0x34>
	} else {
		function_char -= 32;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
 8001ea4:	3b20      	subs	r3, #32
 8001ea6:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	753b      	strb	r3, [r7, #20]
 8001eac:	e012      	b.n	8001ed4 <ILI9341_Draw_Char+0x60>
		temp[k] = font[function_char][k];
 8001eae:	7dfa      	ldrb	r2, [r7, #23]
 8001eb0:	7d38      	ldrb	r0, [r7, #20]
 8001eb2:	7d39      	ldrb	r1, [r7, #20]
 8001eb4:	4c3b      	ldr	r4, [pc, #236]	; (8001fa4 <ILI9341_Draw_Char+0x130>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4423      	add	r3, r4
 8001ec0:	4403      	add	r3, r0
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	f101 0318 	add.w	r3, r1, #24
 8001ec8:	443b      	add	r3, r7
 8001eca:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8001ece:	7d3b      	ldrb	r3, [r7, #20]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	753b      	strb	r3, [r7, #20]
 8001ed4:	7d3b      	ldrb	r3, [r7, #20]
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d9e9      	bls.n	8001eae <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	b298      	uxth	r0, r3
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	b29c      	uxth	r4, r3
 8001ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4623      	mov	r3, r4
 8001efa:	f000 fc5f 	bl	80027bc <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	757b      	strb	r3, [r7, #21]
 8001f02:	e047      	b.n	8001f94 <ILI9341_Draw_Char+0x120>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	75bb      	strb	r3, [r7, #22]
 8001f08:	e03e      	b.n	8001f88 <ILI9341_Draw_Char+0x114>
			if (temp[j] & (1 << i)) {
 8001f0a:	7d7b      	ldrb	r3, [r7, #21]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	443b      	add	r3, r7
 8001f10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f14:	461a      	mov	r2, r3
 8001f16:	7dbb      	ldrb	r3, [r7, #22]
 8001f18:	fa42 f303 	asr.w	r3, r2, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d02e      	beq.n	8001f82 <ILI9341_Draw_Char+0x10e>
				if (Size == 1) {
 8001f24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d110      	bne.n	8001f4c <ILI9341_Draw_Char+0xd8>
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	7d7b      	ldrb	r3, [r7, #21]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	b298      	uxth	r0, r3
 8001f36:	797b      	ldrb	r3, [r7, #5]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	7dbb      	ldrb	r3, [r7, #22]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f000 fb5f 	bl	8002608 <ILI9341_Draw_Pixel>
 8001f4a:	e01a      	b.n	8001f82 <ILI9341_Draw_Char+0x10e>
				} else {
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	7d7b      	ldrb	r3, [r7, #21]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f56:	fb11 f303 	smulbb	r3, r1, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b298      	uxth	r0, r3
 8001f60:	797b      	ldrb	r3, [r7, #5]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	7dbb      	ldrb	r3, [r7, #22]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f6a:	fb11 f303 	smulbb	r3, r1, r3
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b299      	uxth	r1, r3
 8001f74:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001f76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	f000 fc1d 	bl	80027bc <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	3301      	adds	r3, #1
 8001f86:	75bb      	strb	r3, [r7, #22]
 8001f88:	7dbb      	ldrb	r3, [r7, #22]
 8001f8a:	2b07      	cmp	r3, #7
 8001f8c:	d9bd      	bls.n	8001f0a <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++) {
 8001f8e:	7d7b      	ldrb	r3, [r7, #21]
 8001f90:	3301      	adds	r3, #1
 8001f92:	757b      	strb	r3, [r7, #21]
 8001f94:	7d7b      	ldrb	r3, [r7, #21]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d9b4      	bls.n	8001f04 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	080097b0 	.word	0x080097b0

08001fa8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	70fb      	strb	r3, [r7, #3]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70bb      	strb	r3, [r7, #2]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	803b      	strh	r3, [r7, #0]
	while (*Text) {
 8001fc2:	e017      	b.n	8001ff4 <ILI9341_Draw_Text+0x4c>
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	7818      	ldrb	r0, [r3, #0]
 8001fcc:	883c      	ldrh	r4, [r7, #0]
 8001fce:	78ba      	ldrb	r2, [r7, #2]
 8001fd0:	78f9      	ldrb	r1, [r7, #3]
 8001fd2:	8bbb      	ldrh	r3, [r7, #28]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	8b3b      	ldrh	r3, [r7, #24]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4623      	mov	r3, r4
 8001fdc:	f7ff ff4a 	bl	8001e74 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8001fe0:	8b3b      	ldrh	r3, [r7, #24]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	70fb      	strb	r3, [r7, #3]
	while (*Text) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e3      	bne.n	8001fc4 <ILI9341_Draw_Text+0x1c>
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
	...

08002008 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 800200c:	f7ff fb72 	bl	80016f4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002010:	f7fe fb7e 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201a:	4802      	ldr	r0, [pc, #8]	; (8002024 <ILI9341_SPI_Init+0x1c>)
 800201c:	f001 fb4c 	bl	80036b8 <HAL_GPIO_WritePin>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40020800 	.word	0x40020800

08002028 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002032:	1df9      	adds	r1, r7, #7
 8002034:	2301      	movs	r3, #1
 8002036:	2201      	movs	r2, #1
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <ILI9341_SPI_Send+0x20>)
 800203a:	f002 fec8 	bl	8004dce <HAL_SPI_Transmit>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002b0 	.word	0x200002b0

0800204c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205c:	480b      	ldr	r0, [pc, #44]	; (800208c <ILI9341_Write_Command+0x40>)
 800205e:	f001 fb2b 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002068:	4808      	ldr	r0, [pc, #32]	; (800208c <ILI9341_Write_Command+0x40>)
 800206a:	f001 fb25 	bl	80036b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ffd9 	bl	8002028 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <ILI9341_Write_Command+0x40>)
 800207e:	f001 fb1b 	bl	80036b8 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020800 	.word	0x40020800

08002090 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <ILI9341_Write_Data+0x40>)
 80020a2:	f001 fb09 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <ILI9341_Write_Data+0x40>)
 80020ae:	f001 fb03 	bl	80036b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ffb7 	bl	8002028 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <ILI9341_Write_Data+0x40>)
 80020c2:	f001 faf9 	bl	80036b8 <HAL_GPIO_WritePin>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020800 	.word	0x40020800

080020d4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	80fb      	strh	r3, [r7, #6]
 80020e6:	4603      	mov	r3, r0
 80020e8:	80bb      	strh	r3, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
 80020ee:	4613      	mov	r3, r2
 80020f0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80020f2:	202a      	movs	r0, #42	; 0x2a
 80020f4:	f7ff ffaa 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ffc5 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ffc0 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b29b      	uxth	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ffb9 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ffb4 	bl	8002090 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002128:	202b      	movs	r0, #43	; 0x2b
 800212a:	f7ff ff8f 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	b29b      	uxth	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ffaa 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800213c:	88bb      	ldrh	r3, [r7, #4]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffa5 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002146:	883b      	ldrh	r3, [r7, #0]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	b29b      	uxth	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff9e 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002154:	883b      	ldrh	r3, [r7, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff99 	bl	8002090 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800215e:	202c      	movs	r0, #44	; 0x2c
 8002160:	f7ff ff74 	bl	800204c <ILI9341_Write_Command>
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}

0800216c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002176:	480b      	ldr	r0, [pc, #44]	; (80021a4 <ILI9341_Reset+0x38>)
 8002178:	f001 fa9e 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800217c:	20c8      	movs	r0, #200	; 0xc8
 800217e:	f000 fd19 	bl	8002bb4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002188:	4806      	ldr	r0, [pc, #24]	; (80021a4 <ILI9341_Reset+0x38>)
 800218a:	f001 fa95 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800218e:	20c8      	movs	r0, #200	; 0xc8
 8002190:	f000 fd10 	bl	8002bb4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219a:	4802      	ldr	r0, [pc, #8]	; (80021a4 <ILI9341_Reset+0x38>)
 800219c:	f001 fa8c 	bl	80036b8 <HAL_GPIO_WritePin>
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020800 	.word	0x40020800

080021a8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80021b6:	2036      	movs	r0, #54	; 0x36
 80021b8:	f7ff ff48 	bl	800204c <ILI9341_Write_Command>
HAL_Delay(1);
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 fcf9 	bl	8002bb4 <HAL_Delay>
	
switch(screen_rotation) 
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d837      	bhi.n	8002238 <ILI9341_Set_Rotation+0x90>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <ILI9341_Set_Rotation+0x28>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	080021f7 	.word	0x080021f7
 80021d8:	0800220d 	.word	0x0800220d
 80021dc:	08002223 	.word	0x08002223
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80021e0:	2048      	movs	r0, #72	; 0x48
 80021e2:	f7ff ff55 	bl	8002090 <ILI9341_Write_Data>
			LCD_WIDTH = ILI9341_SCREEN_HEIGHT;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <ILI9341_Set_Rotation+0x9c>)
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <ILI9341_Set_Rotation+0xa0>)
 80021ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021f2:	801a      	strh	r2, [r3, #0]
			break;
 80021f4:	e021      	b.n	800223a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80021f6:	2028      	movs	r0, #40	; 0x28
 80021f8:	f7ff ff4a 	bl	8002090 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH; //+40
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <ILI9341_Set_Rotation+0x9c>)
 80021fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002202:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 8002204:	4b10      	ldr	r3, [pc, #64]	; (8002248 <ILI9341_Set_Rotation+0xa0>)
 8002206:	22f0      	movs	r2, #240	; 0xf0
 8002208:	801a      	strh	r2, [r3, #0]
			break;
 800220a:	e016      	b.n	800223a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800220c:	2088      	movs	r0, #136	; 0x88
 800220e:	f7ff ff3f 	bl	8002090 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_HEIGHT;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <ILI9341_Set_Rotation+0x9c>)
 8002214:	22f0      	movs	r2, #240	; 0xf0
 8002216:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <ILI9341_Set_Rotation+0xa0>)
 800221a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800221e:	801a      	strh	r2, [r3, #0]
			break;
 8002220:	e00b      	b.n	800223a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002222:	20e8      	movs	r0, #232	; 0xe8
 8002224:	f7ff ff34 	bl	8002090 <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <ILI9341_Set_Rotation+0x9c>)
 800222a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800222e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <ILI9341_Set_Rotation+0xa0>)
 8002232:	22f0      	movs	r2, #240	; 0xf0
 8002234:	801a      	strh	r2, [r3, #0]
			break;
 8002236:	e000      	b.n	800223a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002238:	bf00      	nop
	}
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000000e 	.word	0x2000000e
 8002248:	2000000c 	.word	0x2000000c

0800224c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002256:	4802      	ldr	r0, [pc, #8]	; (8002260 <ILI9341_Enable+0x14>)
 8002258:	f001 fa2e 	bl	80036b8 <HAL_GPIO_WritePin>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40020800 	.word	0x40020800

08002264 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002268:	f7ff fff0 	bl	800224c <ILI9341_Enable>
ILI9341_SPI_Init();
 800226c:	f7ff fecc 	bl	8002008 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002270:	f7ff ff7c 	bl	800216c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff fee9 	bl	800204c <ILI9341_Write_Command>
HAL_Delay(1000);
 800227a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227e:	f000 fc99 	bl	8002bb4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002282:	20cb      	movs	r0, #203	; 0xcb
 8002284:	f7ff fee2 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002288:	2039      	movs	r0, #57	; 0x39
 800228a:	f7ff ff01 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800228e:	202c      	movs	r0, #44	; 0x2c
 8002290:	f7ff fefe 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff fefb 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800229a:	2034      	movs	r0, #52	; 0x34
 800229c:	f7ff fef8 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80022a0:	2002      	movs	r0, #2
 80022a2:	f7ff fef5 	bl	8002090 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80022a6:	20cf      	movs	r0, #207	; 0xcf
 80022a8:	f7ff fed0 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff feef 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80022b2:	20c1      	movs	r0, #193	; 0xc1
 80022b4:	f7ff feec 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80022b8:	2030      	movs	r0, #48	; 0x30
 80022ba:	f7ff fee9 	bl	8002090 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80022be:	20e8      	movs	r0, #232	; 0xe8
 80022c0:	f7ff fec4 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80022c4:	2085      	movs	r0, #133	; 0x85
 80022c6:	f7ff fee3 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff fee0 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80022d0:	2078      	movs	r0, #120	; 0x78
 80022d2:	f7ff fedd 	bl	8002090 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80022d6:	20ea      	movs	r0, #234	; 0xea
 80022d8:	f7ff feb8 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fed7 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff fed4 	bl	8002090 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80022e8:	20ed      	movs	r0, #237	; 0xed
 80022ea:	f7ff feaf 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80022ee:	2064      	movs	r0, #100	; 0x64
 80022f0:	f7ff fece 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fecb 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80022fa:	2012      	movs	r0, #18
 80022fc:	f7ff fec8 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002300:	2081      	movs	r0, #129	; 0x81
 8002302:	f7ff fec5 	bl	8002090 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002306:	20f7      	movs	r0, #247	; 0xf7
 8002308:	f7ff fea0 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800230c:	2020      	movs	r0, #32
 800230e:	f7ff febf 	bl	8002090 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002312:	20c0      	movs	r0, #192	; 0xc0
 8002314:	f7ff fe9a 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002318:	2023      	movs	r0, #35	; 0x23
 800231a:	f7ff feb9 	bl	8002090 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800231e:	20c1      	movs	r0, #193	; 0xc1
 8002320:	f7ff fe94 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002324:	2010      	movs	r0, #16
 8002326:	f7ff feb3 	bl	8002090 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800232a:	20c5      	movs	r0, #197	; 0xc5
 800232c:	f7ff fe8e 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002330:	203e      	movs	r0, #62	; 0x3e
 8002332:	f7ff fead 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002336:	2028      	movs	r0, #40	; 0x28
 8002338:	f7ff feaa 	bl	8002090 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800233c:	20c7      	movs	r0, #199	; 0xc7
 800233e:	f7ff fe85 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002342:	2086      	movs	r0, #134	; 0x86
 8002344:	f7ff fea4 	bl	8002090 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002348:	2036      	movs	r0, #54	; 0x36
 800234a:	f7ff fe7f 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800234e:	2048      	movs	r0, #72	; 0x48
 8002350:	f7ff fe9e 	bl	8002090 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002354:	203a      	movs	r0, #58	; 0x3a
 8002356:	f7ff fe79 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800235a:	2055      	movs	r0, #85	; 0x55
 800235c:	f7ff fe98 	bl	8002090 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002360:	20b1      	movs	r0, #177	; 0xb1
 8002362:	f7ff fe73 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff fe92 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800236c:	2018      	movs	r0, #24
 800236e:	f7ff fe8f 	bl	8002090 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002372:	20b6      	movs	r0, #182	; 0xb6
 8002374:	f7ff fe6a 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002378:	2008      	movs	r0, #8
 800237a:	f7ff fe89 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800237e:	2082      	movs	r0, #130	; 0x82
 8002380:	f7ff fe86 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002384:	2027      	movs	r0, #39	; 0x27
 8002386:	f7ff fe83 	bl	8002090 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800238a:	20f2      	movs	r0, #242	; 0xf2
 800238c:	f7ff fe5e 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fe7d 	bl	8002090 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002396:	2026      	movs	r0, #38	; 0x26
 8002398:	f7ff fe58 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fe77 	bl	8002090 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80023a2:	20e0      	movs	r0, #224	; 0xe0
 80023a4:	f7ff fe52 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80023a8:	200f      	movs	r0, #15
 80023aa:	f7ff fe71 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80023ae:	2031      	movs	r0, #49	; 0x31
 80023b0:	f7ff fe6e 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80023b4:	202b      	movs	r0, #43	; 0x2b
 80023b6:	f7ff fe6b 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80023ba:	200c      	movs	r0, #12
 80023bc:	f7ff fe68 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023c0:	200e      	movs	r0, #14
 80023c2:	f7ff fe65 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80023c6:	2008      	movs	r0, #8
 80023c8:	f7ff fe62 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80023cc:	204e      	movs	r0, #78	; 0x4e
 80023ce:	f7ff fe5f 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80023d2:	20f1      	movs	r0, #241	; 0xf1
 80023d4:	f7ff fe5c 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80023d8:	2037      	movs	r0, #55	; 0x37
 80023da:	f7ff fe59 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80023de:	2007      	movs	r0, #7
 80023e0:	f7ff fe56 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80023e4:	2010      	movs	r0, #16
 80023e6:	f7ff fe53 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80023ea:	2003      	movs	r0, #3
 80023ec:	f7ff fe50 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80023f0:	200e      	movs	r0, #14
 80023f2:	f7ff fe4d 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80023f6:	2009      	movs	r0, #9
 80023f8:	f7ff fe4a 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fe47 	bl	8002090 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002402:	20e1      	movs	r0, #225	; 0xe1
 8002404:	f7ff fe22 	bl	800204c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fe41 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800240e:	200e      	movs	r0, #14
 8002410:	f7ff fe3e 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002414:	2014      	movs	r0, #20
 8002416:	f7ff fe3b 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800241a:	2003      	movs	r0, #3
 800241c:	f7ff fe38 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002420:	2011      	movs	r0, #17
 8002422:	f7ff fe35 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002426:	2007      	movs	r0, #7
 8002428:	f7ff fe32 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800242c:	2031      	movs	r0, #49	; 0x31
 800242e:	f7ff fe2f 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002432:	20c1      	movs	r0, #193	; 0xc1
 8002434:	f7ff fe2c 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002438:	2048      	movs	r0, #72	; 0x48
 800243a:	f7ff fe29 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800243e:	2008      	movs	r0, #8
 8002440:	f7ff fe26 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002444:	200f      	movs	r0, #15
 8002446:	f7ff fe23 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800244a:	200c      	movs	r0, #12
 800244c:	f7ff fe20 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002450:	2031      	movs	r0, #49	; 0x31
 8002452:	f7ff fe1d 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002456:	2036      	movs	r0, #54	; 0x36
 8002458:	f7ff fe1a 	bl	8002090 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800245c:	200f      	movs	r0, #15
 800245e:	f7ff fe17 	bl	8002090 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002462:	2011      	movs	r0, #17
 8002464:	f7ff fdf2 	bl	800204c <ILI9341_Write_Command>
HAL_Delay(120);
 8002468:	2078      	movs	r0, #120	; 0x78
 800246a:	f000 fba3 	bl	8002bb4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800246e:	2029      	movs	r0, #41	; 0x29
 8002470:	f7ff fdec 	bl	800204c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff fe97 	bl	80021a8 <ILI9341_Set_Rotation>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002484:	b08d      	sub	sp, #52	; 0x34
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	6039      	str	r1, [r7, #0]
 800248c:	80fb      	strh	r3, [r7, #6]
 800248e:	466b      	mov	r3, sp
 8002490:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800249e:	d202      	bcs.n	80024a6 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a4:	e002      	b.n	80024ac <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80024a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	4840      	ldr	r0, [pc, #256]	; (80025b4 <ILI9341_Draw_Colour_Burst+0x134>)
 80024b4:	f001 f900 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024b8:	2200      	movs	r2, #0
 80024ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024be:	483d      	ldr	r0, [pc, #244]	; (80025b4 <ILI9341_Draw_Colour_Burst+0x134>)
 80024c0:	f001 f8fa 	bl	80036b8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80024ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d0:	460b      	mov	r3, r1
 80024d2:	3b01      	subs	r3, #1
 80024d4:	61fb      	str	r3, [r7, #28]
 80024d6:	2300      	movs	r3, #0
 80024d8:	4688      	mov	r8, r1
 80024da:	4699      	mov	r9, r3
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f0:	2300      	movs	r3, #0
 80024f2:	460c      	mov	r4, r1
 80024f4:	461d      	mov	r5, r3
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	00eb      	lsls	r3, r5, #3
 8002500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002504:	00e2      	lsls	r2, r4, #3
 8002506:	1dcb      	adds	r3, r1, #7
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	ebad 0d03 	sub.w	sp, sp, r3
 8002510:	466b      	mov	r3, sp
 8002512:	3300      	adds	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 800251a:	e00e      	b.n	800253a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	4413      	add	r3, r2
 8002522:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002526:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	3301      	adds	r3, #1
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	b2d1      	uxtb	r1, r2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	3302      	adds	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
 800253a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	429a      	cmp	r2, r3
 8002540:	d3ec      	bcc.n	800251c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002550:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	fbb3 f2f2 	udiv	r2, r3, r2
 800255a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800255c:	fb01 f202 	mul.w	r2, r1, r2
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e009      	b.n	8002584 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	b29a      	uxth	r2, r3
 8002574:	230a      	movs	r3, #10
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	480f      	ldr	r0, [pc, #60]	; (80025b8 <ILI9341_Draw_Colour_Burst+0x138>)
 800257a:	f002 fc28 	bl	8004dce <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3f1      	bcc.n	8002570 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	b29a      	uxth	r2, r3
 8002590:	230a      	movs	r3, #10
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <ILI9341_Draw_Colour_Burst+0x138>)
 8002596:	f002 fc1a 	bl	8004dce <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <ILI9341_Draw_Colour_Burst+0x134>)
 80025a2:	f001 f889 	bl	80036b8 <HAL_GPIO_WritePin>
 80025a6:	46b5      	mov	sp, r6
}
 80025a8:	bf00      	nop
 80025aa:	3734      	adds	r7, #52	; 0x34
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b2:	bf00      	nop
 80025b4:	40020800 	.word	0x40020800
 80025b8:	200002b0 	.word	0x200002b0

080025bc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <ILI9341_Fill_Screen+0x44>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <ILI9341_Fill_Screen+0x48>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fd7d 	bl	80020d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <ILI9341_Fill_Screen+0x44>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <ILI9341_Fill_Screen+0x48>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff44 	bl	8002480 <ILI9341_Draw_Colour_Burst>
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000000e 	.word	0x2000000e
 8002604:	2000000c 	.word	0x2000000c

08002608 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
 8002612:	460b      	mov	r3, r1
 8002614:	80bb      	strh	r3, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800261a:	4b64      	ldr	r3, [pc, #400]	; (80027ac <ILI9341_Draw_Pixel+0x1a4>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	429a      	cmp	r2, r3
 8002624:	f080 80be 	bcs.w	80027a4 <ILI9341_Draw_Pixel+0x19c>
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <ILI9341_Draw_Pixel+0x1a8>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	88ba      	ldrh	r2, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	f080 80b7 	bcs.w	80027a4 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800263c:	485d      	ldr	r0, [pc, #372]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800263e:	f001 f83b 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002648:	485a      	ldr	r0, [pc, #360]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800264a:	f001 f835 	bl	80036b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800264e:	202a      	movs	r0, #42	; 0x2a
 8002650:	f7ff fcea 	bl	8002028 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800265a:	4856      	ldr	r0, [pc, #344]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800265c:	f001 f82c 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002666:	4853      	ldr	r0, [pc, #332]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 8002668:	f001 f826 	bl	80036b8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800266c:	2200      	movs	r2, #0
 800266e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002672:	4850      	ldr	r0, [pc, #320]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 8002674:	f001 f820 	bl	80036b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	753b      	strb	r3, [r7, #20]
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	757b      	strb	r3, [r7, #21]
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	3301      	adds	r3, #1
 800268c:	121b      	asrs	r3, r3, #8
 800268e:	b2db      	uxtb	r3, r3
 8002690:	75bb      	strb	r3, [r7, #22]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800269c:	f107 0114 	add.w	r1, r7, #20
 80026a0:	2301      	movs	r3, #1
 80026a2:	2204      	movs	r2, #4
 80026a4:	4844      	ldr	r0, [pc, #272]	; (80027b8 <ILI9341_Draw_Pixel+0x1b0>)
 80026a6:	f002 fb92 	bl	8004dce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026aa:	2201      	movs	r2, #1
 80026ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b0:	4840      	ldr	r0, [pc, #256]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026b2:	f001 f801 	bl	80036b8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80026b6:	2200      	movs	r2, #0
 80026b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026bc:	483d      	ldr	r0, [pc, #244]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026be:	f000 fffb 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c8:	483a      	ldr	r0, [pc, #232]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026ca:	f000 fff5 	bl	80036b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80026ce:	202b      	movs	r0, #43	; 0x2b
 80026d0:	f7ff fcaa 	bl	8002028 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80026d4:	2201      	movs	r2, #1
 80026d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026da:	4836      	ldr	r0, [pc, #216]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026dc:	f000 ffec 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e6:	4833      	ldr	r0, [pc, #204]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026e8:	f000 ffe6 	bl	80036b8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f2:	4830      	ldr	r0, [pc, #192]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 80026f4:	f000 ffe0 	bl	80036b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	743b      	strb	r3, [r7, #16]
 8002702:	88bb      	ldrh	r3, [r7, #4]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	747b      	strb	r3, [r7, #17]
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	121b      	asrs	r3, r3, #8
 800270e:	b2db      	uxtb	r3, r3
 8002710:	74bb      	strb	r3, [r7, #18]
 8002712:	88bb      	ldrh	r3, [r7, #4]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3301      	adds	r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800271c:	f107 0110 	add.w	r1, r7, #16
 8002720:	2301      	movs	r3, #1
 8002722:	2204      	movs	r2, #4
 8002724:	4824      	ldr	r0, [pc, #144]	; (80027b8 <ILI9341_Draw_Pixel+0x1b0>)
 8002726:	f002 fb52 	bl	8004dce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002730:	4820      	ldr	r0, [pc, #128]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 8002732:	f000 ffc1 	bl	80036b8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	481d      	ldr	r0, [pc, #116]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800273e:	f000 ffbb 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002742:	2200      	movs	r2, #0
 8002744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002748:	481a      	ldr	r0, [pc, #104]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800274a:	f000 ffb5 	bl	80036b8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800274e:	202c      	movs	r0, #44	; 0x2c
 8002750:	f7ff fc6a 	bl	8002028 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275a:	4816      	ldr	r0, [pc, #88]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800275c:	f000 ffac 	bl	80036b8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002766:	4813      	ldr	r0, [pc, #76]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 8002768:	f000 ffa6 	bl	80036b8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002772:	4810      	ldr	r0, [pc, #64]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 8002774:	f000 ffa0 	bl	80036b8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	733b      	strb	r3, [r7, #12]
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002788:	f107 010c 	add.w	r1, r7, #12
 800278c:	2301      	movs	r3, #1
 800278e:	2202      	movs	r2, #2
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <ILI9341_Draw_Pixel+0x1b0>)
 8002792:	f002 fb1c 	bl	8004dce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002796:	2201      	movs	r2, #1
 8002798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <ILI9341_Draw_Pixel+0x1ac>)
 800279e:	f000 ff8b 	bl	80036b8 <HAL_GPIO_WritePin>
 80027a2:	e000      	b.n	80027a6 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80027a4:	bf00      	nop
	
}
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000000e 	.word	0x2000000e
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	40020800 	.word	0x40020800
 80027b8:	200002b0 	.word	0x200002b0

080027bc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4604      	mov	r4, r0
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	80fb      	strh	r3, [r7, #6]
 80027ce:	4603      	mov	r3, r0
 80027d0:	80bb      	strh	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]
 80027d6:	4613      	mov	r3, r2
 80027d8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <ILI9341_Draw_Rectangle+0xb0>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d23d      	bcs.n	8002862 <ILI9341_Draw_Rectangle+0xa6>
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <ILI9341_Draw_Rectangle+0xb4>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	88ba      	ldrh	r2, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d237      	bcs.n	8002862 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <ILI9341_Draw_Rectangle+0xb0>)
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	b292      	uxth	r2, r2
 80027fe:	4293      	cmp	r3, r2
 8002800:	dd05      	ble.n	800280e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <ILI9341_Draw_Rectangle+0xb0>)
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29a      	uxth	r2, r3
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800280e:	88ba      	ldrh	r2, [r7, #4]
 8002810:	883b      	ldrh	r3, [r7, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a16      	ldr	r2, [pc, #88]	; (8002870 <ILI9341_Draw_Rectangle+0xb4>)
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	b292      	uxth	r2, r2
 800281a:	4293      	cmp	r3, r2
 800281c:	dd05      	ble.n	800282a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <ILI9341_Draw_Rectangle+0xb4>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
 8002824:	88bb      	ldrh	r3, [r7, #4]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4413      	add	r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29c      	uxth	r4, r3
 8002836:	88ba      	ldrh	r2, [r7, #4]
 8002838:	883b      	ldrh	r3, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	88b9      	ldrh	r1, [r7, #4]
 8002844:	88f8      	ldrh	r0, [r7, #6]
 8002846:	4622      	mov	r2, r4
 8002848:	f7ff fc44 	bl	80020d4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800284c:	883b      	ldrh	r3, [r7, #0]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	461a      	mov	r2, r3
 8002856:	8b3b      	ldrh	r3, [r7, #24]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe10 	bl	8002480 <ILI9341_Draw_Colour_Burst>
 8002860:	e000      	b.n	8002864 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002862:	bf00      	nop
}
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	bf00      	nop
 800286c:	2000000e 	.word	0x2000000e
 8002870:	2000000c 	.word	0x2000000c

08002874 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 800287a:	2310      	movs	r3, #16
 800287c:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002882:	e019      	b.n	80028b8 <TP_Read+0x44>
    {
        value <<= 1;
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	2108      	movs	r1, #8
 800288e:	480e      	ldr	r0, [pc, #56]	; (80028c8 <TP_Read+0x54>)
 8002890:	f000 ff12 	bl	80036b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2108      	movs	r1, #8
 8002898:	480b      	ldr	r0, [pc, #44]	; (80028c8 <TP_Read+0x54>)
 800289a:	f000 ff0d 	bl	80036b8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800289e:	2110      	movs	r1, #16
 80028a0:	4809      	ldr	r0, [pc, #36]	; (80028c8 <TP_Read+0x54>)
 80028a2:	f000 fef1 	bl	8003688 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <TP_Read+0x3e>
        {
            value++;
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e2      	bne.n	8002884 <TP_Read+0x10>
    };

    return value;
 80028be:	88bb      	ldrh	r3, [r7, #4]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80028d6:	2308      	movs	r3, #8
 80028d8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80028da:	2200      	movs	r2, #0
 80028dc:	2108      	movs	r1, #8
 80028de:	4815      	ldr	r0, [pc, #84]	; (8002934 <TP_Write+0x68>)
 80028e0:	f000 feea 	bl	80036b8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 80028e4:	e01e      	b.n	8002924 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da05      	bge.n	80028fa <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80028ee:	2201      	movs	r2, #1
 80028f0:	2120      	movs	r1, #32
 80028f2:	4810      	ldr	r0, [pc, #64]	; (8002934 <TP_Write+0x68>)
 80028f4:	f000 fee0 	bl	80036b8 <HAL_GPIO_WritePin>
 80028f8:	e004      	b.n	8002904 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2120      	movs	r1, #32
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <TP_Write+0x68>)
 8002900:	f000 feda 	bl	80036b8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800290a:	2201      	movs	r2, #1
 800290c:	2108      	movs	r1, #8
 800290e:	4809      	ldr	r0, [pc, #36]	; (8002934 <TP_Write+0x68>)
 8002910:	f000 fed2 	bl	80036b8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002914:	2200      	movs	r2, #0
 8002916:	2108      	movs	r1, #8
 8002918:	4806      	ldr	r0, [pc, #24]	; (8002934 <TP_Write+0x68>)
 800291a:	f000 fecd 	bl	80036b8 <HAL_GPIO_WritePin>
        i--;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3b01      	subs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1dd      	bne.n	80028e6 <TP_Write+0x1a>
    };
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002940:	2201      	movs	r2, #1
 8002942:	2108      	movs	r1, #8
 8002944:	485a      	ldr	r0, [pc, #360]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 8002946:	f000 feb7 	bl	80036b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 800294a:	2201      	movs	r2, #1
 800294c:	2120      	movs	r1, #32
 800294e:	4858      	ldr	r0, [pc, #352]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 8002950:	f000 feb2 	bl	80036b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002954:	2201      	movs	r2, #1
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	4855      	ldr	r0, [pc, #340]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 800295a:	f000 fead 	bl	80036b8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002962:	2300      	movs	r3, #0
 8002964:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	484d      	ldr	r0, [pc, #308]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 800297a:	f000 fe9d 	bl	80036b8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800297e:	e023      	b.n	80029c8 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002980:	2090      	movs	r0, #144	; 0x90
 8002982:	f7ff ffa3 	bl	80028cc <TP_Write>

				rawy = TP_Read();	
 8002986:	f7ff ff75 	bl	8002874 <TP_Read>
 800298a:	4603      	mov	r3, r0
 800298c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	6a3a      	ldr	r2, [r7, #32]
 8002992:	4413      	add	r3, r2
 8002994:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 800299e:	20d0      	movs	r0, #208	; 0xd0
 80029a0:	f7ff ff94 	bl	80028cc <TP_Write>
        rawx = TP_Read();
 80029a4:	f7ff ff66 	bl	8002874 <TP_Read>
 80029a8:	4603      	mov	r3, r0
 80029aa:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80029ac:	89bb      	ldrh	r3, [r7, #12]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	4413      	add	r3, r2
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
        samples--;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3b01      	subs	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <TP_Read_Coordinates+0xa4>
 80029ce:	2104      	movs	r1, #4
 80029d0:	4837      	ldr	r0, [pc, #220]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 80029d2:	f000 fe59 	bl	8003688 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0d1      	beq.n	8002980 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	4833      	ldr	r0, [pc, #204]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 80029e2:	f000 fe69 	bl	80036b8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ec:	d14d      	bne.n	8002a8a <TP_Read_Coordinates+0x152>
 80029ee:	2104      	movs	r1, #4
 80029f0:	482f      	ldr	r0, [pc, #188]	; (8002ab0 <TP_Read_Coordinates+0x178>)
 80029f2:	f000 fe49 	bl	8003688 <HAL_GPIO_ReadPin>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d146      	bne.n	8002a8a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002a18:	89bb      	ldrh	r3, [r7, #12]
 8002a1a:	425b      	negs	r3, r3
 8002a1c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	425b      	negs	r3, r3
 8002a22:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002a24:	89ba      	ldrh	r2, [r7, #12]
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <TP_Read_Coordinates+0x17c>)
 8002a28:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2c:	1ad2      	subs	r2, r2, r3
 8002a2e:	0852      	lsrs	r2, r2, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a42:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002aa8 <TP_Read_Coordinates+0x170>
 8002a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a4e:	ee17 3a90 	vmov	r3, s15
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <TP_Read_Coordinates+0x180>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	09db      	lsrs	r3, r3, #7
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b0f      	subs	r3, #15
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002a6e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002aa8 <TP_Read_Coordinates+0x170>
 8002a72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002a7e:	ee17 2a90 	vmov	r2, s15
 8002a82:	b292      	uxth	r2, r2
 8002a84:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002a86:	2301      	movs	r3, #1
 8002a88:	e007      	b.n	8002a9a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3302      	adds	r3, #2
 8002a94:	2200      	movs	r2, #0
 8002a96:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002a98:	2300      	movs	r3, #0
		}
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	28f5c28f 	.word	0x28f5c28f
 8002aac:	3ff28f5c 	.word	0x3ff28f5c
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	e01e01e1 	.word	0xe01e01e1
 8002ab8:	a0a0a0a1 	.word	0xa0a0a0a1

08002abc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <TP_Touchpad_Pressed+0x1c>)
 8002ac4:	f000 fde0 	bl	8003688 <HAL_GPIO_ReadPin>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002ad2:	2300      	movs	r3, #0
	}
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_Init+0x34>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_Init+0x34>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_Init+0x34>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_Init+0x34>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af8:	2003      	movs	r0, #3
 8002afa:	f000 fbd7 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f808 	bl	8002b14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b04:	f7fe fe78 	bl	80017f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x54>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_InitTick+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fbef 	bl	8003316 <HAL_SYSTICK_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00e      	b.n	8002b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d80a      	bhi.n	8002b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f000 fbb7 	bl	80032c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <HAL_InitTick+0x5c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	20000014 	.word	0x20000014
 8002b70:	20000010 	.word	0x20000010

08002b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x20>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_IncTick+0x24>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_IncTick+0x24>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000014 	.word	0x20000014
 8002b98:	20000434 	.word	0x20000434

08002b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_GetTick+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000434 	.word	0x20000434

08002bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff ffee 	bl	8002b9c <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d005      	beq.n	8002bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <HAL_Delay+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bda:	bf00      	nop
 8002bdc:	f7ff ffde 	bl	8002b9c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8f7      	bhi.n	8002bdc <HAL_Delay+0x28>
  {
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000014 	.word	0x20000014

08002bfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e031      	b.n	8002c76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd fd38 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_ADC_Init+0x84>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f964 	bl	8002f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	f043 0201 	orr.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
 8002c66:	e001      	b.n	8002c6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	ffffeefd 	.word	0xffffeefd

08002c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e12a      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x272>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d93a      	bls.n	8002d26 <HAL_ADC_ConfigChannel+0xa2>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb8:	d035      	beq.n	8002d26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68d9      	ldr	r1, [r3, #12]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b1e      	subs	r3, #30
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	400a      	ands	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_ADC_ConfigChannel+0x280>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10a      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68d9      	ldr	r1, [r3, #12]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	061a      	lsls	r2, r3, #24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cfe:	e035      	b.n	8002d6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68d9      	ldr	r1, [r3, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4403      	add	r3, r0
 8002d18:	3b1e      	subs	r3, #30
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d24:	e022      	b.n	8002d6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6919      	ldr	r1, [r3, #16]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43da      	mvns	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	400a      	ands	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6919      	ldr	r1, [r3, #16]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4403      	add	r3, r0
 8002d62:	409a      	lsls	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d824      	bhi.n	8002dbe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	3b05      	subs	r3, #5
 8002d86:	221f      	movs	r2, #31
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	400a      	ands	r2, r1
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b05      	subs	r3, #5
 8002db0:	fa00 f203 	lsl.w	r2, r0, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
 8002dbc:	e04c      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d824      	bhi.n	8002e10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b23      	subs	r3, #35	; 0x23
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b23      	subs	r3, #35	; 0x23
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	e023      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b41      	subs	r3, #65	; 0x41
 8002e22:	221f      	movs	r2, #31
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	400a      	ands	r2, r1
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b41      	subs	r3, #65	; 0x41
 8002e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <HAL_ADC_ConfigChannel+0x284>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10a      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1f4>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e6a:	d105      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002e72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_ADC_ConfigChannel+0x284>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d109      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x212>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b12      	cmp	r3, #18
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_ADC_ConfigChannel+0x284>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d125      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x268>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_ADC_ConfigChannel+0x280>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x22e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b11      	cmp	r3, #17
 8002eb0:	d11c      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a15      	ldr	r2, [pc, #84]	; (8002f0c <HAL_ADC_ConfigChannel+0x288>)
 8002eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ebc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_ADC_ConfigChannel+0x280>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d111      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_ADC_ConfigChannel+0x28c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_ADC_ConfigChannel+0x290>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9a      	lsrs	r2, r3, #18
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ede:	e002      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f9      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	10000012 	.word	0x10000012
 8002f08:	40012000 	.word	0x40012000
 8002f0c:	40012300 	.word	0x40012300
 8002f10:	20000008 	.word	0x20000008
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f20:	4b78      	ldr	r3, [pc, #480]	; (8003104 <ADC_Init+0x1ec>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a77      	ldr	r2, [pc, #476]	; (8003104 <ADC_Init+0x1ec>)
 8002f26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f2c:	4b75      	ldr	r3, [pc, #468]	; (8003104 <ADC_Init+0x1ec>)
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4973      	ldr	r1, [pc, #460]	; (8003104 <ADC_Init+0x1ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	021a      	lsls	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	4a58      	ldr	r2, [pc, #352]	; (8003108 <ADC_Init+0x1f0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d022      	beq.n	8002ff2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6899      	ldr	r1, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e00f      	b.n	8003012 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003000:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0202 	bic.w	r2, r2, #2
 8003020:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	005a      	lsls	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800305e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	3b01      	subs	r3, #1
 800306c:	035a      	lsls	r2, r3, #13
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e007      	b.n	8003088 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	051a      	lsls	r2, r3, #20
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	025a      	lsls	r2, r3, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	029a      	lsls	r2, r3, #10
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40012300 	.word	0x40012300
 8003108:	0f000001 	.word	0x0f000001

0800310c <__NVIC_SetPriorityGrouping>:
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x40>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00
 8003150:	05fa0000 	.word	0x05fa0000

08003154 <__NVIC_GetPriorityGrouping>:
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d4:	f7ff ff3e 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f7ff ff8e 	bl	8003200 <NVIC_EncodePriority>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff5d 	bl	80031ac <__NVIC_SetPriority>
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff31 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ffa2 	bl	8003268 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e175      	b.n	800363c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8164 	bne.w	8003636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d00b      	beq.n	800338e <HAL_GPIO_Init+0x5e>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003382:	2b11      	cmp	r3, #17
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b12      	cmp	r3, #18
 800338c:	d130      	bne.n	80033f0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 0201 	and.w	r2, r3, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x100>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b12      	cmp	r3, #18
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80be 	beq.w	8003636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034d2:	4a61      	ldr	r2, [pc, #388]	; (8003658 <HAL_GPIO_Init+0x328>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a58      	ldr	r2, [pc, #352]	; (800365c <HAL_GPIO_Init+0x32c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d037      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_GPIO_Init+0x330>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_GPIO_Init+0x334>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a55      	ldr	r2, [pc, #340]	; (8003668 <HAL_GPIO_Init+0x338>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_GPIO_Init+0x33c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a53      	ldr	r2, [pc, #332]	; (8003670 <HAL_GPIO_Init+0x340>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_GPIO_Init+0x344>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a51      	ldr	r2, [pc, #324]	; (8003678 <HAL_GPIO_Init+0x348>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a50      	ldr	r2, [pc, #320]	; (800367c <HAL_GPIO_Init+0x34c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4f      	ldr	r2, [pc, #316]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x21a>
 8003546:	2309      	movs	r3, #9
 8003548:	e012      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354a:	230a      	movs	r3, #10
 800354c:	e010      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354e:	2308      	movs	r3, #8
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003552:	2307      	movs	r3, #7
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003580:	4935      	ldr	r1, [pc, #212]	; (8003658 <HAL_GPIO_Init+0x328>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358e:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_GPIO_Init+0x354>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800360c:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_GPIO_Init+0x354>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <HAL_GPIO_Init+0x354>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae86 	bls.w	8003350 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40013800 	.word	0x40013800
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020800 	.word	0x40020800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40021400 	.word	0x40021400
 8003674:	40021800 	.word	0x40021800
 8003678:	40021c00 	.word	0x40021c00
 800367c:	40022000 	.word	0x40022000
 8003680:	40022400 	.word	0x40022400
 8003684:	40013c00 	.word	0x40013c00

08003688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e001      	b.n	80036aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	807b      	strh	r3, [r7, #2]
 80036c4:	4613      	mov	r3, r2
 80036c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c8:	787b      	ldrb	r3, [r7, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036d4:	e003      	b.n	80036de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	041a      	lsls	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	619a      	str	r2, [r3, #24]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003702:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd ff8e 	bl	800162c <HAL_GPIO_EXTI_Callback>
  }
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40013c00 	.word	0x40013c00

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f98e 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800376c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e006      	b.n	80037a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d104      	bne.n	80037b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_I2C_Init+0x11c>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	ea42 0103 	orr.w	r1, r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69d9      	ldr	r1, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	02008000 	.word	0x02008000

0800383c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b20      	cmp	r3, #32
 8003850:	d138      	bne.n	80038c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800385c:	2302      	movs	r3, #2
 800385e:	e032      	b.n	80038c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800388e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d139      	bne.n	800395c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e033      	b.n	800395e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2224      	movs	r2, #36	; 0x24
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a04      	ldr	r2, [pc, #16]	; (8003988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40007000 	.word	0x40007000

0800398c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_PWREx_EnableOverDrive+0x98>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_PWREx_EnableOverDrive+0x98>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ba:	f7ff f8ef 	bl	8002b9c <HAL_GetTick>
 80039be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039c0:	e009      	b.n	80039d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039c2:	f7ff f8eb 	bl	8002b9c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d0:	d901      	bls.n	80039d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e022      	b.n	8003a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e2:	d1ee      	bne.n	80039c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039f0:	f7ff f8d4 	bl	8002b9c <HAL_GetTick>
 80039f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039f6:	e009      	b.n	8003a0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039f8:	f7ff f8d0 	bl	8002b9c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a06:	d901      	bls.n	8003a0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e007      	b.n	8003a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a18:	d1ee      	bne.n	80039f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e29b      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8087 	beq.w	8003b5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a50:	4b96      	ldr	r3, [pc, #600]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d00c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a5c:	4b93      	ldr	r3, [pc, #588]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d112      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62>
 8003a68:	4b90      	ldr	r3, [pc, #576]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a74:	d10b      	bne.n	8003a8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a76:	4b8d      	ldr	r3, [pc, #564]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d06c      	beq.n	8003b5c <HAL_RCC_OscConfig+0x130>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d168      	bne.n	8003b5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e275      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x7a>
 8003a98:	4b84      	ldr	r3, [pc, #528]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a83      	ldr	r2, [pc, #524]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e02e      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x9c>
 8003aae:	4b7f      	ldr	r3, [pc, #508]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7e      	ldr	r2, [pc, #504]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b7c      	ldr	r3, [pc, #496]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7b      	ldr	r2, [pc, #492]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e01d      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003ad2:	4b76      	ldr	r3, [pc, #472]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a72      	ldr	r2, [pc, #456]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0xd8>
 8003aec:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b6c      	ldr	r3, [pc, #432]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6b      	ldr	r2, [pc, #428]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7ff f846 	bl	8002b9c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7ff f842 	bl	8002b9c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e229      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b61      	ldr	r3, [pc, #388]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7ff f832 	bl	8002b9c <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7ff f82e 	bl	8002b9c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e215      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	4b57      	ldr	r3, [pc, #348]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x110>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d069      	beq.n	8003c3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6a:	4b50      	ldr	r3, [pc, #320]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x190>
 8003b82:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1e9      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	493d      	ldr	r1, [pc, #244]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	e040      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b39      	ldr	r3, [pc, #228]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe ffe4 	bl	8002b9c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fe ffe0 	bl	8002b9c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4929      	ldr	r1, [pc, #164]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe ffc0 	bl	8002b9c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fe ffbc 	bl	8002b9c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1a3      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d038      	beq.n	8003cbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d019      	beq.n	8003c86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	4a15      	ldr	r2, [pc, #84]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe ff9d 	bl	8002b9c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fe ff99 	bl	8002b9c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e180      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x23a>
 8003c84:	e01a      	b.n	8003cbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <HAL_RCC_OscConfig+0x280>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c92:	f7fe ff83 	bl	8002b9c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe ff7f 	bl	8002b9c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d903      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e166      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
 8003cac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b92      	ldr	r3, [pc, #584]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ee      	bne.n	8003c9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a4 	beq.w	8003e12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cca:	4b8c      	ldr	r3, [pc, #560]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	4b89      	ldr	r3, [pc, #548]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a88      	ldr	r2, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b86      	ldr	r3, [pc, #536]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf2:	4b83      	ldr	r3, [pc, #524]	; (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d118      	bne.n	8003d30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cfe:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7f      	ldr	r2, [pc, #508]	; (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0a:	f7fe ff47 	bl	8002b9c <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7fe ff43 	bl	8002b9c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	; 0x64
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e12a      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d24:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x4d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_OscConfig+0x31a>
 8003d38:	4b70      	ldr	r3, [pc, #448]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a6f      	ldr	r2, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	e02d      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x33c>
 8003d4e:	4b6b      	ldr	r3, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a6a      	ldr	r2, [pc, #424]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	4b68      	ldr	r3, [pc, #416]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a67      	ldr	r2, [pc, #412]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	e01c      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d10c      	bne.n	8003d8a <HAL_RCC_OscConfig+0x35e>
 8003d70:	4b62      	ldr	r3, [pc, #392]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a61      	ldr	r2, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	f043 0304 	orr.w	r3, r3, #4
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a5e      	ldr	r2, [pc, #376]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	e00b      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d015      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fe fef7 	bl	8002b9c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fe fef3 	bl	8002b9c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0d8      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCC_OscConfig+0x386>
 8003dd4:	e014      	b.n	8003e00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fee1 	bl	8002b9c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fe fedd 	bl	8002b9c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0c2      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ee      	bne.n	8003dde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80ae 	beq.w	8003f78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e1c:	4b37      	ldr	r3, [pc, #220]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d06d      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d14b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe feae 	bl	8002b9c <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe feaa 	bl	8002b9c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e091      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	4b29      	ldr	r3, [pc, #164]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	491b      	ldr	r1, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe fe7c 	bl	8002b9c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe fe78 	bl	8002b9c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e05f      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
 8003ec6:	e057      	b.n	8003f78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fe62 	bl	8002b9c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fe5e 	bl	8002b9c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x4b0>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x54c>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <HAL_RCC_OscConfig+0x558>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d030      	beq.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d129      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d122      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f34:	4013      	ands	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d119      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d10f      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0d0      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d910      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 020f 	bic.w	r2, r3, #15
 8003fb6:	4965      	ldr	r1, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d040      	beq.n	80040ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d115      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b41      	ldr	r3, [pc, #260]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e073      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3d      	ldr	r3, [pc, #244]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e06b      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b39      	ldr	r3, [pc, #228]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4936      	ldr	r1, [pc, #216]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fe fd8e 	bl	8002b9c <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fe fd8a 	bl	8002b9c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e053      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d210      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4922      	ldr	r1, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	490a      	ldr	r1, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1cc>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1d0>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1d4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fcea 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08009798 	.word	0x08009798
 8004158:	20000008 	.word	0x20000008
 800415c:	20000010 	.word	0x20000010

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b094      	sub	sp, #80	; 0x50
 8004166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	2300      	movs	r3, #0
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	2300      	movs	r3, #0
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4b79      	ldr	r3, [pc, #484]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d00d      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 80e1 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3a>
 8004192:	e0db      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b73      	ldr	r3, [pc, #460]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004198:	e0db      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419a:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_GetSysClockFreq+0x208>)
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419e:	e0d8      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	f04f 0000 	mov.w	r0, #0
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	0159      	lsls	r1, r3, #5
 80041e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e4:	0150      	lsls	r0, r2, #5
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4621      	mov	r1, r4
 80041ec:	1a51      	subs	r1, r2, r1
 80041ee:	6139      	str	r1, [r7, #16]
 80041f0:	4629      	mov	r1, r5
 80041f2:	eb63 0301 	sbc.w	r3, r3, r1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004204:	4659      	mov	r1, fp
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800420e:	4651      	mov	r1, sl
 8004210:	018a      	lsls	r2, r1, #6
 8004212:	4651      	mov	r1, sl
 8004214:	ebb2 0801 	subs.w	r8, r2, r1
 8004218:	4659      	mov	r1, fp
 800421a:	eb63 0901 	sbc.w	r9, r3, r1
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
 8004236:	4623      	mov	r3, r4
 8004238:	eb18 0303 	adds.w	r3, r8, r3
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	462b      	mov	r3, r5
 8004240:	eb49 0303 	adc.w	r3, r9, r3
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004252:	4629      	mov	r1, r5
 8004254:	024b      	lsls	r3, r1, #9
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800425c:	4621      	mov	r1, r4
 800425e:	024a      	lsls	r2, r1, #9
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004266:	2200      	movs	r2, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 800426a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800426c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004270:	f7fc f83e 	bl	80002f0 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	e058      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	4618      	mov	r0, r3
 8004288:	4611      	mov	r1, r2
 800428a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	0159      	lsls	r1, r3, #5
 80042a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042aa:	0150      	lsls	r0, r2, #5
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4641      	mov	r1, r8
 80042b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042d0:	ebb2 040a 	subs.w	r4, r2, sl
 80042d4:	eb63 050b 	sbc.w	r5, r3, fp
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	00eb      	lsls	r3, r5, #3
 80042e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e6:	00e2      	lsls	r2, r4, #3
 80042e8:	4614      	mov	r4, r2
 80042ea:	461d      	mov	r5, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	18e3      	adds	r3, r4, r3
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb45 0303 	adc.w	r3, r5, r3
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	2200      	movs	r2, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	61fa      	str	r2, [r7, #28]
 8004320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004324:	f7fb ffe4 	bl	80002f0 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004354:	4618      	mov	r0, r3
 8004356:	3750      	adds	r7, #80	; 0x50
 8004358:	46bd      	mov	sp, r7
 800435a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	007a1200 	.word	0x007a1200

0800436c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000008 	.word	0x20000008

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	080097a8 	.word	0x080097a8

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b0:	f7ff ffdc 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0b5b      	lsrs	r3, r3, #13
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	080097a8 	.word	0x080097a8

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d012      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043fc:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a68      	ldr	r2, [pc, #416]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004406:	6093      	str	r3, [r2, #8]
 8004408:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	4964      	ldr	r1, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	4959      	ldr	r1, [pc, #356]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800446a:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	494a      	ldr	r1, [pc, #296]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 808b 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	4a39      	ldr	r2, [pc, #228]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6413      	str	r3, [r2, #64]	; 0x40
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a34      	ldr	r2, [pc, #208]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044dc:	f7fe fb5e 	bl	8002b9c <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fe fb5a 	bl	8002b9c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e38f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d035      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d02e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004528:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d114      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fb22 	bl	8002b9c <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fe fb1e 	bl	8002b9c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e351      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ee      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458a:	d111      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800459a:	400b      	ands	r3, r1
 800459c:	4901      	ldr	r1, [pc, #4]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
 80045a2:	e00b      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000
 80045ac:	0ffffcff 	.word	0x0ffffcff
 80045b0:	4bac      	ldr	r3, [pc, #688]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4aab      	ldr	r2, [pc, #684]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	4ba9      	ldr	r3, [pc, #676]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	49a6      	ldr	r1, [pc, #664]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d010      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045da:	4ba2      	ldr	r3, [pc, #648]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	4aa0      	ldr	r2, [pc, #640]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ea:	4b9e      	ldr	r3, [pc, #632]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	499b      	ldr	r1, [pc, #620]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004608:	4b96      	ldr	r3, [pc, #600]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004616:	4993      	ldr	r1, [pc, #588]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800462a:	4b8e      	ldr	r3, [pc, #568]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004638:	498a      	ldr	r1, [pc, #552]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800464c:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465a:	4982      	ldr	r1, [pc, #520]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800466e:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4979      	ldr	r1, [pc, #484]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004690:	4b74      	ldr	r3, [pc, #464]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	4971      	ldr	r1, [pc, #452]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b2:	4b6c      	ldr	r3, [pc, #432]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f023 020c 	bic.w	r2, r3, #12
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c0:	4968      	ldr	r1, [pc, #416]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d4:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	4960      	ldr	r1, [pc, #384]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f6:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004704:	4957      	ldr	r1, [pc, #348]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004718:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	494f      	ldr	r1, [pc, #316]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800473a:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4946      	ldr	r1, [pc, #280]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800475c:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	493e      	ldr	r1, [pc, #248]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478c:	4935      	ldr	r1, [pc, #212]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ae:	492d      	ldr	r1, [pc, #180]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d0:	4924      	ldr	r1, [pc, #144]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e0:	d101      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004802:	4b18      	ldr	r3, [pc, #96]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	4914      	ldr	r1, [pc, #80]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004824:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004834:	490b      	ldr	r1, [pc, #44]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00f      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	4902      	ldr	r1, [pc, #8]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004860:	e002      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004874:	4b8a      	ldr	r3, [pc, #552]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	4986      	ldr	r1, [pc, #536]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a8:	497d      	ldr	r1, [pc, #500]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d006      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80d6 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048c4:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a75      	ldr	r2, [pc, #468]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fe f964 	bl	8002b9c <HAL_GetTick>
 80048d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048d8:	f7fe f960 	bl	8002b9c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e195      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ea:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d021      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	0e1b      	lsrs	r3, r3, #24
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	019a      	lsls	r2, r3, #6
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	071b      	lsls	r3, r3, #28
 800493e:	4958      	ldr	r1, [pc, #352]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02e      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004970:	d129      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004972:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	0f1b      	lsrs	r3, r3, #28
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	019a      	lsls	r2, r3, #6
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	493e      	ldr	r1, [pc, #248]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049ae:	4b3c      	ldr	r3, [pc, #240]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	f023 021f 	bic.w	r2, r3, #31
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	3b01      	subs	r3, #1
 80049be:	4938      	ldr	r1, [pc, #224]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d2:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0f1b      	lsrs	r3, r3, #28
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	019a      	lsls	r2, r3, #6
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4926      	ldr	r1, [pc, #152]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fe f8a7 	bl	8002b9c <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a52:	f7fe f8a3 	bl	8002b9c <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0d8      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	f040 80ce 	bne.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fe f88a 	bl	8002b9c <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a8c:	f7fe f886 	bl	8002b9c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	; 0x64
 8004a98:	d904      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0bb      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa4:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab0:	d0ec      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12a      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ada:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4944      	ldr	r1, [pc, #272]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b16:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	3b01      	subs	r3, #1
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	493d      	ldr	r1, [pc, #244]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d022      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b44:	d11d      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b46:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b54:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	019a      	lsls	r2, r3, #6
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	4929      	ldr	r1, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	019a      	lsls	r2, r3, #6
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	4917      	ldr	r1, [pc, #92]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bca:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	4911      	ldr	r1, [pc, #68]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fd ffd6 	bl	8002b9c <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bf4:	f7fd ffd2 	bl	8002b9c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e007      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c12:	d1ef      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800

08004c24 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e01c      	b.n	8004c70 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	795b      	ldrb	r3, [r3, #5]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fd34 	bl	80016b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0204 	orr.w	r2, r2, #4
 8004c60:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e09d      	b.n	8004dc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9a:	d009      	beq.n	8004cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fd50 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cf0:	d902      	bls.n	8004cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e002      	b.n	8004cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d06:	d007      	beq.n	8004d18 <HAL_SPI_Init+0xa0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	f003 0204 	and.w	r2, r3, #4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d94:	ea42 0103 	orr.w	r1, r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_SPI_Transmit+0x22>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e158      	b.n	80050a2 <HAL_SPI_Transmit+0x2d4>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df8:	f7fd fed0 	bl	8002b9c <HAL_GetTick>
 8004dfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e12:	e13d      	b.n	8005090 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Transmit+0x52>
 8004e1a:	88fb      	ldrh	r3, [r7, #6]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e24:	e134      	b.n	8005090 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	d10f      	bne.n	8004e92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d007      	beq.n	8004eb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb8:	d94b      	bls.n	8004f52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Transmit+0xfa>
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d13e      	bne.n	8004f46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004eec:	e02b      	b.n	8004f46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d112      	bne.n	8004f22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	1c9a      	adds	r2, r3, #2
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f20:	e011      	b.n	8004f46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f22:	f7fd fe3b 	bl	8002b9c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d803      	bhi.n	8004f3a <HAL_SPI_Transmit+0x16c>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d102      	bne.n	8004f40 <HAL_SPI_Transmit+0x172>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f44:	e0a4      	b.n	8005090 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ce      	bne.n	8004eee <HAL_SPI_Transmit+0x120>
 8004f50:	e07c      	b.n	800504c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_Transmit+0x192>
 8004f5a:	8afb      	ldrh	r3, [r7, #22]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d170      	bne.n	8005042 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d912      	bls.n	8004f90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b02      	subs	r3, #2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f8e:	e058      	b.n	8005042 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	7812      	ldrb	r2, [r2, #0]
 8004f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fb6:	e044      	b.n	8005042 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d12b      	bne.n	800501e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d912      	bls.n	8004ff6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	881a      	ldrh	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b02      	subs	r3, #2
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff4:	e025      	b.n	8005042 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800501c:	e011      	b.n	8005042 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800501e:	f7fd fdbd 	bl	8002b9c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d803      	bhi.n	8005036 <HAL_SPI_Transmit+0x268>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005034:	d102      	bne.n	800503c <HAL_SPI_Transmit+0x26e>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005040:	e026      	b.n	8005090 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1b5      	bne.n	8004fb8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f945 	bl	80052e0 <SPI_EndRxTxTransaction>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e000      	b.n	8005090 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800508e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050bc:	f7fd fd6e 	bl	8002b9c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050cc:	f7fd fd66 	bl	8002b9c <HAL_GetTick>
 80050d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d2:	4b39      	ldr	r3, [pc, #228]	; (80051b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	015b      	lsls	r3, r3, #5
 80050d8:	0d1b      	lsrs	r3, r3, #20
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	fb02 f303 	mul.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e2:	e054      	b.n	800518e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d050      	beq.n	800518e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050ec:	f7fd fd56 	bl	8002b9c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d902      	bls.n	8005102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d13d      	bne.n	800517e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511a:	d111      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	d004      	beq.n	8005130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512e:	d107      	bne.n	8005140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800513e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005148:	d10f      	bne.n	800516a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e017      	b.n	80051ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3b01      	subs	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d19b      	bne.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000008 	.word	0x20000008

080051bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051ca:	f7fd fce7 	bl	8002b9c <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051da:	f7fd fcdf 	bl	8002b9c <HAL_GetTick>
 80051de:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051e0:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <SPI_WaitFifoStateUntilTimeout+0x120>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00da      	lsls	r2, r3, #3
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	0d1b      	lsrs	r3, r3, #20
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80051f8:	e062      	b.n	80052c0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005200:	d109      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005214:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d050      	beq.n	80052c0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800521e:	f7fd fcbd 	bl	8002b9c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	429a      	cmp	r2, r3
 800522c:	d902      	bls.n	8005234 <SPI_WaitFifoStateUntilTimeout+0x78>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d13d      	bne.n	80052b0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005242:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524c:	d111      	bne.n	8005272 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005256:	d004      	beq.n	8005262 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005260:	d107      	bne.n	8005272 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005270:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527a:	d10f      	bne.n	800529c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e010      	b.n	80052d2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3b01      	subs	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d194      	bne.n	80051fa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000008 	.word	0x20000008

080052e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff ff5f 	bl	80051bc <SPI_WaitFifoStateUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e027      	b.n	8005364 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fec4 	bl	80050ac <SPI_WaitFlagStateUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e014      	b.n	8005364 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2200      	movs	r2, #0
 8005342:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff38 	bl	80051bc <SPI_WaitFifoStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e000      	b.n	8005364 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e049      	b.n	8005412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc fc10 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fac6 	bl	800593c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e054      	b.n	80054de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d01d      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_TIM_Base_Start_IT+0xe0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIM_Base_Start_IT+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Base_Start_IT+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d115      	bne.n	80054c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_TIM_Base_Start_IT+0xec>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d015      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d011      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	e008      	b.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e000      	b.n	80054dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40001800 	.word	0x40001800
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0202 	mvn.w	r2, #2
 8005538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9d6 	bl	8005900 <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9c8 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f9d9 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0204 	mvn.w	r2, #4
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9ac 	bl	8005900 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f99e 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9af 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0208 	mvn.w	r2, #8
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2204      	movs	r2, #4
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f982 	bl	8005900 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f974 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f985 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f958 	bl	8005900 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f94a 	bl	80058ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f95b 	bl	8005914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0201 	mvn.w	r2, #1
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f924 	bl	80058d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb12 	bl	8005ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fb05 	bl	8005cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f909 	bl	8005928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b20      	cmp	r3, #32
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0220 	mvn.w	r2, #32
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fac5 	bl	8005ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIM_ConfigClockSource+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e0b3      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x180>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <HAL_TIM_ConfigClockSource+0x188>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579c:	d03e      	beq.n	800581c <HAL_TIM_ConfigClockSource+0xd0>
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	f200 8087 	bhi.w	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	f000 8085 	beq.w	80058b8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d87f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d01a      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0xa2>
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d87b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d050      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x116>
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d877      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d03c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0xf6>
 80057c8:	2b50      	cmp	r3, #80	; 0x50
 80057ca:	d873      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d058      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x136>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d86f      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d064      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x156>
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d86b      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d060      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x156>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d867      	bhi.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x156>
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d05a      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057ec:	e062      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6899      	ldr	r1, [r3, #8]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f000 f9b7 	bl	8005b70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005810:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	609a      	str	r2, [r3, #8]
      break;
 800581a:	e04e      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6899      	ldr	r1, [r3, #8]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f000 f9a0 	bl	8005b70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583e:	609a      	str	r2, [r3, #8]
      break;
 8005840:	e03b      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 f914 	bl	8005a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2150      	movs	r1, #80	; 0x50
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f96d 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 8005860:	e02b      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	f000 f933 	bl	8005ada <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2160      	movs	r1, #96	; 0x60
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f95d 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 8005880:	e01b      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6859      	ldr	r1, [r3, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	461a      	mov	r2, r3
 8005890:	f000 f8f4 	bl	8005a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2140      	movs	r1, #64	; 0x40
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f94d 	bl	8005b3a <TIM_ITRx_SetConfig>
      break;
 80058a0:	e00b      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f000 f944 	bl	8005b3a <TIM_ITRx_SetConfig>
        break;
 80058b2:	e002      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058b4:	bf00      	nop
 80058b6:	e000      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	fffeff88 	.word	0xfffeff88

080058d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a40      	ldr	r2, [pc, #256]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d013      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595a:	d00f      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3d      	ldr	r2, [pc, #244]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00b      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3c      	ldr	r2, [pc, #240]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <TIM_Base_SetConfig+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3a      	ldr	r2, [pc, #232]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d108      	bne.n	800598e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599c:	d027      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <TIM_Base_SetConfig+0x118>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d023      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <TIM_Base_SetConfig+0x11c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <TIM_Base_SetConfig+0x120>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a29      	ldr	r2, [pc, #164]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d017      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <TIM_Base_SetConfig+0x128>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a27      	ldr	r2, [pc, #156]	; (8005a68 <TIM_Base_SetConfig+0x12c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <TIM_Base_SetConfig+0x130>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a25      	ldr	r2, [pc, #148]	; (8005a70 <TIM_Base_SetConfig+0x134>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <TIM_Base_SetConfig+0x138>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <TIM_Base_SetConfig+0x13c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <TIM_Base_SetConfig+0x114>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <TIM_Base_SetConfig+0x124>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]
}
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40010400 	.word	0x40010400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800
 8005a70:	40001800 	.word	0x40001800
 8005a74:	40001c00 	.word	0x40001c00
 8005a78:	40002000 	.word	0x40002000

08005a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 030a 	bic.w	r3, r3, #10
 8005ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b087      	sub	sp, #28
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0210 	bic.w	r2, r3, #16
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f043 0307 	orr.w	r3, r3, #7
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	609a      	str	r2, [r3, #8]
}
 8005b64:	bf00      	nop
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	021a      	lsls	r2, r3, #8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	609a      	str	r2, [r3, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e06d      	b.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a2f      	ldr	r2, [pc, #188]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d108      	bne.n	8005c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d01d      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1a      	ldr	r2, [pc, #104]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10c      	bne.n	8005c92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40010400 	.word	0x40010400
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40000c00 	.word	0x40000c00
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40001800 	.word	0x40001800

08005ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e040      	b.n	8005d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb ffac 	bl	8001c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	; 0x24
 8005d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f82c 	bl	8005da4 <UART_SetConfig>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e022      	b.n	8005d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa84 	bl	800626c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fb0b 	bl	80063b0 <UART_CheckIdleState>
 8005d9a:	4603      	mov	r3, r0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4ba6      	ldr	r3, [pc, #664]	; (8006068 <UART_SetConfig+0x2c4>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a94      	ldr	r2, [pc, #592]	; (800606c <UART_SetConfig+0x2c8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d120      	bne.n	8005e62 <UART_SetConfig+0xbe>
 8005e20:	4b93      	ldr	r3, [pc, #588]	; (8006070 <UART_SetConfig+0x2cc>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d816      	bhi.n	8005e5c <UART_SetConfig+0xb8>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x90>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e4b 	.word	0x08005e4b
 8005e40:	08005e57 	.word	0x08005e57
 8005e44:	2301      	movs	r3, #1
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e150      	b.n	80060ec <UART_SetConfig+0x348>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e14d      	b.n	80060ec <UART_SetConfig+0x348>
 8005e50:	2304      	movs	r3, #4
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e14a      	b.n	80060ec <UART_SetConfig+0x348>
 8005e56:	2308      	movs	r3, #8
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e147      	b.n	80060ec <UART_SetConfig+0x348>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e144      	b.n	80060ec <UART_SetConfig+0x348>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a83      	ldr	r2, [pc, #524]	; (8006074 <UART_SetConfig+0x2d0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d132      	bne.n	8005ed2 <UART_SetConfig+0x12e>
 8005e6c:	4b80      	ldr	r3, [pc, #512]	; (8006070 <UART_SetConfig+0x2cc>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b0c      	cmp	r3, #12
 8005e78:	d828      	bhi.n	8005ecc <UART_SetConfig+0x128>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <UART_SetConfig+0xdc>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005eb5 	.word	0x08005eb5
 8005e84:	08005ecd 	.word	0x08005ecd
 8005e88:	08005ecd 	.word	0x08005ecd
 8005e8c:	08005ecd 	.word	0x08005ecd
 8005e90:	08005ec1 	.word	0x08005ec1
 8005e94:	08005ecd 	.word	0x08005ecd
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005ecd 	.word	0x08005ecd
 8005ea0:	08005ebb 	.word	0x08005ebb
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ec7 	.word	0x08005ec7
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e118      	b.n	80060ec <UART_SetConfig+0x348>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e115      	b.n	80060ec <UART_SetConfig+0x348>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e112      	b.n	80060ec <UART_SetConfig+0x348>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e10f      	b.n	80060ec <UART_SetConfig+0x348>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e10c      	b.n	80060ec <UART_SetConfig+0x348>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a68      	ldr	r2, [pc, #416]	; (8006078 <UART_SetConfig+0x2d4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d120      	bne.n	8005f1e <UART_SetConfig+0x17a>
 8005edc:	4b64      	ldr	r3, [pc, #400]	; (8006070 <UART_SetConfig+0x2cc>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	d013      	beq.n	8005f12 <UART_SetConfig+0x16e>
 8005eea:	2b30      	cmp	r3, #48	; 0x30
 8005eec:	d814      	bhi.n	8005f18 <UART_SetConfig+0x174>
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d009      	beq.n	8005f06 <UART_SetConfig+0x162>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d810      	bhi.n	8005f18 <UART_SetConfig+0x174>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <UART_SetConfig+0x15c>
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d006      	beq.n	8005f0c <UART_SetConfig+0x168>
 8005efe:	e00b      	b.n	8005f18 <UART_SetConfig+0x174>
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e0f2      	b.n	80060ec <UART_SetConfig+0x348>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e0ef      	b.n	80060ec <UART_SetConfig+0x348>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e0ec      	b.n	80060ec <UART_SetConfig+0x348>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e0e9      	b.n	80060ec <UART_SetConfig+0x348>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e0e6      	b.n	80060ec <UART_SetConfig+0x348>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a56      	ldr	r2, [pc, #344]	; (800607c <UART_SetConfig+0x2d8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d120      	bne.n	8005f6a <UART_SetConfig+0x1c6>
 8005f28:	4b51      	ldr	r3, [pc, #324]	; (8006070 <UART_SetConfig+0x2cc>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f32:	2bc0      	cmp	r3, #192	; 0xc0
 8005f34:	d013      	beq.n	8005f5e <UART_SetConfig+0x1ba>
 8005f36:	2bc0      	cmp	r3, #192	; 0xc0
 8005f38:	d814      	bhi.n	8005f64 <UART_SetConfig+0x1c0>
 8005f3a:	2b80      	cmp	r3, #128	; 0x80
 8005f3c:	d009      	beq.n	8005f52 <UART_SetConfig+0x1ae>
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d810      	bhi.n	8005f64 <UART_SetConfig+0x1c0>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0x1a8>
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d006      	beq.n	8005f58 <UART_SetConfig+0x1b4>
 8005f4a:	e00b      	b.n	8005f64 <UART_SetConfig+0x1c0>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e0cc      	b.n	80060ec <UART_SetConfig+0x348>
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e0c9      	b.n	80060ec <UART_SetConfig+0x348>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e0c6      	b.n	80060ec <UART_SetConfig+0x348>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e0c3      	b.n	80060ec <UART_SetConfig+0x348>
 8005f64:	2310      	movs	r3, #16
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e0c0      	b.n	80060ec <UART_SetConfig+0x348>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a44      	ldr	r2, [pc, #272]	; (8006080 <UART_SetConfig+0x2dc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d125      	bne.n	8005fc0 <UART_SetConfig+0x21c>
 8005f74:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <UART_SetConfig+0x2cc>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f82:	d017      	beq.n	8005fb4 <UART_SetConfig+0x210>
 8005f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f88:	d817      	bhi.n	8005fba <UART_SetConfig+0x216>
 8005f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8e:	d00b      	beq.n	8005fa8 <UART_SetConfig+0x204>
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d811      	bhi.n	8005fba <UART_SetConfig+0x216>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <UART_SetConfig+0x1fe>
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d006      	beq.n	8005fae <UART_SetConfig+0x20a>
 8005fa0:	e00b      	b.n	8005fba <UART_SetConfig+0x216>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e0a1      	b.n	80060ec <UART_SetConfig+0x348>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e09e      	b.n	80060ec <UART_SetConfig+0x348>
 8005fae:	2304      	movs	r3, #4
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e09b      	b.n	80060ec <UART_SetConfig+0x348>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e098      	b.n	80060ec <UART_SetConfig+0x348>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e095      	b.n	80060ec <UART_SetConfig+0x348>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2f      	ldr	r2, [pc, #188]	; (8006084 <UART_SetConfig+0x2e0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d125      	bne.n	8006016 <UART_SetConfig+0x272>
 8005fca:	4b29      	ldr	r3, [pc, #164]	; (8006070 <UART_SetConfig+0x2cc>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fd8:	d017      	beq.n	800600a <UART_SetConfig+0x266>
 8005fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fde:	d817      	bhi.n	8006010 <UART_SetConfig+0x26c>
 8005fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe4:	d00b      	beq.n	8005ffe <UART_SetConfig+0x25a>
 8005fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fea:	d811      	bhi.n	8006010 <UART_SetConfig+0x26c>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <UART_SetConfig+0x254>
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d006      	beq.n	8006004 <UART_SetConfig+0x260>
 8005ff6:	e00b      	b.n	8006010 <UART_SetConfig+0x26c>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e076      	b.n	80060ec <UART_SetConfig+0x348>
 8005ffe:	2302      	movs	r3, #2
 8006000:	77fb      	strb	r3, [r7, #31]
 8006002:	e073      	b.n	80060ec <UART_SetConfig+0x348>
 8006004:	2304      	movs	r3, #4
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e070      	b.n	80060ec <UART_SetConfig+0x348>
 800600a:	2308      	movs	r3, #8
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e06d      	b.n	80060ec <UART_SetConfig+0x348>
 8006010:	2310      	movs	r3, #16
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e06a      	b.n	80060ec <UART_SetConfig+0x348>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <UART_SetConfig+0x2e4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d138      	bne.n	8006092 <UART_SetConfig+0x2ee>
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <UART_SetConfig+0x2cc>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800602a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800602e:	d017      	beq.n	8006060 <UART_SetConfig+0x2bc>
 8006030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006034:	d82a      	bhi.n	800608c <UART_SetConfig+0x2e8>
 8006036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800603a:	d00b      	beq.n	8006054 <UART_SetConfig+0x2b0>
 800603c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006040:	d824      	bhi.n	800608c <UART_SetConfig+0x2e8>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <UART_SetConfig+0x2aa>
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604a:	d006      	beq.n	800605a <UART_SetConfig+0x2b6>
 800604c:	e01e      	b.n	800608c <UART_SetConfig+0x2e8>
 800604e:	2300      	movs	r3, #0
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e04b      	b.n	80060ec <UART_SetConfig+0x348>
 8006054:	2302      	movs	r3, #2
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e048      	b.n	80060ec <UART_SetConfig+0x348>
 800605a:	2304      	movs	r3, #4
 800605c:	77fb      	strb	r3, [r7, #31]
 800605e:	e045      	b.n	80060ec <UART_SetConfig+0x348>
 8006060:	2308      	movs	r3, #8
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e042      	b.n	80060ec <UART_SetConfig+0x348>
 8006066:	bf00      	nop
 8006068:	efff69f3 	.word	0xefff69f3
 800606c:	40011000 	.word	0x40011000
 8006070:	40023800 	.word	0x40023800
 8006074:	40004400 	.word	0x40004400
 8006078:	40004800 	.word	0x40004800
 800607c:	40004c00 	.word	0x40004c00
 8006080:	40005000 	.word	0x40005000
 8006084:	40011400 	.word	0x40011400
 8006088:	40007800 	.word	0x40007800
 800608c:	2310      	movs	r3, #16
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e02c      	b.n	80060ec <UART_SetConfig+0x348>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a72      	ldr	r2, [pc, #456]	; (8006260 <UART_SetConfig+0x4bc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d125      	bne.n	80060e8 <UART_SetConfig+0x344>
 800609c:	4b71      	ldr	r3, [pc, #452]	; (8006264 <UART_SetConfig+0x4c0>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060aa:	d017      	beq.n	80060dc <UART_SetConfig+0x338>
 80060ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060b0:	d817      	bhi.n	80060e2 <UART_SetConfig+0x33e>
 80060b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b6:	d00b      	beq.n	80060d0 <UART_SetConfig+0x32c>
 80060b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060bc:	d811      	bhi.n	80060e2 <UART_SetConfig+0x33e>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <UART_SetConfig+0x326>
 80060c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c6:	d006      	beq.n	80060d6 <UART_SetConfig+0x332>
 80060c8:	e00b      	b.n	80060e2 <UART_SetConfig+0x33e>
 80060ca:	2300      	movs	r3, #0
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e00d      	b.n	80060ec <UART_SetConfig+0x348>
 80060d0:	2302      	movs	r3, #2
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e00a      	b.n	80060ec <UART_SetConfig+0x348>
 80060d6:	2304      	movs	r3, #4
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e007      	b.n	80060ec <UART_SetConfig+0x348>
 80060dc:	2308      	movs	r3, #8
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e004      	b.n	80060ec <UART_SetConfig+0x348>
 80060e2:	2310      	movs	r3, #16
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e001      	b.n	80060ec <UART_SetConfig+0x348>
 80060e8:	2310      	movs	r3, #16
 80060ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f4:	d15c      	bne.n	80061b0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d828      	bhi.n	800614e <UART_SetConfig+0x3aa>
 80060fc:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x360>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	08006129 	.word	0x08006129
 8006108:	08006131 	.word	0x08006131
 800610c:	08006139 	.word	0x08006139
 8006110:	0800614f 	.word	0x0800614f
 8006114:	0800613f 	.word	0x0800613f
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800614f 	.word	0x0800614f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006128:	f7fe f92c 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 800612c:	61b8      	str	r0, [r7, #24]
        break;
 800612e:	e013      	b.n	8006158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe f93c 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8006134:	61b8      	str	r0, [r7, #24]
        break;
 8006136:	e00f      	b.n	8006158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b4b      	ldr	r3, [pc, #300]	; (8006268 <UART_SetConfig+0x4c4>)
 800613a:	61bb      	str	r3, [r7, #24]
        break;
 800613c:	e00c      	b.n	8006158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe f80f 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8006142:	61b8      	str	r0, [r7, #24]
        break;
 8006144:	e008      	b.n	8006158 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	61bb      	str	r3, [r7, #24]
        break;
 800614c:	e004      	b.n	8006158 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	77bb      	strb	r3, [r7, #30]
        break;
 8006156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d074      	beq.n	8006248 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	005a      	lsls	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006172:	b29b      	uxth	r3, r3
 8006174:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d916      	bls.n	80061aa <UART_SetConfig+0x406>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006182:	d212      	bcs.n	80061aa <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f023 030f 	bic.w	r3, r3, #15
 800618c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	b29b      	uxth	r3, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	b29a      	uxth	r2, r3
 800619a:	89fb      	ldrh	r3, [r7, #14]
 800619c:	4313      	orrs	r3, r2
 800619e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	89fa      	ldrh	r2, [r7, #14]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e04e      	b.n	8006248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	77bb      	strb	r3, [r7, #30]
 80061ae:	e04b      	b.n	8006248 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b0:	7ffb      	ldrb	r3, [r7, #31]
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d827      	bhi.n	8006206 <UART_SetConfig+0x462>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x418>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006207 	.word	0x08006207
 80061cc:	080061f7 	.word	0x080061f7
 80061d0:	08006207 	.word	0x08006207
 80061d4:	08006207 	.word	0x08006207
 80061d8:	08006207 	.word	0x08006207
 80061dc:	080061ff 	.word	0x080061ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7fe f8d0 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80061e4:	61b8      	str	r0, [r7, #24]
        break;
 80061e6:	e013      	b.n	8006210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e8:	f7fe f8e0 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 80061ec:	61b8      	str	r0, [r7, #24]
        break;
 80061ee:	e00f      	b.n	8006210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <UART_SetConfig+0x4c4>)
 80061f2:	61bb      	str	r3, [r7, #24]
        break;
 80061f4:	e00c      	b.n	8006210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f6:	f7fd ffb3 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80061fa:	61b8      	str	r0, [r7, #24]
        break;
 80061fc:	e008      	b.n	8006210 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006202:	61bb      	str	r3, [r7, #24]
        break;
 8006204:	e004      	b.n	8006210 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77bb      	strb	r3, [r7, #30]
        break;
 800620e:	bf00      	nop
    }

    if (pclk != 0U)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085a      	lsrs	r2, r3, #1
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	441a      	add	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	b29b      	uxth	r3, r3
 800622a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d908      	bls.n	8006244 <UART_SetConfig+0x4a0>
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d204      	bcs.n	8006244 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	e001      	b.n	8006248 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006254:	7fbb      	ldrb	r3, [r7, #30]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40007c00 	.word	0x40007c00
 8006264:	40023800 	.word	0x40023800
 8006268:	00f42400 	.word	0x00f42400

0800626c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01a      	beq.n	8006382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636a:	d10a      	bne.n	8006382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	605a      	str	r2, [r3, #4]
  }
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c0:	f7fc fbec 	bl	8002b9c <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d10e      	bne.n	80063f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f82d 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e023      	b.n	800643a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d10e      	bne.n	800641e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f817 	bl	8006442 <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e00d      	b.n	800643a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2220      	movs	r2, #32
 8006422:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006452:	e05e      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d05a      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645c:	f7fc fb9e 	bl	8002b9c <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <UART_WaitOnFlagUntilTimeout+0x30>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11b      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006480:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e043      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d02c      	beq.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c6:	d124      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e00f      	b.n	8006532 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	429a      	cmp	r2, r3
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	429a      	cmp	r2, r3
 800652e:	d091      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <__cvt>:
 800653a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653c:	ed2d 8b02 	vpush	{d8}
 8006540:	eeb0 8b40 	vmov.f64	d8, d0
 8006544:	b085      	sub	sp, #20
 8006546:	4617      	mov	r7, r2
 8006548:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800654a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800654c:	ee18 2a90 	vmov	r2, s17
 8006550:	f025 0520 	bic.w	r5, r5, #32
 8006554:	2a00      	cmp	r2, #0
 8006556:	bfb6      	itet	lt
 8006558:	222d      	movlt	r2, #45	; 0x2d
 800655a:	2200      	movge	r2, #0
 800655c:	eeb1 8b40 	vneglt.f64	d8, d0
 8006560:	2d46      	cmp	r5, #70	; 0x46
 8006562:	460c      	mov	r4, r1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	d004      	beq.n	8006572 <__cvt+0x38>
 8006568:	2d45      	cmp	r5, #69	; 0x45
 800656a:	d100      	bne.n	800656e <__cvt+0x34>
 800656c:	3401      	adds	r4, #1
 800656e:	2102      	movs	r1, #2
 8006570:	e000      	b.n	8006574 <__cvt+0x3a>
 8006572:	2103      	movs	r1, #3
 8006574:	ab03      	add	r3, sp, #12
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	ab02      	add	r3, sp, #8
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4622      	mov	r2, r4
 800657e:	4633      	mov	r3, r6
 8006580:	eeb0 0b48 	vmov.f64	d0, d8
 8006584:	f000 fe30 	bl	80071e8 <_dtoa_r>
 8006588:	2d47      	cmp	r5, #71	; 0x47
 800658a:	d101      	bne.n	8006590 <__cvt+0x56>
 800658c:	07fb      	lsls	r3, r7, #31
 800658e:	d51a      	bpl.n	80065c6 <__cvt+0x8c>
 8006590:	2d46      	cmp	r5, #70	; 0x46
 8006592:	eb00 0204 	add.w	r2, r0, r4
 8006596:	d10c      	bne.n	80065b2 <__cvt+0x78>
 8006598:	7803      	ldrb	r3, [r0, #0]
 800659a:	2b30      	cmp	r3, #48	; 0x30
 800659c:	d107      	bne.n	80065ae <__cvt+0x74>
 800659e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	bf1c      	itt	ne
 80065a8:	f1c4 0401 	rsbne	r4, r4, #1
 80065ac:	6034      	strne	r4, [r6, #0]
 80065ae:	6833      	ldr	r3, [r6, #0]
 80065b0:	441a      	add	r2, r3
 80065b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ba:	bf08      	it	eq
 80065bc:	9203      	streq	r2, [sp, #12]
 80065be:	2130      	movs	r1, #48	; 0x30
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d307      	bcc.n	80065d6 <__cvt+0x9c>
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065ca:	1a1b      	subs	r3, r3, r0
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	b005      	add	sp, #20
 80065d0:	ecbd 8b02 	vpop	{d8}
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	1c5c      	adds	r4, r3, #1
 80065d8:	9403      	str	r4, [sp, #12]
 80065da:	7019      	strb	r1, [r3, #0]
 80065dc:	e7f0      	b.n	80065c0 <__cvt+0x86>

080065de <__exponent>:
 80065de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e0:	4603      	mov	r3, r0
 80065e2:	2900      	cmp	r1, #0
 80065e4:	bfb8      	it	lt
 80065e6:	4249      	neglt	r1, r1
 80065e8:	f803 2b02 	strb.w	r2, [r3], #2
 80065ec:	bfb4      	ite	lt
 80065ee:	222d      	movlt	r2, #45	; 0x2d
 80065f0:	222b      	movge	r2, #43	; 0x2b
 80065f2:	2909      	cmp	r1, #9
 80065f4:	7042      	strb	r2, [r0, #1]
 80065f6:	dd2a      	ble.n	800664e <__exponent+0x70>
 80065f8:	f10d 0207 	add.w	r2, sp, #7
 80065fc:	4617      	mov	r7, r2
 80065fe:	260a      	movs	r6, #10
 8006600:	4694      	mov	ip, r2
 8006602:	fb91 f5f6 	sdiv	r5, r1, r6
 8006606:	fb06 1415 	mls	r4, r6, r5, r1
 800660a:	3430      	adds	r4, #48	; 0x30
 800660c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006610:	460c      	mov	r4, r1
 8006612:	2c63      	cmp	r4, #99	; 0x63
 8006614:	f102 32ff 	add.w	r2, r2, #4294967295
 8006618:	4629      	mov	r1, r5
 800661a:	dcf1      	bgt.n	8006600 <__exponent+0x22>
 800661c:	3130      	adds	r1, #48	; 0x30
 800661e:	f1ac 0402 	sub.w	r4, ip, #2
 8006622:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006626:	1c41      	adds	r1, r0, #1
 8006628:	4622      	mov	r2, r4
 800662a:	42ba      	cmp	r2, r7
 800662c:	d30a      	bcc.n	8006644 <__exponent+0x66>
 800662e:	f10d 0209 	add.w	r2, sp, #9
 8006632:	eba2 020c 	sub.w	r2, r2, ip
 8006636:	42bc      	cmp	r4, r7
 8006638:	bf88      	it	hi
 800663a:	2200      	movhi	r2, #0
 800663c:	4413      	add	r3, r2
 800663e:	1a18      	subs	r0, r3, r0
 8006640:	b003      	add	sp, #12
 8006642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006644:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006648:	f801 5f01 	strb.w	r5, [r1, #1]!
 800664c:	e7ed      	b.n	800662a <__exponent+0x4c>
 800664e:	2330      	movs	r3, #48	; 0x30
 8006650:	3130      	adds	r1, #48	; 0x30
 8006652:	7083      	strb	r3, [r0, #2]
 8006654:	70c1      	strb	r1, [r0, #3]
 8006656:	1d03      	adds	r3, r0, #4
 8006658:	e7f1      	b.n	800663e <__exponent+0x60>
 800665a:	0000      	movs	r0, r0
 800665c:	0000      	movs	r0, r0
	...

08006660 <_printf_float>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	b08b      	sub	sp, #44	; 0x2c
 8006666:	460c      	mov	r4, r1
 8006668:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800666c:	4616      	mov	r6, r2
 800666e:	461f      	mov	r7, r3
 8006670:	4605      	mov	r5, r0
 8006672:	f000 fcbb 	bl	8006fec <_localeconv_r>
 8006676:	f8d0 b000 	ldr.w	fp, [r0]
 800667a:	4658      	mov	r0, fp
 800667c:	f7f9 fe30 	bl	80002e0 <strlen>
 8006680:	2300      	movs	r3, #0
 8006682:	9308      	str	r3, [sp, #32]
 8006684:	f8d8 3000 	ldr.w	r3, [r8]
 8006688:	f894 9018 	ldrb.w	r9, [r4, #24]
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	3307      	adds	r3, #7
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	f103 0108 	add.w	r1, r3, #8
 8006698:	f8c8 1000 	str.w	r1, [r8]
 800669c:	ed93 0b00 	vldr	d0, [r3]
 80066a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006900 <_printf_float+0x2a0>
 80066a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80066a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80066b4:	4682      	mov	sl, r0
 80066b6:	dd24      	ble.n	8006702 <_printf_float+0xa2>
 80066b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80066bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c0:	d502      	bpl.n	80066c8 <_printf_float+0x68>
 80066c2:	232d      	movs	r3, #45	; 0x2d
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	498f      	ldr	r1, [pc, #572]	; (8006908 <_printf_float+0x2a8>)
 80066ca:	4b90      	ldr	r3, [pc, #576]	; (800690c <_printf_float+0x2ac>)
 80066cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066d0:	bf94      	ite	ls
 80066d2:	4688      	movls	r8, r1
 80066d4:	4698      	movhi	r8, r3
 80066d6:	2303      	movs	r3, #3
 80066d8:	6123      	str	r3, [r4, #16]
 80066da:	f022 0204 	bic.w	r2, r2, #4
 80066de:	2300      	movs	r3, #0
 80066e0:	6022      	str	r2, [r4, #0]
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	9700      	str	r7, [sp, #0]
 80066e6:	4633      	mov	r3, r6
 80066e8:	aa09      	add	r2, sp, #36	; 0x24
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f000 f9d1 	bl	8006a94 <_printf_common>
 80066f2:	3001      	adds	r0, #1
 80066f4:	f040 808a 	bne.w	800680c <_printf_float+0x1ac>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	b00b      	add	sp, #44	; 0x2c
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	eeb4 0b40 	vcmp.f64	d0, d0
 8006706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670a:	d709      	bvc.n	8006720 <_printf_float+0xc0>
 800670c:	ee10 3a90 	vmov	r3, s1
 8006710:	2b00      	cmp	r3, #0
 8006712:	bfbc      	itt	lt
 8006714:	232d      	movlt	r3, #45	; 0x2d
 8006716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800671a:	497d      	ldr	r1, [pc, #500]	; (8006910 <_printf_float+0x2b0>)
 800671c:	4b7d      	ldr	r3, [pc, #500]	; (8006914 <_printf_float+0x2b4>)
 800671e:	e7d5      	b.n	80066cc <_printf_float+0x6c>
 8006720:	6863      	ldr	r3, [r4, #4]
 8006722:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006726:	9104      	str	r1, [sp, #16]
 8006728:	1c59      	adds	r1, r3, #1
 800672a:	d13c      	bne.n	80067a6 <_printf_float+0x146>
 800672c:	2306      	movs	r3, #6
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	2300      	movs	r3, #0
 8006732:	9303      	str	r3, [sp, #12]
 8006734:	ab08      	add	r3, sp, #32
 8006736:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800673a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800673e:	ab07      	add	r3, sp, #28
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	6022      	str	r2, [r4, #0]
 8006746:	f10d 031b 	add.w	r3, sp, #27
 800674a:	4628      	mov	r0, r5
 800674c:	f7ff fef5 	bl	800653a <__cvt>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	9907      	ldr	r1, [sp, #28]
 8006754:	2b47      	cmp	r3, #71	; 0x47
 8006756:	4680      	mov	r8, r0
 8006758:	d108      	bne.n	800676c <_printf_float+0x10c>
 800675a:	1cc8      	adds	r0, r1, #3
 800675c:	db02      	blt.n	8006764 <_printf_float+0x104>
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	4299      	cmp	r1, r3
 8006762:	dd41      	ble.n	80067e8 <_printf_float+0x188>
 8006764:	f1a9 0902 	sub.w	r9, r9, #2
 8006768:	fa5f f989 	uxtb.w	r9, r9
 800676c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006770:	d820      	bhi.n	80067b4 <_printf_float+0x154>
 8006772:	3901      	subs	r1, #1
 8006774:	464a      	mov	r2, r9
 8006776:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800677a:	9107      	str	r1, [sp, #28]
 800677c:	f7ff ff2f 	bl	80065de <__exponent>
 8006780:	9a08      	ldr	r2, [sp, #32]
 8006782:	9004      	str	r0, [sp, #16]
 8006784:	1813      	adds	r3, r2, r0
 8006786:	2a01      	cmp	r2, #1
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	dc02      	bgt.n	8006792 <_printf_float+0x132>
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	07d2      	lsls	r2, r2, #31
 8006790:	d501      	bpl.n	8006796 <_printf_float+0x136>
 8006792:	3301      	adds	r3, #1
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0a2      	beq.n	80066e4 <_printf_float+0x84>
 800679e:	232d      	movs	r3, #45	; 0x2d
 80067a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a4:	e79e      	b.n	80066e4 <_printf_float+0x84>
 80067a6:	9904      	ldr	r1, [sp, #16]
 80067a8:	2947      	cmp	r1, #71	; 0x47
 80067aa:	d1c1      	bne.n	8006730 <_printf_float+0xd0>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1bf      	bne.n	8006730 <_printf_float+0xd0>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e7bc      	b.n	800672e <_printf_float+0xce>
 80067b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067b8:	d118      	bne.n	80067ec <_printf_float+0x18c>
 80067ba:	2900      	cmp	r1, #0
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	dd0b      	ble.n	80067d8 <_printf_float+0x178>
 80067c0:	6121      	str	r1, [r4, #16]
 80067c2:	b913      	cbnz	r3, 80067ca <_printf_float+0x16a>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	07d0      	lsls	r0, r2, #31
 80067c8:	d502      	bpl.n	80067d0 <_printf_float+0x170>
 80067ca:	3301      	adds	r3, #1
 80067cc:	440b      	add	r3, r1
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	2300      	movs	r3, #0
 80067d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	e7de      	b.n	8006796 <_printf_float+0x136>
 80067d8:	b913      	cbnz	r3, 80067e0 <_printf_float+0x180>
 80067da:	6822      	ldr	r2, [r4, #0]
 80067dc:	07d2      	lsls	r2, r2, #31
 80067de:	d501      	bpl.n	80067e4 <_printf_float+0x184>
 80067e0:	3302      	adds	r3, #2
 80067e2:	e7f4      	b.n	80067ce <_printf_float+0x16e>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e7f2      	b.n	80067ce <_printf_float+0x16e>
 80067e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	4299      	cmp	r1, r3
 80067f0:	db05      	blt.n	80067fe <_printf_float+0x19e>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	6121      	str	r1, [r4, #16]
 80067f6:	07d8      	lsls	r0, r3, #31
 80067f8:	d5ea      	bpl.n	80067d0 <_printf_float+0x170>
 80067fa:	1c4b      	adds	r3, r1, #1
 80067fc:	e7e7      	b.n	80067ce <_printf_float+0x16e>
 80067fe:	2900      	cmp	r1, #0
 8006800:	bfd4      	ite	le
 8006802:	f1c1 0202 	rsble	r2, r1, #2
 8006806:	2201      	movgt	r2, #1
 8006808:	4413      	add	r3, r2
 800680a:	e7e0      	b.n	80067ce <_printf_float+0x16e>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	055a      	lsls	r2, r3, #21
 8006810:	d407      	bmi.n	8006822 <_printf_float+0x1c2>
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	4642      	mov	r2, r8
 8006816:	4631      	mov	r1, r6
 8006818:	4628      	mov	r0, r5
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	d12a      	bne.n	8006876 <_printf_float+0x216>
 8006820:	e76a      	b.n	80066f8 <_printf_float+0x98>
 8006822:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006826:	f240 80e0 	bls.w	80069ea <_printf_float+0x38a>
 800682a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800682e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006836:	d133      	bne.n	80068a0 <_printf_float+0x240>
 8006838:	4a37      	ldr	r2, [pc, #220]	; (8006918 <_printf_float+0x2b8>)
 800683a:	2301      	movs	r3, #1
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af58 	beq.w	80066f8 <_printf_float+0x98>
 8006848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800684c:	429a      	cmp	r2, r3
 800684e:	db02      	blt.n	8006856 <_printf_float+0x1f6>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	07d8      	lsls	r0, r3, #31
 8006854:	d50f      	bpl.n	8006876 <_printf_float+0x216>
 8006856:	4653      	mov	r3, sl
 8006858:	465a      	mov	r2, fp
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f af49 	beq.w	80066f8 <_printf_float+0x98>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 091a 	add.w	r9, r4, #26
 800686e:	9b08      	ldr	r3, [sp, #32]
 8006870:	3b01      	subs	r3, #1
 8006872:	4543      	cmp	r3, r8
 8006874:	dc09      	bgt.n	800688a <_printf_float+0x22a>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	079b      	lsls	r3, r3, #30
 800687a:	f100 8106 	bmi.w	8006a8a <_printf_float+0x42a>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	4298      	cmp	r0, r3
 8006884:	bfb8      	it	lt
 8006886:	4618      	movlt	r0, r3
 8006888:	e738      	b.n	80066fc <_printf_float+0x9c>
 800688a:	2301      	movs	r3, #1
 800688c:	464a      	mov	r2, r9
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f af2f 	beq.w	80066f8 <_printf_float+0x98>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	e7e6      	b.n	800686e <_printf_float+0x20e>
 80068a0:	9b07      	ldr	r3, [sp, #28]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	dc3a      	bgt.n	800691c <_printf_float+0x2bc>
 80068a6:	4a1c      	ldr	r2, [pc, #112]	; (8006918 <_printf_float+0x2b8>)
 80068a8:	2301      	movs	r3, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f af21 	beq.w	80066f8 <_printf_float+0x98>
 80068b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	d102      	bne.n	80068c4 <_printf_float+0x264>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	07d9      	lsls	r1, r3, #31
 80068c2:	d5d8      	bpl.n	8006876 <_printf_float+0x216>
 80068c4:	4653      	mov	r3, sl
 80068c6:	465a      	mov	r2, fp
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f af12 	beq.w	80066f8 <_printf_float+0x98>
 80068d4:	f04f 0900 	mov.w	r9, #0
 80068d8:	f104 0a1a 	add.w	sl, r4, #26
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	425b      	negs	r3, r3
 80068e0:	454b      	cmp	r3, r9
 80068e2:	dc01      	bgt.n	80068e8 <_printf_float+0x288>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	e795      	b.n	8006814 <_printf_float+0x1b4>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4652      	mov	r2, sl
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f af00 	beq.w	80066f8 <_printf_float+0x98>
 80068f8:	f109 0901 	add.w	r9, r9, #1
 80068fc:	e7ee      	b.n	80068dc <_printf_float+0x27c>
 80068fe:	bf00      	nop
 8006900:	ffffffff 	.word	0xffffffff
 8006904:	7fefffff 	.word	0x7fefffff
 8006908:	080099f0 	.word	0x080099f0
 800690c:	080099f4 	.word	0x080099f4
 8006910:	080099f8 	.word	0x080099f8
 8006914:	080099fc 	.word	0x080099fc
 8006918:	08009a00 	.word	0x08009a00
 800691c:	9a08      	ldr	r2, [sp, #32]
 800691e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006920:	429a      	cmp	r2, r3
 8006922:	bfa8      	it	ge
 8006924:	461a      	movge	r2, r3
 8006926:	2a00      	cmp	r2, #0
 8006928:	4691      	mov	r9, r2
 800692a:	dc38      	bgt.n	800699e <_printf_float+0x33e>
 800692c:	2300      	movs	r3, #0
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006934:	f104 021a 	add.w	r2, r4, #26
 8006938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693a:	9905      	ldr	r1, [sp, #20]
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	eba3 0309 	sub.w	r3, r3, r9
 8006942:	428b      	cmp	r3, r1
 8006944:	dc33      	bgt.n	80069ae <_printf_float+0x34e>
 8006946:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800694a:	429a      	cmp	r2, r3
 800694c:	db3c      	blt.n	80069c8 <_printf_float+0x368>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	07da      	lsls	r2, r3, #31
 8006952:	d439      	bmi.n	80069c8 <_printf_float+0x368>
 8006954:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006958:	eba2 0903 	sub.w	r9, r2, r3
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	4591      	cmp	r9, r2
 8006962:	bfa8      	it	ge
 8006964:	4691      	movge	r9, r2
 8006966:	f1b9 0f00 	cmp.w	r9, #0
 800696a:	dc35      	bgt.n	80069d8 <_printf_float+0x378>
 800696c:	f04f 0800 	mov.w	r8, #0
 8006970:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006974:	f104 0a1a 	add.w	sl, r4, #26
 8006978:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	eba3 0309 	sub.w	r3, r3, r9
 8006982:	4543      	cmp	r3, r8
 8006984:	f77f af77 	ble.w	8006876 <_printf_float+0x216>
 8006988:	2301      	movs	r3, #1
 800698a:	4652      	mov	r2, sl
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f43f aeb0 	beq.w	80066f8 <_printf_float+0x98>
 8006998:	f108 0801 	add.w	r8, r8, #1
 800699c:	e7ec      	b.n	8006978 <_printf_float+0x318>
 800699e:	4613      	mov	r3, r2
 80069a0:	4631      	mov	r1, r6
 80069a2:	4642      	mov	r2, r8
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	d1bf      	bne.n	800692c <_printf_float+0x2cc>
 80069ac:	e6a4      	b.n	80066f8 <_printf_float+0x98>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	9204      	str	r2, [sp, #16]
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae9d 	beq.w	80066f8 <_printf_float+0x98>
 80069be:	9b05      	ldr	r3, [sp, #20]
 80069c0:	9a04      	ldr	r2, [sp, #16]
 80069c2:	3301      	adds	r3, #1
 80069c4:	9305      	str	r3, [sp, #20]
 80069c6:	e7b7      	b.n	8006938 <_printf_float+0x2d8>
 80069c8:	4653      	mov	r3, sl
 80069ca:	465a      	mov	r2, fp
 80069cc:	4631      	mov	r1, r6
 80069ce:	4628      	mov	r0, r5
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	d1be      	bne.n	8006954 <_printf_float+0x2f4>
 80069d6:	e68f      	b.n	80066f8 <_printf_float+0x98>
 80069d8:	9a04      	ldr	r2, [sp, #16]
 80069da:	464b      	mov	r3, r9
 80069dc:	4442      	add	r2, r8
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	d1c1      	bne.n	800696c <_printf_float+0x30c>
 80069e8:	e686      	b.n	80066f8 <_printf_float+0x98>
 80069ea:	9a08      	ldr	r2, [sp, #32]
 80069ec:	2a01      	cmp	r2, #1
 80069ee:	dc01      	bgt.n	80069f4 <_printf_float+0x394>
 80069f0:	07db      	lsls	r3, r3, #31
 80069f2:	d537      	bpl.n	8006a64 <_printf_float+0x404>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4642      	mov	r2, r8
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	f43f ae7a 	beq.w	80066f8 <_printf_float+0x98>
 8006a04:	4653      	mov	r3, sl
 8006a06:	465a      	mov	r2, fp
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f ae72 	beq.w	80066f8 <_printf_float+0x98>
 8006a14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	d01a      	beq.n	8006a5a <_printf_float+0x3fa>
 8006a24:	3b01      	subs	r3, #1
 8006a26:	f108 0201 	add.w	r2, r8, #1
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d10e      	bne.n	8006a52 <_printf_float+0x3f2>
 8006a34:	e660      	b.n	80066f8 <_printf_float+0x98>
 8006a36:	2301      	movs	r3, #1
 8006a38:	464a      	mov	r2, r9
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	f43f ae59 	beq.w	80066f8 <_printf_float+0x98>
 8006a46:	f108 0801 	add.w	r8, r8, #1
 8006a4a:	9b08      	ldr	r3, [sp, #32]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4543      	cmp	r3, r8
 8006a50:	dcf1      	bgt.n	8006a36 <_printf_float+0x3d6>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a58:	e6dd      	b.n	8006816 <_printf_float+0x1b6>
 8006a5a:	f04f 0800 	mov.w	r8, #0
 8006a5e:	f104 091a 	add.w	r9, r4, #26
 8006a62:	e7f2      	b.n	8006a4a <_printf_float+0x3ea>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4642      	mov	r2, r8
 8006a68:	e7df      	b.n	8006a2a <_printf_float+0x3ca>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	464a      	mov	r2, r9
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae3f 	beq.w	80066f8 <_printf_float+0x98>
 8006a7a:	f108 0801 	add.w	r8, r8, #1
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a82:	1a5b      	subs	r3, r3, r1
 8006a84:	4543      	cmp	r3, r8
 8006a86:	dcf0      	bgt.n	8006a6a <_printf_float+0x40a>
 8006a88:	e6f9      	b.n	800687e <_printf_float+0x21e>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 0919 	add.w	r9, r4, #25
 8006a92:	e7f4      	b.n	8006a7e <_printf_float+0x41e>

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bfb8      	it	lt
 8006aa8:	4613      	movlt	r3, r2
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc26      	bgt.n	8006b2a <_printf_common+0x96>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42b      	bmi.n	8006b44 <_printf_common+0xb0>
 8006aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d01e      	beq.n	8006b38 <_printf_common+0xa4>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	f003 0306 	and.w	r3, r3, #6
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	bf02      	ittt	eq
 8006b06:	68e5      	ldreq	r5, [r4, #12]
 8006b08:	6833      	ldreq	r3, [r6, #0]
 8006b0a:	1aed      	subeq	r5, r5, r3
 8006b0c:	68a3      	ldr	r3, [r4, #8]
 8006b0e:	bf0c      	ite	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	2500      	movne	r5, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfc4      	itt	gt
 8006b1a:	1a9b      	subgt	r3, r3, r2
 8006b1c:	18ed      	addgt	r5, r5, r3
 8006b1e:	2600      	movs	r6, #0
 8006b20:	341a      	adds	r4, #26
 8006b22:	42b5      	cmp	r5, r6
 8006b24:	d11a      	bne.n	8006b5c <_printf_common+0xc8>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e008      	b.n	8006b3c <_printf_common+0xa8>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4638      	mov	r0, r7
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d103      	bne.n	8006b40 <_printf_common+0xac>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7c6      	b.n	8006ad2 <_printf_common+0x3e>
 8006b44:	18e1      	adds	r1, r4, r3
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4e:	4422      	add	r2, r4
 8006b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b58:	3302      	adds	r3, #2
 8006b5a:	e7c7      	b.n	8006aec <_printf_common+0x58>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4649      	mov	r1, r9
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa4>
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7d9      	b.n	8006b22 <_printf_common+0x8e>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	7e0f      	ldrb	r7, [r1, #24]
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	2f78      	cmp	r7, #120	; 0x78
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	469a      	mov	sl, r3
 8006b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b86:	d807      	bhi.n	8006b98 <_printf_i+0x28>
 8006b88:	2f62      	cmp	r7, #98	; 0x62
 8006b8a:	d80a      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	f000 80d4 	beq.w	8006d3a <_printf_i+0x1ca>
 8006b92:	2f58      	cmp	r7, #88	; 0x58
 8006b94:	f000 80c0 	beq.w	8006d18 <_printf_i+0x1a8>
 8006b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba0:	e03a      	b.n	8006c18 <_printf_i+0xa8>
 8006ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba6:	2b15      	cmp	r3, #21
 8006ba8:	d8f6      	bhi.n	8006b98 <_printf_i+0x28>
 8006baa:	a101      	add	r1, pc, #4	; (adr r1, 8006bb0 <_printf_i+0x40>)
 8006bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006b99 	.word	0x08006b99
 8006bbc:	08006b99 	.word	0x08006b99
 8006bc0:	08006b99 	.word	0x08006b99
 8006bc4:	08006b99 	.word	0x08006b99
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006b99 	.word	0x08006b99
 8006bd0:	08006b99 	.word	0x08006b99
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006d21 	.word	0x08006d21
 8006be0:	08006c49 	.word	0x08006c49
 8006be4:	08006cdb 	.word	0x08006cdb
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d43 	.word	0x08006d43
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006c49 	.word	0x08006c49
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006ce3 	.word	0x08006ce3
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e09f      	b.n	8006d5c <_printf_i+0x1ec>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	682b      	ldr	r3, [r5, #0]
 8006c20:	0607      	lsls	r7, r0, #24
 8006c22:	f103 0104 	add.w	r1, r3, #4
 8006c26:	6029      	str	r1, [r5, #0]
 8006c28:	d501      	bpl.n	8006c2e <_printf_i+0xbe>
 8006c2a:	681e      	ldr	r6, [r3, #0]
 8006c2c:	e003      	b.n	8006c36 <_printf_i+0xc6>
 8006c2e:	0646      	lsls	r6, r0, #25
 8006c30:	d5fb      	bpl.n	8006c2a <_printf_i+0xba>
 8006c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	da03      	bge.n	8006c42 <_printf_i+0xd2>
 8006c3a:	232d      	movs	r3, #45	; 0x2d
 8006c3c:	4276      	negs	r6, r6
 8006c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c42:	485a      	ldr	r0, [pc, #360]	; (8006dac <_printf_i+0x23c>)
 8006c44:	230a      	movs	r3, #10
 8006c46:	e012      	b.n	8006c6e <_printf_i+0xfe>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	0605      	lsls	r5, r0, #24
 8006c52:	d501      	bpl.n	8006c58 <_printf_i+0xe8>
 8006c54:	681e      	ldr	r6, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <_printf_i+0xee>
 8006c58:	0641      	lsls	r1, r0, #25
 8006c5a:	d5fb      	bpl.n	8006c54 <_printf_i+0xe4>
 8006c5c:	881e      	ldrh	r6, [r3, #0]
 8006c5e:	4853      	ldr	r0, [pc, #332]	; (8006dac <_printf_i+0x23c>)
 8006c60:	2f6f      	cmp	r7, #111	; 0x6f
 8006c62:	bf0c      	ite	eq
 8006c64:	2308      	moveq	r3, #8
 8006c66:	230a      	movne	r3, #10
 8006c68:	2100      	movs	r1, #0
 8006c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6e:	6865      	ldr	r5, [r4, #4]
 8006c70:	60a5      	str	r5, [r4, #8]
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	bfa2      	ittt	ge
 8006c76:	6821      	ldrge	r1, [r4, #0]
 8006c78:	f021 0104 	bicge.w	r1, r1, #4
 8006c7c:	6021      	strge	r1, [r4, #0]
 8006c7e:	b90e      	cbnz	r6, 8006c84 <_printf_i+0x114>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d04b      	beq.n	8006d1c <_printf_i+0x1ac>
 8006c84:	4615      	mov	r5, r2
 8006c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c8e:	5dc7      	ldrb	r7, [r0, r7]
 8006c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c94:	4637      	mov	r7, r6
 8006c96:	42bb      	cmp	r3, r7
 8006c98:	460e      	mov	r6, r1
 8006c9a:	d9f4      	bls.n	8006c86 <_printf_i+0x116>
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d10b      	bne.n	8006cb8 <_printf_i+0x148>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07de      	lsls	r6, r3, #31
 8006ca4:	d508      	bpl.n	8006cb8 <_printf_i+0x148>
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	6861      	ldr	r1, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	bfde      	ittt	le
 8006cae:	2330      	movle	r3, #48	; 0x30
 8006cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb8:	1b52      	subs	r2, r2, r5
 8006cba:	6122      	str	r2, [r4, #16]
 8006cbc:	f8cd a000 	str.w	sl, [sp]
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	aa03      	add	r2, sp, #12
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f7ff fee4 	bl	8006a94 <_printf_common>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d14a      	bne.n	8006d66 <_printf_i+0x1f6>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	b004      	add	sp, #16
 8006cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f043 0320 	orr.w	r3, r3, #32
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	4833      	ldr	r0, [pc, #204]	; (8006db0 <_printf_i+0x240>)
 8006ce4:	2778      	movs	r7, #120	; 0x78
 8006ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	6829      	ldr	r1, [r5, #0]
 8006cee:	061f      	lsls	r7, r3, #24
 8006cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cf4:	d402      	bmi.n	8006cfc <_printf_i+0x18c>
 8006cf6:	065f      	lsls	r7, r3, #25
 8006cf8:	bf48      	it	mi
 8006cfa:	b2b6      	uxthmi	r6, r6
 8006cfc:	07df      	lsls	r7, r3, #31
 8006cfe:	bf48      	it	mi
 8006d00:	f043 0320 	orrmi.w	r3, r3, #32
 8006d04:	6029      	str	r1, [r5, #0]
 8006d06:	bf48      	it	mi
 8006d08:	6023      	strmi	r3, [r4, #0]
 8006d0a:	b91e      	cbnz	r6, 8006d14 <_printf_i+0x1a4>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	f023 0320 	bic.w	r3, r3, #32
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	2310      	movs	r3, #16
 8006d16:	e7a7      	b.n	8006c68 <_printf_i+0xf8>
 8006d18:	4824      	ldr	r0, [pc, #144]	; (8006dac <_printf_i+0x23c>)
 8006d1a:	e7e4      	b.n	8006ce6 <_printf_i+0x176>
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	e7bd      	b.n	8006c9c <_printf_i+0x12c>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	6826      	ldr	r6, [r4, #0]
 8006d24:	6961      	ldr	r1, [r4, #20]
 8006d26:	1d18      	adds	r0, r3, #4
 8006d28:	6028      	str	r0, [r5, #0]
 8006d2a:	0635      	lsls	r5, r6, #24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x1c4>
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1ca>
 8006d34:	0670      	lsls	r0, r6, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x1c0>
 8006d38:	8019      	strh	r1, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	4615      	mov	r5, r2
 8006d40:	e7bc      	b.n	8006cbc <_printf_i+0x14c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7f9 fa76 	bl	8000240 <memchr>
 8006d54:	b108      	cbz	r0, 8006d5a <_printf_i+0x1ea>
 8006d56:	1b40      	subs	r0, r0, r5
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	e7aa      	b.n	8006cbc <_printf_i+0x14c>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ad      	beq.n	8006cd0 <_printf_i+0x160>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d413      	bmi.n	8006da2 <_printf_i+0x232>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	bfb8      	it	lt
 8006d82:	4618      	movlt	r0, r3
 8006d84:	e7a6      	b.n	8006cd4 <_printf_i+0x164>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d09d      	beq.n	8006cd0 <_printf_i+0x160>
 8006d94:	3501      	adds	r5, #1
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dcf2      	bgt.n	8006d86 <_printf_i+0x216>
 8006da0:	e7eb      	b.n	8006d7a <_printf_i+0x20a>
 8006da2:	2500      	movs	r5, #0
 8006da4:	f104 0619 	add.w	r6, r4, #25
 8006da8:	e7f5      	b.n	8006d96 <_printf_i+0x226>
 8006daa:	bf00      	nop
 8006dac:	08009a02 	.word	0x08009a02
 8006db0:	08009a13 	.word	0x08009a13

08006db4 <std>:
 8006db4:	2300      	movs	r3, #0
 8006db6:	b510      	push	{r4, lr}
 8006db8:	4604      	mov	r4, r0
 8006dba:	e9c0 3300 	strd	r3, r3, [r0]
 8006dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dc2:	6083      	str	r3, [r0, #8]
 8006dc4:	8181      	strh	r1, [r0, #12]
 8006dc6:	6643      	str	r3, [r0, #100]	; 0x64
 8006dc8:	81c2      	strh	r2, [r0, #14]
 8006dca:	6183      	str	r3, [r0, #24]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	2208      	movs	r2, #8
 8006dd0:	305c      	adds	r0, #92	; 0x5c
 8006dd2:	f000 f902 	bl	8006fda <memset>
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <std+0x38>)
 8006dd8:	6263      	str	r3, [r4, #36]	; 0x24
 8006dda:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <std+0x3c>)
 8006ddc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <std+0x40>)
 8006de0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <std+0x44>)
 8006de4:	6224      	str	r4, [r4, #32]
 8006de6:	6323      	str	r3, [r4, #48]	; 0x30
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	bf00      	nop
 8006dec:	08006f55 	.word	0x08006f55
 8006df0:	08006f77 	.word	0x08006f77
 8006df4:	08006faf 	.word	0x08006faf
 8006df8:	08006fd3 	.word	0x08006fd3

08006dfc <stdio_exit_handler>:
 8006dfc:	4a02      	ldr	r2, [pc, #8]	; (8006e08 <stdio_exit_handler+0xc>)
 8006dfe:	4903      	ldr	r1, [pc, #12]	; (8006e0c <stdio_exit_handler+0x10>)
 8006e00:	4803      	ldr	r0, [pc, #12]	; (8006e10 <stdio_exit_handler+0x14>)
 8006e02:	f000 b869 	b.w	8006ed8 <_fwalk_sglue>
 8006e06:	bf00      	nop
 8006e08:	20000018 	.word	0x20000018
 8006e0c:	08008975 	.word	0x08008975
 8006e10:	20000024 	.word	0x20000024

08006e14 <cleanup_stdio>:
 8006e14:	6841      	ldr	r1, [r0, #4]
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <cleanup_stdio+0x34>)
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	d001      	beq.n	8006e24 <cleanup_stdio+0x10>
 8006e20:	f001 fda8 	bl	8008974 <_fflush_r>
 8006e24:	68a1      	ldr	r1, [r4, #8]
 8006e26:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <cleanup_stdio+0x38>)
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	d002      	beq.n	8006e32 <cleanup_stdio+0x1e>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f001 fda1 	bl	8008974 <_fflush_r>
 8006e32:	68e1      	ldr	r1, [r4, #12]
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <cleanup_stdio+0x3c>)
 8006e36:	4299      	cmp	r1, r3
 8006e38:	d004      	beq.n	8006e44 <cleanup_stdio+0x30>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f001 bd98 	b.w	8008974 <_fflush_r>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	20000438 	.word	0x20000438
 8006e4c:	200004a0 	.word	0x200004a0
 8006e50:	20000508 	.word	0x20000508

08006e54 <global_stdio_init.part.0>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	4b0b      	ldr	r3, [pc, #44]	; (8006e84 <global_stdio_init.part.0+0x30>)
 8006e58:	4c0b      	ldr	r4, [pc, #44]	; (8006e88 <global_stdio_init.part.0+0x34>)
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	; (8006e8c <global_stdio_init.part.0+0x38>)
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	2200      	movs	r2, #0
 8006e62:	2104      	movs	r1, #4
 8006e64:	f7ff ffa6 	bl	8006db4 <std>
 8006e68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	2109      	movs	r1, #9
 8006e70:	f7ff ffa0 	bl	8006db4 <std>
 8006e74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e78:	2202      	movs	r2, #2
 8006e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7e:	2112      	movs	r1, #18
 8006e80:	f7ff bf98 	b.w	8006db4 <std>
 8006e84:	20000570 	.word	0x20000570
 8006e88:	20000438 	.word	0x20000438
 8006e8c:	08006dfd 	.word	0x08006dfd

08006e90 <__sfp_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sfp_lock_acquire+0x8>)
 8006e92:	f000 b91f 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	20000579 	.word	0x20000579

08006e9c <__sfp_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sfp_lock_release+0x8>)
 8006e9e:	f000 b91a 	b.w	80070d6 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20000579 	.word	0x20000579

08006ea8 <__sinit>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7ff fff0 	bl	8006e90 <__sfp_lock_acquire>
 8006eb0:	6a23      	ldr	r3, [r4, #32]
 8006eb2:	b11b      	cbz	r3, 8006ebc <__sinit+0x14>
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f7ff bff0 	b.w	8006e9c <__sfp_lock_release>
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <__sinit+0x28>)
 8006ebe:	6223      	str	r3, [r4, #32]
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <__sinit+0x2c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f5      	bne.n	8006eb4 <__sinit+0xc>
 8006ec8:	f7ff ffc4 	bl	8006e54 <global_stdio_init.part.0>
 8006ecc:	e7f2      	b.n	8006eb4 <__sinit+0xc>
 8006ece:	bf00      	nop
 8006ed0:	08006e15 	.word	0x08006e15
 8006ed4:	20000570 	.word	0x20000570

08006ed8 <_fwalk_sglue>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4607      	mov	r7, r0
 8006ede:	4688      	mov	r8, r1
 8006ee0:	4614      	mov	r4, r2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8006eec:	d505      	bpl.n	8006efa <_fwalk_sglue+0x22>
 8006eee:	6824      	ldr	r4, [r4, #0]
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d1f7      	bne.n	8006ee4 <_fwalk_sglue+0xc>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d907      	bls.n	8006f10 <_fwalk_sglue+0x38>
 8006f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f04:	3301      	adds	r3, #1
 8006f06:	d003      	beq.n	8006f10 <_fwalk_sglue+0x38>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c0      	blx	r8
 8006f0e:	4306      	orrs	r6, r0
 8006f10:	3568      	adds	r5, #104	; 0x68
 8006f12:	e7e9      	b.n	8006ee8 <_fwalk_sglue+0x10>

08006f14 <siprintf>:
 8006f14:	b40e      	push	{r1, r2, r3}
 8006f16:	b500      	push	{lr}
 8006f18:	b09c      	sub	sp, #112	; 0x70
 8006f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f1c:	9002      	str	r0, [sp, #8]
 8006f1e:	9006      	str	r0, [sp, #24]
 8006f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f24:	4809      	ldr	r0, [pc, #36]	; (8006f4c <siprintf+0x38>)
 8006f26:	9107      	str	r1, [sp, #28]
 8006f28:	9104      	str	r1, [sp, #16]
 8006f2a:	4909      	ldr	r1, [pc, #36]	; (8006f50 <siprintf+0x3c>)
 8006f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f30:	9105      	str	r1, [sp, #20]
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	a902      	add	r1, sp, #8
 8006f38:	f001 fb98 	bl	800866c <_svfiprintf_r>
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	b01c      	add	sp, #112	; 0x70
 8006f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f48:	b003      	add	sp, #12
 8006f4a:	4770      	bx	lr
 8006f4c:	20000070 	.word	0x20000070
 8006f50:	ffff0208 	.word	0xffff0208

08006f54 <__sread>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5c:	f000 f86c 	bl	8007038 <_read_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	bfab      	itete	ge
 8006f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f66:	89a3      	ldrhlt	r3, [r4, #12]
 8006f68:	181b      	addge	r3, r3, r0
 8006f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f6e:	bfac      	ite	ge
 8006f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f72:	81a3      	strhlt	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__swrite>:
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	05db      	lsls	r3, r3, #23
 8006f80:	4605      	mov	r5, r0
 8006f82:	460c      	mov	r4, r1
 8006f84:	4616      	mov	r6, r2
 8006f86:	d505      	bpl.n	8006f94 <__swrite+0x1e>
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f000 f840 	bl	8007014 <_lseek_r>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9e:	81a3      	strh	r3, [r4, #12]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	f000 b857 	b.w	800705c <_write_r>

08006fae <__sseek>:
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 f82d 	bl	8007014 <_lseek_r>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	bf15      	itete	ne
 8006fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fca:	81a3      	strheq	r3, [r4, #12]
 8006fcc:	bf18      	it	ne
 8006fce:	81a3      	strhne	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__sclose>:
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 b80d 	b.w	8006ff4 <_close_r>

08006fda <memset>:
 8006fda:	4402      	add	r2, r0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d100      	bne.n	8006fe4 <memset+0xa>
 8006fe2:	4770      	bx	lr
 8006fe4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe8:	e7f9      	b.n	8006fde <memset+0x4>
	...

08006fec <_localeconv_r>:
 8006fec:	4800      	ldr	r0, [pc, #0]	; (8006ff0 <_localeconv_r+0x4>)
 8006fee:	4770      	bx	lr
 8006ff0:	20000164 	.word	0x20000164

08006ff4 <_close_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	; (8007010 <_close_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7fa fc97 	bl	8001932 <_close>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_close_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_close_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000574 	.word	0x20000574

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_lseek_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fa fcac 	bl	8001980 <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000574 	.word	0x20000574

08007038 <_read_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	; (8007058 <_read_r+0x20>)
 800703c:	4604      	mov	r4, r0
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	2200      	movs	r2, #0
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7fa fc3a 	bl	80018c0 <_read>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_read_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_read_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20000574 	.word	0x20000574

0800705c <_write_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	; (800707c <_write_r+0x20>)
 8007060:	4604      	mov	r4, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7fa fc45 	bl	80018fa <_write>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_write_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_write_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20000574 	.word	0x20000574

08007080 <__errno>:
 8007080:	4b01      	ldr	r3, [pc, #4]	; (8007088 <__errno+0x8>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000070 	.word	0x20000070

0800708c <__libc_init_array>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4d0d      	ldr	r5, [pc, #52]	; (80070c4 <__libc_init_array+0x38>)
 8007090:	4c0d      	ldr	r4, [pc, #52]	; (80070c8 <__libc_init_array+0x3c>)
 8007092:	1b64      	subs	r4, r4, r5
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	2600      	movs	r6, #0
 8007098:	42a6      	cmp	r6, r4
 800709a:	d109      	bne.n	80070b0 <__libc_init_array+0x24>
 800709c:	4d0b      	ldr	r5, [pc, #44]	; (80070cc <__libc_init_array+0x40>)
 800709e:	4c0c      	ldr	r4, [pc, #48]	; (80070d0 <__libc_init_array+0x44>)
 80070a0:	f002 fb26 	bl	80096f0 <_init>
 80070a4:	1b64      	subs	r4, r4, r5
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	2600      	movs	r6, #0
 80070aa:	42a6      	cmp	r6, r4
 80070ac:	d105      	bne.n	80070ba <__libc_init_array+0x2e>
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b4:	4798      	blx	r3
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7ee      	b.n	8007098 <__libc_init_array+0xc>
 80070ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80070be:	4798      	blx	r3
 80070c0:	3601      	adds	r6, #1
 80070c2:	e7f2      	b.n	80070aa <__libc_init_array+0x1e>
 80070c4:	0800b628 	.word	0x0800b628
 80070c8:	0800b628 	.word	0x0800b628
 80070cc:	0800b628 	.word	0x0800b628
 80070d0:	0800b62c 	.word	0x0800b62c

080070d4 <__retarget_lock_acquire_recursive>:
 80070d4:	4770      	bx	lr

080070d6 <__retarget_lock_release_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <quorem>:
 80070d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	6903      	ldr	r3, [r0, #16]
 80070de:	690c      	ldr	r4, [r1, #16]
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	4607      	mov	r7, r0
 80070e4:	db7e      	blt.n	80071e4 <quorem+0x10c>
 80070e6:	3c01      	subs	r4, #1
 80070e8:	f101 0814 	add.w	r8, r1, #20
 80070ec:	f100 0514 	add.w	r5, r0, #20
 80070f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070f4:	9301      	str	r3, [sp, #4]
 80070f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070fe:	3301      	adds	r3, #1
 8007100:	429a      	cmp	r2, r3
 8007102:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007106:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800710a:	fbb2 f6f3 	udiv	r6, r2, r3
 800710e:	d331      	bcc.n	8007174 <quorem+0x9c>
 8007110:	f04f 0e00 	mov.w	lr, #0
 8007114:	4640      	mov	r0, r8
 8007116:	46ac      	mov	ip, r5
 8007118:	46f2      	mov	sl, lr
 800711a:	f850 2b04 	ldr.w	r2, [r0], #4
 800711e:	b293      	uxth	r3, r2
 8007120:	fb06 e303 	mla	r3, r6, r3, lr
 8007124:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007128:	0c1a      	lsrs	r2, r3, #16
 800712a:	b29b      	uxth	r3, r3
 800712c:	ebaa 0303 	sub.w	r3, sl, r3
 8007130:	f8dc a000 	ldr.w	sl, [ip]
 8007134:	fa13 f38a 	uxtah	r3, r3, sl
 8007138:	fb06 220e 	mla	r2, r6, lr, r2
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007144:	b292      	uxth	r2, r2
 8007146:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800714a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800714e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007152:	4581      	cmp	r9, r0
 8007154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007158:	f84c 3b04 	str.w	r3, [ip], #4
 800715c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007160:	d2db      	bcs.n	800711a <quorem+0x42>
 8007162:	f855 300b 	ldr.w	r3, [r5, fp]
 8007166:	b92b      	cbnz	r3, 8007174 <quorem+0x9c>
 8007168:	9b01      	ldr	r3, [sp, #4]
 800716a:	3b04      	subs	r3, #4
 800716c:	429d      	cmp	r5, r3
 800716e:	461a      	mov	r2, r3
 8007170:	d32c      	bcc.n	80071cc <quorem+0xf4>
 8007172:	613c      	str	r4, [r7, #16]
 8007174:	4638      	mov	r0, r7
 8007176:	f001 f91f 	bl	80083b8 <__mcmp>
 800717a:	2800      	cmp	r0, #0
 800717c:	db22      	blt.n	80071c4 <quorem+0xec>
 800717e:	3601      	adds	r6, #1
 8007180:	4629      	mov	r1, r5
 8007182:	2000      	movs	r0, #0
 8007184:	f858 2b04 	ldr.w	r2, [r8], #4
 8007188:	f8d1 c000 	ldr.w	ip, [r1]
 800718c:	b293      	uxth	r3, r2
 800718e:	1ac3      	subs	r3, r0, r3
 8007190:	0c12      	lsrs	r2, r2, #16
 8007192:	fa13 f38c 	uxtah	r3, r3, ip
 8007196:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800719a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800719e:	b29b      	uxth	r3, r3
 80071a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071a4:	45c1      	cmp	r9, r8
 80071a6:	f841 3b04 	str.w	r3, [r1], #4
 80071aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071ae:	d2e9      	bcs.n	8007184 <quorem+0xac>
 80071b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b8:	b922      	cbnz	r2, 80071c4 <quorem+0xec>
 80071ba:	3b04      	subs	r3, #4
 80071bc:	429d      	cmp	r5, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	d30a      	bcc.n	80071d8 <quorem+0x100>
 80071c2:	613c      	str	r4, [r7, #16]
 80071c4:	4630      	mov	r0, r6
 80071c6:	b003      	add	sp, #12
 80071c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	3b04      	subs	r3, #4
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	d1ce      	bne.n	8007172 <quorem+0x9a>
 80071d4:	3c01      	subs	r4, #1
 80071d6:	e7c9      	b.n	800716c <quorem+0x94>
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	3b04      	subs	r3, #4
 80071dc:	2a00      	cmp	r2, #0
 80071de:	d1f0      	bne.n	80071c2 <quorem+0xea>
 80071e0:	3c01      	subs	r4, #1
 80071e2:	e7eb      	b.n	80071bc <quorem+0xe4>
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7ee      	b.n	80071c6 <quorem+0xee>

080071e8 <_dtoa_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	ed2d 8b02 	vpush	{d8}
 80071f0:	69c5      	ldr	r5, [r0, #28]
 80071f2:	b091      	sub	sp, #68	; 0x44
 80071f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071f8:	ec59 8b10 	vmov	r8, r9, d0
 80071fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80071fe:	9106      	str	r1, [sp, #24]
 8007200:	4606      	mov	r6, r0
 8007202:	9208      	str	r2, [sp, #32]
 8007204:	930c      	str	r3, [sp, #48]	; 0x30
 8007206:	b975      	cbnz	r5, 8007226 <_dtoa_r+0x3e>
 8007208:	2010      	movs	r0, #16
 800720a:	f000 fda5 	bl	8007d58 <malloc>
 800720e:	4602      	mov	r2, r0
 8007210:	61f0      	str	r0, [r6, #28]
 8007212:	b920      	cbnz	r0, 800721e <_dtoa_r+0x36>
 8007214:	4ba6      	ldr	r3, [pc, #664]	; (80074b0 <_dtoa_r+0x2c8>)
 8007216:	21ef      	movs	r1, #239	; 0xef
 8007218:	48a6      	ldr	r0, [pc, #664]	; (80074b4 <_dtoa_r+0x2cc>)
 800721a:	f001 fc0b 	bl	8008a34 <__assert_func>
 800721e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007222:	6005      	str	r5, [r0, #0]
 8007224:	60c5      	str	r5, [r0, #12]
 8007226:	69f3      	ldr	r3, [r6, #28]
 8007228:	6819      	ldr	r1, [r3, #0]
 800722a:	b151      	cbz	r1, 8007242 <_dtoa_r+0x5a>
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	604a      	str	r2, [r1, #4]
 8007230:	2301      	movs	r3, #1
 8007232:	4093      	lsls	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
 8007236:	4630      	mov	r0, r6
 8007238:	f000 fe82 	bl	8007f40 <_Bfree>
 800723c:	69f3      	ldr	r3, [r6, #28]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f1b9 0300 	subs.w	r3, r9, #0
 8007246:	bfbb      	ittet	lt
 8007248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800724c:	9303      	strlt	r3, [sp, #12]
 800724e:	2300      	movge	r3, #0
 8007250:	2201      	movlt	r2, #1
 8007252:	bfac      	ite	ge
 8007254:	6023      	strge	r3, [r4, #0]
 8007256:	6022      	strlt	r2, [r4, #0]
 8007258:	4b97      	ldr	r3, [pc, #604]	; (80074b8 <_dtoa_r+0x2d0>)
 800725a:	9c03      	ldr	r4, [sp, #12]
 800725c:	43a3      	bics	r3, r4
 800725e:	d11c      	bne.n	800729a <_dtoa_r+0xb2>
 8007260:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007262:	f242 730f 	movw	r3, #9999	; 0x270f
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800726c:	ea53 0308 	orrs.w	r3, r3, r8
 8007270:	f000 84fb 	beq.w	8007c6a <_dtoa_r+0xa82>
 8007274:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007276:	b963      	cbnz	r3, 8007292 <_dtoa_r+0xaa>
 8007278:	4b90      	ldr	r3, [pc, #576]	; (80074bc <_dtoa_r+0x2d4>)
 800727a:	e020      	b.n	80072be <_dtoa_r+0xd6>
 800727c:	4b90      	ldr	r3, [pc, #576]	; (80074c0 <_dtoa_r+0x2d8>)
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	3308      	adds	r3, #8
 8007282:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	9801      	ldr	r0, [sp, #4]
 8007288:	b011      	add	sp, #68	; 0x44
 800728a:	ecbd 8b02 	vpop	{d8}
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	4b8a      	ldr	r3, [pc, #552]	; (80074bc <_dtoa_r+0x2d4>)
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	3303      	adds	r3, #3
 8007298:	e7f3      	b.n	8007282 <_dtoa_r+0x9a>
 800729a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800729e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80072a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a6:	d10c      	bne.n	80072c2 <_dtoa_r+0xda>
 80072a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072aa:	2301      	movs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 84d7 	beq.w	8007c64 <_dtoa_r+0xa7c>
 80072b6:	4b83      	ldr	r3, [pc, #524]	; (80074c4 <_dtoa_r+0x2dc>)
 80072b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	e7e1      	b.n	8007286 <_dtoa_r+0x9e>
 80072c2:	aa0e      	add	r2, sp, #56	; 0x38
 80072c4:	a90f      	add	r1, sp, #60	; 0x3c
 80072c6:	4630      	mov	r0, r6
 80072c8:	eeb0 0b48 	vmov.f64	d0, d8
 80072cc:	f001 f91a 	bl	8008504 <__d2b>
 80072d0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80072d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072d6:	4605      	mov	r5, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d046      	beq.n	800736a <_dtoa_r+0x182>
 80072dc:	eeb0 7b48 	vmov.f64	d7, d8
 80072e0:	ee18 1a90 	vmov	r1, s17
 80072e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80072e8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80072ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80072f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80072f4:	2000      	movs	r0, #0
 80072f6:	ee07 1a90 	vmov	s15, r1
 80072fa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80072fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007498 <_dtoa_r+0x2b0>
 8007302:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007306:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80074a0 <_dtoa_r+0x2b8>
 800730a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800730e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80074a8 <_dtoa_r+0x2c0>
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800731a:	eeb0 7b46 	vmov.f64	d7, d6
 800731e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007322:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007326:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	ee16 ba90 	vmov	fp, s13
 8007332:	9009      	str	r0, [sp, #36]	; 0x24
 8007334:	d508      	bpl.n	8007348 <_dtoa_r+0x160>
 8007336:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800733a:	eeb4 6b47 	vcmp.f64	d6, d7
 800733e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007342:	bf18      	it	ne
 8007344:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007348:	f1bb 0f16 	cmp.w	fp, #22
 800734c:	d82b      	bhi.n	80073a6 <_dtoa_r+0x1be>
 800734e:	495e      	ldr	r1, [pc, #376]	; (80074c8 <_dtoa_r+0x2e0>)
 8007350:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007354:	ed91 7b00 	vldr	d7, [r1]
 8007358:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007360:	d501      	bpl.n	8007366 <_dtoa_r+0x17e>
 8007362:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007366:	2100      	movs	r1, #0
 8007368:	e01e      	b.n	80073a8 <_dtoa_r+0x1c0>
 800736a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800736c:	4413      	add	r3, r2
 800736e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007372:	2920      	cmp	r1, #32
 8007374:	bfc1      	itttt	gt
 8007376:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800737a:	408c      	lslgt	r4, r1
 800737c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007380:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007384:	bfd6      	itet	le
 8007386:	f1c1 0120 	rsble	r1, r1, #32
 800738a:	4321      	orrgt	r1, r4
 800738c:	fa08 f101 	lslle.w	r1, r8, r1
 8007390:	ee07 1a90 	vmov	s15, r1
 8007394:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007398:	3b01      	subs	r3, #1
 800739a:	ee17 1a90 	vmov	r1, s15
 800739e:	2001      	movs	r0, #1
 80073a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80073a4:	e7a7      	b.n	80072f6 <_dtoa_r+0x10e>
 80073a6:	2101      	movs	r1, #1
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	1e53      	subs	r3, r2, #1
 80073ac:	9305      	str	r3, [sp, #20]
 80073ae:	bf45      	ittet	mi
 80073b0:	f1c2 0301 	rsbmi	r3, r2, #1
 80073b4:	9304      	strmi	r3, [sp, #16]
 80073b6:	2300      	movpl	r3, #0
 80073b8:	2300      	movmi	r3, #0
 80073ba:	bf4c      	ite	mi
 80073bc:	9305      	strmi	r3, [sp, #20]
 80073be:	9304      	strpl	r3, [sp, #16]
 80073c0:	f1bb 0f00 	cmp.w	fp, #0
 80073c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80073c6:	db18      	blt.n	80073fa <_dtoa_r+0x212>
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80073ce:	445b      	add	r3, fp
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9a06      	ldr	r2, [sp, #24]
 80073d6:	2a09      	cmp	r2, #9
 80073d8:	d848      	bhi.n	800746c <_dtoa_r+0x284>
 80073da:	2a05      	cmp	r2, #5
 80073dc:	bfc4      	itt	gt
 80073de:	3a04      	subgt	r2, #4
 80073e0:	9206      	strgt	r2, [sp, #24]
 80073e2:	9a06      	ldr	r2, [sp, #24]
 80073e4:	f1a2 0202 	sub.w	r2, r2, #2
 80073e8:	bfcc      	ite	gt
 80073ea:	2400      	movgt	r4, #0
 80073ec:	2401      	movle	r4, #1
 80073ee:	2a03      	cmp	r2, #3
 80073f0:	d847      	bhi.n	8007482 <_dtoa_r+0x29a>
 80073f2:	e8df f002 	tbb	[pc, r2]
 80073f6:	2d0b      	.short	0x2d0b
 80073f8:	392b      	.short	0x392b
 80073fa:	9b04      	ldr	r3, [sp, #16]
 80073fc:	2200      	movs	r2, #0
 80073fe:	eba3 030b 	sub.w	r3, r3, fp
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	920a      	str	r2, [sp, #40]	; 0x28
 8007406:	f1cb 0300 	rsb	r3, fp, #0
 800740a:	e7e3      	b.n	80073d4 <_dtoa_r+0x1ec>
 800740c:	2200      	movs	r2, #0
 800740e:	9207      	str	r2, [sp, #28]
 8007410:	9a08      	ldr	r2, [sp, #32]
 8007412:	2a00      	cmp	r2, #0
 8007414:	dc38      	bgt.n	8007488 <_dtoa_r+0x2a0>
 8007416:	f04f 0a01 	mov.w	sl, #1
 800741a:	46d1      	mov	r9, sl
 800741c:	4652      	mov	r2, sl
 800741e:	f8cd a020 	str.w	sl, [sp, #32]
 8007422:	69f7      	ldr	r7, [r6, #28]
 8007424:	2100      	movs	r1, #0
 8007426:	2004      	movs	r0, #4
 8007428:	f100 0c14 	add.w	ip, r0, #20
 800742c:	4594      	cmp	ip, r2
 800742e:	d930      	bls.n	8007492 <_dtoa_r+0x2aa>
 8007430:	6079      	str	r1, [r7, #4]
 8007432:	4630      	mov	r0, r6
 8007434:	930d      	str	r3, [sp, #52]	; 0x34
 8007436:	f000 fd43 	bl	8007ec0 <_Balloc>
 800743a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800743c:	9001      	str	r0, [sp, #4]
 800743e:	4602      	mov	r2, r0
 8007440:	2800      	cmp	r0, #0
 8007442:	d145      	bne.n	80074d0 <_dtoa_r+0x2e8>
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <_dtoa_r+0x2e4>)
 8007446:	f240 11af 	movw	r1, #431	; 0x1af
 800744a:	e6e5      	b.n	8007218 <_dtoa_r+0x30>
 800744c:	2201      	movs	r2, #1
 800744e:	e7de      	b.n	800740e <_dtoa_r+0x226>
 8007450:	2200      	movs	r2, #0
 8007452:	9207      	str	r2, [sp, #28]
 8007454:	9a08      	ldr	r2, [sp, #32]
 8007456:	eb0b 0a02 	add.w	sl, fp, r2
 800745a:	f10a 0901 	add.w	r9, sl, #1
 800745e:	464a      	mov	r2, r9
 8007460:	2a01      	cmp	r2, #1
 8007462:	bfb8      	it	lt
 8007464:	2201      	movlt	r2, #1
 8007466:	e7dc      	b.n	8007422 <_dtoa_r+0x23a>
 8007468:	2201      	movs	r2, #1
 800746a:	e7f2      	b.n	8007452 <_dtoa_r+0x26a>
 800746c:	2401      	movs	r4, #1
 800746e:	2200      	movs	r2, #0
 8007470:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007474:	f04f 3aff 	mov.w	sl, #4294967295
 8007478:	2100      	movs	r1, #0
 800747a:	46d1      	mov	r9, sl
 800747c:	2212      	movs	r2, #18
 800747e:	9108      	str	r1, [sp, #32]
 8007480:	e7cf      	b.n	8007422 <_dtoa_r+0x23a>
 8007482:	2201      	movs	r2, #1
 8007484:	9207      	str	r2, [sp, #28]
 8007486:	e7f5      	b.n	8007474 <_dtoa_r+0x28c>
 8007488:	f8dd a020 	ldr.w	sl, [sp, #32]
 800748c:	46d1      	mov	r9, sl
 800748e:	4652      	mov	r2, sl
 8007490:	e7c7      	b.n	8007422 <_dtoa_r+0x23a>
 8007492:	3101      	adds	r1, #1
 8007494:	0040      	lsls	r0, r0, #1
 8007496:	e7c7      	b.n	8007428 <_dtoa_r+0x240>
 8007498:	636f4361 	.word	0x636f4361
 800749c:	3fd287a7 	.word	0x3fd287a7
 80074a0:	8b60c8b3 	.word	0x8b60c8b3
 80074a4:	3fc68a28 	.word	0x3fc68a28
 80074a8:	509f79fb 	.word	0x509f79fb
 80074ac:	3fd34413 	.word	0x3fd34413
 80074b0:	08009a31 	.word	0x08009a31
 80074b4:	08009a48 	.word	0x08009a48
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	08009a2d 	.word	0x08009a2d
 80074c0:	08009a24 	.word	0x08009a24
 80074c4:	08009a01 	.word	0x08009a01
 80074c8:	08009b38 	.word	0x08009b38
 80074cc:	08009aa0 	.word	0x08009aa0
 80074d0:	69f2      	ldr	r2, [r6, #28]
 80074d2:	9901      	ldr	r1, [sp, #4]
 80074d4:	6011      	str	r1, [r2, #0]
 80074d6:	f1b9 0f0e 	cmp.w	r9, #14
 80074da:	d86c      	bhi.n	80075b6 <_dtoa_r+0x3ce>
 80074dc:	2c00      	cmp	r4, #0
 80074de:	d06a      	beq.n	80075b6 <_dtoa_r+0x3ce>
 80074e0:	f1bb 0f00 	cmp.w	fp, #0
 80074e4:	f340 80a0 	ble.w	8007628 <_dtoa_r+0x440>
 80074e8:	4ac1      	ldr	r2, [pc, #772]	; (80077f0 <_dtoa_r+0x608>)
 80074ea:	f00b 010f 	and.w	r1, fp, #15
 80074ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80074f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80074f6:	ed92 7b00 	vldr	d7, [r2]
 80074fa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80074fe:	f000 8087 	beq.w	8007610 <_dtoa_r+0x428>
 8007502:	49bc      	ldr	r1, [pc, #752]	; (80077f4 <_dtoa_r+0x60c>)
 8007504:	ed91 6b08 	vldr	d6, [r1, #32]
 8007508:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800750c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007510:	f002 020f 	and.w	r2, r2, #15
 8007514:	2103      	movs	r1, #3
 8007516:	48b7      	ldr	r0, [pc, #732]	; (80077f4 <_dtoa_r+0x60c>)
 8007518:	2a00      	cmp	r2, #0
 800751a:	d17b      	bne.n	8007614 <_dtoa_r+0x42c>
 800751c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007520:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007524:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800752a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800752e:	2a00      	cmp	r2, #0
 8007530:	f000 80a0 	beq.w	8007674 <_dtoa_r+0x48c>
 8007534:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007538:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800753c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007540:	f140 8098 	bpl.w	8007674 <_dtoa_r+0x48c>
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	f000 8094 	beq.w	8007674 <_dtoa_r+0x48c>
 800754c:	f1ba 0f00 	cmp.w	sl, #0
 8007550:	dd2f      	ble.n	80075b2 <_dtoa_r+0x3ca>
 8007552:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800755a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800755e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007562:	3101      	adds	r1, #1
 8007564:	4654      	mov	r4, sl
 8007566:	ed9d 6b02 	vldr	d6, [sp, #8]
 800756a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800756e:	ee07 1a90 	vmov	s15, r1
 8007572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007576:	eea7 5b06 	vfma.f64	d5, d7, d6
 800757a:	ee15 7a90 	vmov	r7, s11
 800757e:	ec51 0b15 	vmov	r0, r1, d5
 8007582:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007586:	2c00      	cmp	r4, #0
 8007588:	d177      	bne.n	800767a <_dtoa_r+0x492>
 800758a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800758e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007592:	ec41 0b17 	vmov	d7, r0, r1
 8007596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	f300 826a 	bgt.w	8007a76 <_dtoa_r+0x88e>
 80075a2:	eeb1 7b47 	vneg.f64	d7, d7
 80075a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	f100 8260 	bmi.w	8007a72 <_dtoa_r+0x88a>
 80075b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80075b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	f2c0 811d 	blt.w	80077f8 <_dtoa_r+0x610>
 80075be:	f1bb 0f0e 	cmp.w	fp, #14
 80075c2:	f300 8119 	bgt.w	80077f8 <_dtoa_r+0x610>
 80075c6:	4b8a      	ldr	r3, [pc, #552]	; (80077f0 <_dtoa_r+0x608>)
 80075c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075cc:	ed93 6b00 	vldr	d6, [r3]
 80075d0:	9b08      	ldr	r3, [sp, #32]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f280 80b7 	bge.w	8007746 <_dtoa_r+0x55e>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	f300 80b3 	bgt.w	8007746 <_dtoa_r+0x55e>
 80075e0:	f040 8246 	bne.w	8007a70 <_dtoa_r+0x888>
 80075e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80075e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80075ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80075f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f8:	464c      	mov	r4, r9
 80075fa:	464f      	mov	r7, r9
 80075fc:	f280 821c 	bge.w	8007a38 <_dtoa_r+0x850>
 8007600:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007604:	2331      	movs	r3, #49	; 0x31
 8007606:	f808 3b01 	strb.w	r3, [r8], #1
 800760a:	f10b 0b01 	add.w	fp, fp, #1
 800760e:	e218      	b.n	8007a42 <_dtoa_r+0x85a>
 8007610:	2102      	movs	r1, #2
 8007612:	e780      	b.n	8007516 <_dtoa_r+0x32e>
 8007614:	07d4      	lsls	r4, r2, #31
 8007616:	d504      	bpl.n	8007622 <_dtoa_r+0x43a>
 8007618:	ed90 6b00 	vldr	d6, [r0]
 800761c:	3101      	adds	r1, #1
 800761e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007622:	1052      	asrs	r2, r2, #1
 8007624:	3008      	adds	r0, #8
 8007626:	e777      	b.n	8007518 <_dtoa_r+0x330>
 8007628:	d022      	beq.n	8007670 <_dtoa_r+0x488>
 800762a:	f1cb 0200 	rsb	r2, fp, #0
 800762e:	4970      	ldr	r1, [pc, #448]	; (80077f0 <_dtoa_r+0x608>)
 8007630:	f002 000f 	and.w	r0, r2, #15
 8007634:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007638:	ed91 7b00 	vldr	d7, [r1]
 800763c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007640:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007644:	486b      	ldr	r0, [pc, #428]	; (80077f4 <_dtoa_r+0x60c>)
 8007646:	1112      	asrs	r2, r2, #4
 8007648:	2400      	movs	r4, #0
 800764a:	2102      	movs	r1, #2
 800764c:	b92a      	cbnz	r2, 800765a <_dtoa_r+0x472>
 800764e:	2c00      	cmp	r4, #0
 8007650:	f43f af6a 	beq.w	8007528 <_dtoa_r+0x340>
 8007654:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007658:	e766      	b.n	8007528 <_dtoa_r+0x340>
 800765a:	07d7      	lsls	r7, r2, #31
 800765c:	d505      	bpl.n	800766a <_dtoa_r+0x482>
 800765e:	ed90 6b00 	vldr	d6, [r0]
 8007662:	3101      	adds	r1, #1
 8007664:	2401      	movs	r4, #1
 8007666:	ee27 7b06 	vmul.f64	d7, d7, d6
 800766a:	1052      	asrs	r2, r2, #1
 800766c:	3008      	adds	r0, #8
 800766e:	e7ed      	b.n	800764c <_dtoa_r+0x464>
 8007670:	2102      	movs	r1, #2
 8007672:	e759      	b.n	8007528 <_dtoa_r+0x340>
 8007674:	465a      	mov	r2, fp
 8007676:	464c      	mov	r4, r9
 8007678:	e775      	b.n	8007566 <_dtoa_r+0x37e>
 800767a:	ec41 0b17 	vmov	d7, r0, r1
 800767e:	495c      	ldr	r1, [pc, #368]	; (80077f0 <_dtoa_r+0x608>)
 8007680:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007684:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007688:	9901      	ldr	r1, [sp, #4]
 800768a:	440c      	add	r4, r1
 800768c:	9907      	ldr	r1, [sp, #28]
 800768e:	b351      	cbz	r1, 80076e6 <_dtoa_r+0x4fe>
 8007690:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007694:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007698:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800769c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80076a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80076a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80076ac:	ee14 1a90 	vmov	r1, s9
 80076b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80076b4:	3130      	adds	r1, #48	; 0x30
 80076b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80076ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	f808 1b01 	strb.w	r1, [r8], #1
 80076c6:	d439      	bmi.n	800773c <_dtoa_r+0x554>
 80076c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80076cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	d472      	bmi.n	80077bc <_dtoa_r+0x5d4>
 80076d6:	45a0      	cmp	r8, r4
 80076d8:	f43f af6b 	beq.w	80075b2 <_dtoa_r+0x3ca>
 80076dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80076e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80076e4:	e7e0      	b.n	80076a8 <_dtoa_r+0x4c0>
 80076e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076ee:	4620      	mov	r0, r4
 80076f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80076f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80076f8:	ee14 1a90 	vmov	r1, s9
 80076fc:	3130      	adds	r1, #48	; 0x30
 80076fe:	f808 1b01 	strb.w	r1, [r8], #1
 8007702:	45a0      	cmp	r8, r4
 8007704:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007708:	ee36 6b45 	vsub.f64	d6, d6, d5
 800770c:	d118      	bne.n	8007740 <_dtoa_r+0x558>
 800770e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007712:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007716:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771e:	dc4d      	bgt.n	80077bc <_dtoa_r+0x5d4>
 8007720:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007724:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	f57f af41 	bpl.w	80075b2 <_dtoa_r+0x3ca>
 8007730:	4680      	mov	r8, r0
 8007732:	3801      	subs	r0, #1
 8007734:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d0f9      	beq.n	8007730 <_dtoa_r+0x548>
 800773c:	4693      	mov	fp, r2
 800773e:	e02a      	b.n	8007796 <_dtoa_r+0x5ae>
 8007740:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007744:	e7d6      	b.n	80076f4 <_dtoa_r+0x50c>
 8007746:	ed9d 7b02 	vldr	d7, [sp, #8]
 800774a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800774e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007752:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007756:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800775a:	ee15 3a10 	vmov	r3, s10
 800775e:	3330      	adds	r3, #48	; 0x30
 8007760:	f808 3b01 	strb.w	r3, [r8], #1
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	eba8 0303 	sub.w	r3, r8, r3
 800776a:	4599      	cmp	r9, r3
 800776c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007770:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007774:	d133      	bne.n	80077de <_dtoa_r+0x5f6>
 8007776:	ee37 7b07 	vadd.f64	d7, d7, d7
 800777a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	dc1a      	bgt.n	80077ba <_dtoa_r+0x5d2>
 8007784:	eeb4 7b46 	vcmp.f64	d7, d6
 8007788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778c:	d103      	bne.n	8007796 <_dtoa_r+0x5ae>
 800778e:	ee15 3a10 	vmov	r3, s10
 8007792:	07d9      	lsls	r1, r3, #31
 8007794:	d411      	bmi.n	80077ba <_dtoa_r+0x5d2>
 8007796:	4629      	mov	r1, r5
 8007798:	4630      	mov	r0, r6
 800779a:	f000 fbd1 	bl	8007f40 <_Bfree>
 800779e:	2300      	movs	r3, #0
 80077a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077a2:	f888 3000 	strb.w	r3, [r8]
 80077a6:	f10b 0301 	add.w	r3, fp, #1
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f43f ad69 	beq.w	8007286 <_dtoa_r+0x9e>
 80077b4:	f8c3 8000 	str.w	r8, [r3]
 80077b8:	e565      	b.n	8007286 <_dtoa_r+0x9e>
 80077ba:	465a      	mov	r2, fp
 80077bc:	4643      	mov	r3, r8
 80077be:	4698      	mov	r8, r3
 80077c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80077c4:	2939      	cmp	r1, #57	; 0x39
 80077c6:	d106      	bne.n	80077d6 <_dtoa_r+0x5ee>
 80077c8:	9901      	ldr	r1, [sp, #4]
 80077ca:	4299      	cmp	r1, r3
 80077cc:	d1f7      	bne.n	80077be <_dtoa_r+0x5d6>
 80077ce:	9801      	ldr	r0, [sp, #4]
 80077d0:	2130      	movs	r1, #48	; 0x30
 80077d2:	3201      	adds	r2, #1
 80077d4:	7001      	strb	r1, [r0, #0]
 80077d6:	7819      	ldrb	r1, [r3, #0]
 80077d8:	3101      	adds	r1, #1
 80077da:	7019      	strb	r1, [r3, #0]
 80077dc:	e7ae      	b.n	800773c <_dtoa_r+0x554>
 80077de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ea:	d1b2      	bne.n	8007752 <_dtoa_r+0x56a>
 80077ec:	e7d3      	b.n	8007796 <_dtoa_r+0x5ae>
 80077ee:	bf00      	nop
 80077f0:	08009b38 	.word	0x08009b38
 80077f4:	08009b10 	.word	0x08009b10
 80077f8:	9907      	ldr	r1, [sp, #28]
 80077fa:	2900      	cmp	r1, #0
 80077fc:	f000 80d0 	beq.w	80079a0 <_dtoa_r+0x7b8>
 8007800:	9906      	ldr	r1, [sp, #24]
 8007802:	2901      	cmp	r1, #1
 8007804:	f300 80b4 	bgt.w	8007970 <_dtoa_r+0x788>
 8007808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800780a:	2900      	cmp	r1, #0
 800780c:	f000 80ac 	beq.w	8007968 <_dtoa_r+0x780>
 8007810:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007814:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007818:	461c      	mov	r4, r3
 800781a:	9309      	str	r3, [sp, #36]	; 0x24
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	4413      	add	r3, r2
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	2101      	movs	r1, #1
 8007826:	4413      	add	r3, r2
 8007828:	4630      	mov	r0, r6
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	f000 fc3e 	bl	80080ac <__i2b>
 8007830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007832:	4607      	mov	r7, r0
 8007834:	f1b8 0f00 	cmp.w	r8, #0
 8007838:	d00d      	beq.n	8007856 <_dtoa_r+0x66e>
 800783a:	9a05      	ldr	r2, [sp, #20]
 800783c:	2a00      	cmp	r2, #0
 800783e:	dd0a      	ble.n	8007856 <_dtoa_r+0x66e>
 8007840:	4542      	cmp	r2, r8
 8007842:	9904      	ldr	r1, [sp, #16]
 8007844:	bfa8      	it	ge
 8007846:	4642      	movge	r2, r8
 8007848:	1a89      	subs	r1, r1, r2
 800784a:	9104      	str	r1, [sp, #16]
 800784c:	9905      	ldr	r1, [sp, #20]
 800784e:	eba8 0802 	sub.w	r8, r8, r2
 8007852:	1a8a      	subs	r2, r1, r2
 8007854:	9205      	str	r2, [sp, #20]
 8007856:	b303      	cbz	r3, 800789a <_dtoa_r+0x6b2>
 8007858:	9a07      	ldr	r2, [sp, #28]
 800785a:	2a00      	cmp	r2, #0
 800785c:	f000 80a5 	beq.w	80079aa <_dtoa_r+0x7c2>
 8007860:	2c00      	cmp	r4, #0
 8007862:	dd13      	ble.n	800788c <_dtoa_r+0x6a4>
 8007864:	4639      	mov	r1, r7
 8007866:	4622      	mov	r2, r4
 8007868:	4630      	mov	r0, r6
 800786a:	930d      	str	r3, [sp, #52]	; 0x34
 800786c:	f000 fcde 	bl	800822c <__pow5mult>
 8007870:	462a      	mov	r2, r5
 8007872:	4601      	mov	r1, r0
 8007874:	4607      	mov	r7, r0
 8007876:	4630      	mov	r0, r6
 8007878:	f000 fc2e 	bl	80080d8 <__multiply>
 800787c:	4629      	mov	r1, r5
 800787e:	9009      	str	r0, [sp, #36]	; 0x24
 8007880:	4630      	mov	r0, r6
 8007882:	f000 fb5d 	bl	8007f40 <_Bfree>
 8007886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800788a:	4615      	mov	r5, r2
 800788c:	1b1a      	subs	r2, r3, r4
 800788e:	d004      	beq.n	800789a <_dtoa_r+0x6b2>
 8007890:	4629      	mov	r1, r5
 8007892:	4630      	mov	r0, r6
 8007894:	f000 fcca 	bl	800822c <__pow5mult>
 8007898:	4605      	mov	r5, r0
 800789a:	2101      	movs	r1, #1
 800789c:	4630      	mov	r0, r6
 800789e:	f000 fc05 	bl	80080ac <__i2b>
 80078a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	f340 8081 	ble.w	80079ae <_dtoa_r+0x7c6>
 80078ac:	461a      	mov	r2, r3
 80078ae:	4601      	mov	r1, r0
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 fcbb 	bl	800822c <__pow5mult>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	4604      	mov	r4, r0
 80078bc:	dd7a      	ble.n	80079b4 <_dtoa_r+0x7cc>
 80078be:	2300      	movs	r3, #0
 80078c0:	9309      	str	r3, [sp, #36]	; 0x24
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80078c8:	6910      	ldr	r0, [r2, #16]
 80078ca:	f000 fba1 	bl	8008010 <__hi0bits>
 80078ce:	f1c0 0020 	rsb	r0, r0, #32
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	4418      	add	r0, r3
 80078d6:	f010 001f 	ands.w	r0, r0, #31
 80078da:	f000 8093 	beq.w	8007a04 <_dtoa_r+0x81c>
 80078de:	f1c0 0220 	rsb	r2, r0, #32
 80078e2:	2a04      	cmp	r2, #4
 80078e4:	f340 8085 	ble.w	80079f2 <_dtoa_r+0x80a>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	f1c0 001c 	rsb	r0, r0, #28
 80078ee:	4403      	add	r3, r0
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4480      	add	r8, r0
 80078f6:	4403      	add	r3, r0
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	9b04      	ldr	r3, [sp, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd05      	ble.n	800790c <_dtoa_r+0x724>
 8007900:	4629      	mov	r1, r5
 8007902:	461a      	mov	r2, r3
 8007904:	4630      	mov	r0, r6
 8007906:	f000 fceb 	bl	80082e0 <__lshift>
 800790a:	4605      	mov	r5, r0
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	dd05      	ble.n	800791e <_dtoa_r+0x736>
 8007912:	4621      	mov	r1, r4
 8007914:	461a      	mov	r2, r3
 8007916:	4630      	mov	r0, r6
 8007918:	f000 fce2 	bl	80082e0 <__lshift>
 800791c:	4604      	mov	r4, r0
 800791e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d071      	beq.n	8007a08 <_dtoa_r+0x820>
 8007924:	4621      	mov	r1, r4
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fd46 	bl	80083b8 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	da6b      	bge.n	8007a08 <_dtoa_r+0x820>
 8007930:	2300      	movs	r3, #0
 8007932:	4629      	mov	r1, r5
 8007934:	220a      	movs	r2, #10
 8007936:	4630      	mov	r0, r6
 8007938:	f000 fb24 	bl	8007f84 <__multadd>
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007942:	4605      	mov	r5, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8197 	beq.w	8007c78 <_dtoa_r+0xa90>
 800794a:	4639      	mov	r1, r7
 800794c:	2300      	movs	r3, #0
 800794e:	220a      	movs	r2, #10
 8007950:	4630      	mov	r0, r6
 8007952:	f000 fb17 	bl	8007f84 <__multadd>
 8007956:	f1ba 0f00 	cmp.w	sl, #0
 800795a:	4607      	mov	r7, r0
 800795c:	f300 8093 	bgt.w	8007a86 <_dtoa_r+0x89e>
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	2b02      	cmp	r3, #2
 8007964:	dc57      	bgt.n	8007a16 <_dtoa_r+0x82e>
 8007966:	e08e      	b.n	8007a86 <_dtoa_r+0x89e>
 8007968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800796a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800796e:	e751      	b.n	8007814 <_dtoa_r+0x62c>
 8007970:	f109 34ff 	add.w	r4, r9, #4294967295
 8007974:	42a3      	cmp	r3, r4
 8007976:	bfbf      	itttt	lt
 8007978:	1ae2      	sublt	r2, r4, r3
 800797a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800797c:	189b      	addlt	r3, r3, r2
 800797e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007980:	bfae      	itee	ge
 8007982:	1b1c      	subge	r4, r3, r4
 8007984:	4623      	movlt	r3, r4
 8007986:	2400      	movlt	r4, #0
 8007988:	f1b9 0f00 	cmp.w	r9, #0
 800798c:	bfb5      	itete	lt
 800798e:	9a04      	ldrlt	r2, [sp, #16]
 8007990:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007994:	eba2 0809 	sublt.w	r8, r2, r9
 8007998:	464a      	movge	r2, r9
 800799a:	bfb8      	it	lt
 800799c:	2200      	movlt	r2, #0
 800799e:	e73c      	b.n	800781a <_dtoa_r+0x632>
 80079a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80079a4:	9f07      	ldr	r7, [sp, #28]
 80079a6:	461c      	mov	r4, r3
 80079a8:	e744      	b.n	8007834 <_dtoa_r+0x64c>
 80079aa:	461a      	mov	r2, r3
 80079ac:	e770      	b.n	8007890 <_dtoa_r+0x6a8>
 80079ae:	9b06      	ldr	r3, [sp, #24]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	dc18      	bgt.n	80079e6 <_dtoa_r+0x7fe>
 80079b4:	9b02      	ldr	r3, [sp, #8]
 80079b6:	b9b3      	cbnz	r3, 80079e6 <_dtoa_r+0x7fe>
 80079b8:	9b03      	ldr	r3, [sp, #12]
 80079ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80079be:	b9a2      	cbnz	r2, 80079ea <_dtoa_r+0x802>
 80079c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079c4:	0d12      	lsrs	r2, r2, #20
 80079c6:	0512      	lsls	r2, r2, #20
 80079c8:	b18a      	cbz	r2, 80079ee <_dtoa_r+0x806>
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	9304      	str	r3, [sp, #16]
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	3301      	adds	r3, #1
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	2301      	movs	r3, #1
 80079d8:	9309      	str	r3, [sp, #36]	; 0x24
 80079da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af70 	bne.w	80078c2 <_dtoa_r+0x6da>
 80079e2:	2001      	movs	r0, #1
 80079e4:	e775      	b.n	80078d2 <_dtoa_r+0x6ea>
 80079e6:	2300      	movs	r3, #0
 80079e8:	e7f6      	b.n	80079d8 <_dtoa_r+0x7f0>
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	e7f4      	b.n	80079d8 <_dtoa_r+0x7f0>
 80079ee:	9209      	str	r2, [sp, #36]	; 0x24
 80079f0:	e7f3      	b.n	80079da <_dtoa_r+0x7f2>
 80079f2:	d082      	beq.n	80078fa <_dtoa_r+0x712>
 80079f4:	9b04      	ldr	r3, [sp, #16]
 80079f6:	321c      	adds	r2, #28
 80079f8:	4413      	add	r3, r2
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	4490      	add	r8, r2
 8007a00:	4413      	add	r3, r2
 8007a02:	e779      	b.n	80078f8 <_dtoa_r+0x710>
 8007a04:	4602      	mov	r2, r0
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x80c>
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	dc36      	bgt.n	8007a7c <_dtoa_r+0x894>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	dd33      	ble.n	8007a7c <_dtoa_r+0x894>
 8007a14:	46ca      	mov	sl, r9
 8007a16:	f1ba 0f00 	cmp.w	sl, #0
 8007a1a:	d10d      	bne.n	8007a38 <_dtoa_r+0x850>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4653      	mov	r3, sl
 8007a20:	2205      	movs	r2, #5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 faae 	bl	8007f84 <__multadd>
 8007a28:	4601      	mov	r1, r0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 fcc3 	bl	80083b8 <__mcmp>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	f73f ade4 	bgt.w	8007600 <_dtoa_r+0x418>
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a3e:	ea6f 0b03 	mvn.w	fp, r3
 8007a42:	f04f 0900 	mov.w	r9, #0
 8007a46:	4621      	mov	r1, r4
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 fa79 	bl	8007f40 <_Bfree>
 8007a4e:	2f00      	cmp	r7, #0
 8007a50:	f43f aea1 	beq.w	8007796 <_dtoa_r+0x5ae>
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	d005      	beq.n	8007a66 <_dtoa_r+0x87e>
 8007a5a:	45b9      	cmp	r9, r7
 8007a5c:	d003      	beq.n	8007a66 <_dtoa_r+0x87e>
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 fa6d 	bl	8007f40 <_Bfree>
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fa69 	bl	8007f40 <_Bfree>
 8007a6e:	e692      	b.n	8007796 <_dtoa_r+0x5ae>
 8007a70:	2400      	movs	r4, #0
 8007a72:	4627      	mov	r7, r4
 8007a74:	e7e0      	b.n	8007a38 <_dtoa_r+0x850>
 8007a76:	4693      	mov	fp, r2
 8007a78:	4627      	mov	r7, r4
 8007a7a:	e5c1      	b.n	8007600 <_dtoa_r+0x418>
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	46ca      	mov	sl, r9
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8100 	beq.w	8007c86 <_dtoa_r+0xa9e>
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x8b0>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4642      	mov	r2, r8
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 fc25 	bl	80082e0 <__lshift>
 8007a96:	4607      	mov	r7, r0
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d05d      	beq.n	8007b5a <_dtoa_r+0x972>
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 fa0d 	bl	8007ec0 <_Balloc>
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <_dtoa_r+0x8ce>
 8007aaa:	4b82      	ldr	r3, [pc, #520]	; (8007cb4 <_dtoa_r+0xacc>)
 8007aac:	4602      	mov	r2, r0
 8007aae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ab2:	f7ff bbb1 	b.w	8007218 <_dtoa_r+0x30>
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	3202      	adds	r2, #2
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	f107 010c 	add.w	r1, r7, #12
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	f000 ffa9 	bl	8008a18 <memcpy>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4641      	mov	r1, r8
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 fc08 	bl	80082e0 <__lshift>
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	4453      	add	r3, sl
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	46b9      	mov	r9, r7
 8007ae4:	9307      	str	r3, [sp, #28]
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	4621      	mov	r1, r4
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4628      	mov	r0, r5
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	f7ff faf1 	bl	80070d8 <quorem>
 8007af6:	4603      	mov	r3, r0
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	9005      	str	r0, [sp, #20]
 8007afc:	4649      	mov	r1, r9
 8007afe:	4628      	mov	r0, r5
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	f000 fc59 	bl	80083b8 <__mcmp>
 8007b06:	463a      	mov	r2, r7
 8007b08:	4682      	mov	sl, r0
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f000 fc6f 	bl	80083f0 <__mdiff>
 8007b12:	68c2      	ldr	r2, [r0, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	4680      	mov	r8, r0
 8007b18:	bb0a      	cbnz	r2, 8007b5e <_dtoa_r+0x976>
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 fc4b 	bl	80083b8 <__mcmp>
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	4602      	mov	r2, r0
 8007b26:	4641      	mov	r1, r8
 8007b28:	4630      	mov	r0, r6
 8007b2a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007b2e:	f000 fa07 	bl	8007f40 <_Bfree>
 8007b32:	9b06      	ldr	r3, [sp, #24]
 8007b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b36:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007b3a:	ea43 0102 	orr.w	r1, r3, r2
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	4319      	orrs	r1, r3
 8007b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b44:	d10d      	bne.n	8007b62 <_dtoa_r+0x97a>
 8007b46:	2b39      	cmp	r3, #57	; 0x39
 8007b48:	d029      	beq.n	8007b9e <_dtoa_r+0x9b6>
 8007b4a:	f1ba 0f00 	cmp.w	sl, #0
 8007b4e:	dd01      	ble.n	8007b54 <_dtoa_r+0x96c>
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	3331      	adds	r3, #49	; 0x31
 8007b54:	9a02      	ldr	r2, [sp, #8]
 8007b56:	7013      	strb	r3, [r2, #0]
 8007b58:	e775      	b.n	8007a46 <_dtoa_r+0x85e>
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	e7b8      	b.n	8007ad0 <_dtoa_r+0x8e8>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	e7e1      	b.n	8007b26 <_dtoa_r+0x93e>
 8007b62:	f1ba 0f00 	cmp.w	sl, #0
 8007b66:	db06      	blt.n	8007b76 <_dtoa_r+0x98e>
 8007b68:	9906      	ldr	r1, [sp, #24]
 8007b6a:	ea41 0a0a 	orr.w	sl, r1, sl
 8007b6e:	9907      	ldr	r1, [sp, #28]
 8007b70:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007b74:	d120      	bne.n	8007bb8 <_dtoa_r+0x9d0>
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	ddec      	ble.n	8007b54 <_dtoa_r+0x96c>
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4630      	mov	r0, r6
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	f000 fbad 	bl	80082e0 <__lshift>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4605      	mov	r5, r0
 8007b8a:	f000 fc15 	bl	80083b8 <__mcmp>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	dc02      	bgt.n	8007b9a <_dtoa_r+0x9b2>
 8007b94:	d1de      	bne.n	8007b54 <_dtoa_r+0x96c>
 8007b96:	07da      	lsls	r2, r3, #31
 8007b98:	d5dc      	bpl.n	8007b54 <_dtoa_r+0x96c>
 8007b9a:	2b39      	cmp	r3, #57	; 0x39
 8007b9c:	d1d8      	bne.n	8007b50 <_dtoa_r+0x968>
 8007b9e:	9a02      	ldr	r2, [sp, #8]
 8007ba0:	2339      	movs	r3, #57	; 0x39
 8007ba2:	7013      	strb	r3, [r2, #0]
 8007ba4:	4643      	mov	r3, r8
 8007ba6:	4698      	mov	r8, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007bae:	2a39      	cmp	r2, #57	; 0x39
 8007bb0:	d051      	beq.n	8007c56 <_dtoa_r+0xa6e>
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e746      	b.n	8007a46 <_dtoa_r+0x85e>
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	dd03      	ble.n	8007bc4 <_dtoa_r+0x9dc>
 8007bbc:	2b39      	cmp	r3, #57	; 0x39
 8007bbe:	d0ee      	beq.n	8007b9e <_dtoa_r+0x9b6>
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	e7c7      	b.n	8007b54 <_dtoa_r+0x96c>
 8007bc4:	9a04      	ldr	r2, [sp, #16]
 8007bc6:	9908      	ldr	r1, [sp, #32]
 8007bc8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bcc:	428a      	cmp	r2, r1
 8007bce:	d02b      	beq.n	8007c28 <_dtoa_r+0xa40>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f000 f9d4 	bl	8007f84 <__multadd>
 8007bdc:	45b9      	cmp	r9, r7
 8007bde:	4605      	mov	r5, r0
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	f04f 020a 	mov.w	r2, #10
 8007be8:	4649      	mov	r1, r9
 8007bea:	4630      	mov	r0, r6
 8007bec:	d107      	bne.n	8007bfe <_dtoa_r+0xa16>
 8007bee:	f000 f9c9 	bl	8007f84 <__multadd>
 8007bf2:	4681      	mov	r9, r0
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	e774      	b.n	8007ae8 <_dtoa_r+0x900>
 8007bfe:	f000 f9c1 	bl	8007f84 <__multadd>
 8007c02:	4639      	mov	r1, r7
 8007c04:	4681      	mov	r9, r0
 8007c06:	2300      	movs	r3, #0
 8007c08:	220a      	movs	r2, #10
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f000 f9ba 	bl	8007f84 <__multadd>
 8007c10:	4607      	mov	r7, r0
 8007c12:	e7f0      	b.n	8007bf6 <_dtoa_r+0xa0e>
 8007c14:	f1ba 0f00 	cmp.w	sl, #0
 8007c18:	9a01      	ldr	r2, [sp, #4]
 8007c1a:	bfcc      	ite	gt
 8007c1c:	46d0      	movgt	r8, sl
 8007c1e:	f04f 0801 	movle.w	r8, #1
 8007c22:	4490      	add	r8, r2
 8007c24:	f04f 0900 	mov.w	r9, #0
 8007c28:	4629      	mov	r1, r5
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	f000 fb56 	bl	80082e0 <__lshift>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4605      	mov	r5, r0
 8007c38:	f000 fbbe 	bl	80083b8 <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	dcb1      	bgt.n	8007ba4 <_dtoa_r+0x9bc>
 8007c40:	d102      	bne.n	8007c48 <_dtoa_r+0xa60>
 8007c42:	9b02      	ldr	r3, [sp, #8]
 8007c44:	07db      	lsls	r3, r3, #31
 8007c46:	d4ad      	bmi.n	8007ba4 <_dtoa_r+0x9bc>
 8007c48:	4643      	mov	r3, r8
 8007c4a:	4698      	mov	r8, r3
 8007c4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c50:	2a30      	cmp	r2, #48	; 0x30
 8007c52:	d0fa      	beq.n	8007c4a <_dtoa_r+0xa62>
 8007c54:	e6f7      	b.n	8007a46 <_dtoa_r+0x85e>
 8007c56:	9a01      	ldr	r2, [sp, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d1a4      	bne.n	8007ba6 <_dtoa_r+0x9be>
 8007c5c:	f10b 0b01 	add.w	fp, fp, #1
 8007c60:	2331      	movs	r3, #49	; 0x31
 8007c62:	e778      	b.n	8007b56 <_dtoa_r+0x96e>
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <_dtoa_r+0xad0>)
 8007c66:	f7ff bb2a 	b.w	80072be <_dtoa_r+0xd6>
 8007c6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f47f ab05 	bne.w	800727c <_dtoa_r+0x94>
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <_dtoa_r+0xad4>)
 8007c74:	f7ff bb23 	b.w	80072be <_dtoa_r+0xd6>
 8007c78:	f1ba 0f00 	cmp.w	sl, #0
 8007c7c:	dc03      	bgt.n	8007c86 <_dtoa_r+0xa9e>
 8007c7e:	9b06      	ldr	r3, [sp, #24]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	f73f aec8 	bgt.w	8007a16 <_dtoa_r+0x82e>
 8007c86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f7ff fa23 	bl	80070d8 <quorem>
 8007c92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c96:	f808 3b01 	strb.w	r3, [r8], #1
 8007c9a:	9a01      	ldr	r2, [sp, #4]
 8007c9c:	eba8 0202 	sub.w	r2, r8, r2
 8007ca0:	4592      	cmp	sl, r2
 8007ca2:	ddb7      	ble.n	8007c14 <_dtoa_r+0xa2c>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 f96a 	bl	8007f84 <__multadd>
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	e7ea      	b.n	8007c8a <_dtoa_r+0xaa2>
 8007cb4:	08009aa0 	.word	0x08009aa0
 8007cb8:	08009a00 	.word	0x08009a00
 8007cbc:	08009a24 	.word	0x08009a24

08007cc0 <_free_r>:
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	d044      	beq.n	8007d50 <_free_r+0x90>
 8007cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cca:	9001      	str	r0, [sp, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd2:	bfb8      	it	lt
 8007cd4:	18e4      	addlt	r4, r4, r3
 8007cd6:	f000 f8e7 	bl	8007ea8 <__malloc_lock>
 8007cda:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <_free_r+0x94>)
 8007cdc:	9801      	ldr	r0, [sp, #4]
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	b933      	cbnz	r3, 8007cf0 <_free_r+0x30>
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	6014      	str	r4, [r2, #0]
 8007ce6:	b003      	add	sp, #12
 8007ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cec:	f000 b8e2 	b.w	8007eb4 <__malloc_unlock>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d908      	bls.n	8007d06 <_free_r+0x46>
 8007cf4:	6825      	ldr	r5, [r4, #0]
 8007cf6:	1961      	adds	r1, r4, r5
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	bf01      	itttt	eq
 8007cfc:	6819      	ldreq	r1, [r3, #0]
 8007cfe:	685b      	ldreq	r3, [r3, #4]
 8007d00:	1949      	addeq	r1, r1, r5
 8007d02:	6021      	streq	r1, [r4, #0]
 8007d04:	e7ed      	b.n	8007ce2 <_free_r+0x22>
 8007d06:	461a      	mov	r2, r3
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	b10b      	cbz	r3, 8007d10 <_free_r+0x50>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d9fa      	bls.n	8007d06 <_free_r+0x46>
 8007d10:	6811      	ldr	r1, [r2, #0]
 8007d12:	1855      	adds	r5, r2, r1
 8007d14:	42a5      	cmp	r5, r4
 8007d16:	d10b      	bne.n	8007d30 <_free_r+0x70>
 8007d18:	6824      	ldr	r4, [r4, #0]
 8007d1a:	4421      	add	r1, r4
 8007d1c:	1854      	adds	r4, r2, r1
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	d1e0      	bne.n	8007ce6 <_free_r+0x26>
 8007d24:	681c      	ldr	r4, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	6053      	str	r3, [r2, #4]
 8007d2a:	440c      	add	r4, r1
 8007d2c:	6014      	str	r4, [r2, #0]
 8007d2e:	e7da      	b.n	8007ce6 <_free_r+0x26>
 8007d30:	d902      	bls.n	8007d38 <_free_r+0x78>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	e7d6      	b.n	8007ce6 <_free_r+0x26>
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	1961      	adds	r1, r4, r5
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf04      	itt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	bf04      	itt	eq
 8007d48:	1949      	addeq	r1, r1, r5
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	6054      	str	r4, [r2, #4]
 8007d4e:	e7ca      	b.n	8007ce6 <_free_r+0x26>
 8007d50:	b003      	add	sp, #12
 8007d52:	bd30      	pop	{r4, r5, pc}
 8007d54:	2000057c 	.word	0x2000057c

08007d58 <malloc>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <malloc+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f000 b823 	b.w	8007da8 <_malloc_r>
 8007d62:	bf00      	nop
 8007d64:	20000070 	.word	0x20000070

08007d68 <sbrk_aligned>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4e0e      	ldr	r6, [pc, #56]	; (8007da4 <sbrk_aligned+0x3c>)
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	6831      	ldr	r1, [r6, #0]
 8007d70:	4605      	mov	r5, r0
 8007d72:	b911      	cbnz	r1, 8007d7a <sbrk_aligned+0x12>
 8007d74:	f000 fe40 	bl	80089f8 <_sbrk_r>
 8007d78:	6030      	str	r0, [r6, #0]
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f000 fe3b 	bl	80089f8 <_sbrk_r>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d00a      	beq.n	8007d9c <sbrk_aligned+0x34>
 8007d86:	1cc4      	adds	r4, r0, #3
 8007d88:	f024 0403 	bic.w	r4, r4, #3
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	d007      	beq.n	8007da0 <sbrk_aligned+0x38>
 8007d90:	1a21      	subs	r1, r4, r0
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 fe30 	bl	80089f8 <_sbrk_r>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d101      	bne.n	8007da0 <sbrk_aligned+0x38>
 8007d9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007da0:	4620      	mov	r0, r4
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	20000580 	.word	0x20000580

08007da8 <_malloc_r>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	1ccd      	adds	r5, r1, #3
 8007dae:	f025 0503 	bic.w	r5, r5, #3
 8007db2:	3508      	adds	r5, #8
 8007db4:	2d0c      	cmp	r5, #12
 8007db6:	bf38      	it	cc
 8007db8:	250c      	movcc	r5, #12
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	db01      	blt.n	8007dc4 <_malloc_r+0x1c>
 8007dc0:	42a9      	cmp	r1, r5
 8007dc2:	d905      	bls.n	8007dd0 <_malloc_r+0x28>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	2600      	movs	r6, #0
 8007dca:	4630      	mov	r0, r6
 8007dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ea4 <_malloc_r+0xfc>
 8007dd4:	f000 f868 	bl	8007ea8 <__malloc_lock>
 8007dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ddc:	461c      	mov	r4, r3
 8007dde:	bb5c      	cbnz	r4, 8007e38 <_malloc_r+0x90>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ffc0 	bl	8007d68 <sbrk_aligned>
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	4604      	mov	r4, r0
 8007dec:	d155      	bne.n	8007e9a <_malloc_r+0xf2>
 8007dee:	f8d8 4000 	ldr.w	r4, [r8]
 8007df2:	4626      	mov	r6, r4
 8007df4:	2e00      	cmp	r6, #0
 8007df6:	d145      	bne.n	8007e84 <_malloc_r+0xdc>
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	d048      	beq.n	8007e8e <_malloc_r+0xe6>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4638      	mov	r0, r7
 8007e02:	eb04 0903 	add.w	r9, r4, r3
 8007e06:	f000 fdf7 	bl	80089f8 <_sbrk_r>
 8007e0a:	4581      	cmp	r9, r0
 8007e0c:	d13f      	bne.n	8007e8e <_malloc_r+0xe6>
 8007e0e:	6821      	ldr	r1, [r4, #0]
 8007e10:	1a6d      	subs	r5, r5, r1
 8007e12:	4629      	mov	r1, r5
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ffa7 	bl	8007d68 <sbrk_aligned>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d037      	beq.n	8007e8e <_malloc_r+0xe6>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	442b      	add	r3, r5
 8007e22:	6023      	str	r3, [r4, #0]
 8007e24:	f8d8 3000 	ldr.w	r3, [r8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d038      	beq.n	8007e9e <_malloc_r+0xf6>
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	42a2      	cmp	r2, r4
 8007e30:	d12b      	bne.n	8007e8a <_malloc_r+0xe2>
 8007e32:	2200      	movs	r2, #0
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	e00f      	b.n	8007e58 <_malloc_r+0xb0>
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	1b52      	subs	r2, r2, r5
 8007e3c:	d41f      	bmi.n	8007e7e <_malloc_r+0xd6>
 8007e3e:	2a0b      	cmp	r2, #11
 8007e40:	d917      	bls.n	8007e72 <_malloc_r+0xca>
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	6025      	str	r5, [r4, #0]
 8007e48:	bf18      	it	ne
 8007e4a:	6059      	strne	r1, [r3, #4]
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	bf08      	it	eq
 8007e50:	f8c8 1000 	streq.w	r1, [r8]
 8007e54:	5162      	str	r2, [r4, r5]
 8007e56:	604b      	str	r3, [r1, #4]
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f104 060b 	add.w	r6, r4, #11
 8007e5e:	f000 f829 	bl	8007eb4 <__malloc_unlock>
 8007e62:	f026 0607 	bic.w	r6, r6, #7
 8007e66:	1d23      	adds	r3, r4, #4
 8007e68:	1af2      	subs	r2, r6, r3
 8007e6a:	d0ae      	beq.n	8007dca <_malloc_r+0x22>
 8007e6c:	1b9b      	subs	r3, r3, r6
 8007e6e:	50a3      	str	r3, [r4, r2]
 8007e70:	e7ab      	b.n	8007dca <_malloc_r+0x22>
 8007e72:	42a3      	cmp	r3, r4
 8007e74:	6862      	ldr	r2, [r4, #4]
 8007e76:	d1dd      	bne.n	8007e34 <_malloc_r+0x8c>
 8007e78:	f8c8 2000 	str.w	r2, [r8]
 8007e7c:	e7ec      	b.n	8007e58 <_malloc_r+0xb0>
 8007e7e:	4623      	mov	r3, r4
 8007e80:	6864      	ldr	r4, [r4, #4]
 8007e82:	e7ac      	b.n	8007dde <_malloc_r+0x36>
 8007e84:	4634      	mov	r4, r6
 8007e86:	6876      	ldr	r6, [r6, #4]
 8007e88:	e7b4      	b.n	8007df4 <_malloc_r+0x4c>
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	e7cc      	b.n	8007e28 <_malloc_r+0x80>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4638      	mov	r0, r7
 8007e94:	f000 f80e 	bl	8007eb4 <__malloc_unlock>
 8007e98:	e797      	b.n	8007dca <_malloc_r+0x22>
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	e7dc      	b.n	8007e58 <_malloc_r+0xb0>
 8007e9e:	605b      	str	r3, [r3, #4]
 8007ea0:	deff      	udf	#255	; 0xff
 8007ea2:	bf00      	nop
 8007ea4:	2000057c 	.word	0x2000057c

08007ea8 <__malloc_lock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__malloc_lock+0x8>)
 8007eaa:	f7ff b913 	b.w	80070d4 <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000578 	.word	0x20000578

08007eb4 <__malloc_unlock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__malloc_unlock+0x8>)
 8007eb6:	f7ff b90e 	b.w	80070d6 <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000578 	.word	0x20000578

08007ec0 <_Balloc>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	69c6      	ldr	r6, [r0, #28]
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	b976      	cbnz	r6, 8007ee8 <_Balloc+0x28>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f7ff ff44 	bl	8007d58 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	61e0      	str	r0, [r4, #28]
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_Balloc+0x20>
 8007ed6:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <_Balloc+0x78>)
 8007ed8:	4818      	ldr	r0, [pc, #96]	; (8007f3c <_Balloc+0x7c>)
 8007eda:	216b      	movs	r1, #107	; 0x6b
 8007edc:	f000 fdaa 	bl	8008a34 <__assert_func>
 8007ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee4:	6006      	str	r6, [r0, #0]
 8007ee6:	60c6      	str	r6, [r0, #12]
 8007ee8:	69e6      	ldr	r6, [r4, #28]
 8007eea:	68f3      	ldr	r3, [r6, #12]
 8007eec:	b183      	cbz	r3, 8007f10 <_Balloc+0x50>
 8007eee:	69e3      	ldr	r3, [r4, #28]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ef6:	b9b8      	cbnz	r0, 8007f28 <_Balloc+0x68>
 8007ef8:	2101      	movs	r1, #1
 8007efa:	fa01 f605 	lsl.w	r6, r1, r5
 8007efe:	1d72      	adds	r2, r6, #5
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fdb4 	bl	8008a70 <_calloc_r>
 8007f08:	b160      	cbz	r0, 8007f24 <_Balloc+0x64>
 8007f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f0e:	e00e      	b.n	8007f2e <_Balloc+0x6e>
 8007f10:	2221      	movs	r2, #33	; 0x21
 8007f12:	2104      	movs	r1, #4
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fdab 	bl	8008a70 <_calloc_r>
 8007f1a:	69e3      	ldr	r3, [r4, #28]
 8007f1c:	60f0      	str	r0, [r6, #12]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1e4      	bne.n	8007eee <_Balloc+0x2e>
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	6802      	ldr	r2, [r0, #0]
 8007f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f34:	e7f7      	b.n	8007f26 <_Balloc+0x66>
 8007f36:	bf00      	nop
 8007f38:	08009a31 	.word	0x08009a31
 8007f3c:	08009ab1 	.word	0x08009ab1

08007f40 <_Bfree>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	69c6      	ldr	r6, [r0, #28]
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Bfree+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ff04 	bl	8007d58 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	61e8      	str	r0, [r5, #28]
 8007f54:	b920      	cbnz	r0, 8007f60 <_Bfree+0x20>
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <_Bfree+0x3c>)
 8007f58:	4809      	ldr	r0, [pc, #36]	; (8007f80 <_Bfree+0x40>)
 8007f5a:	218f      	movs	r1, #143	; 0x8f
 8007f5c:	f000 fd6a 	bl	8008a34 <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	b13c      	cbz	r4, 8007f7a <_Bfree+0x3a>
 8007f6a:	69eb      	ldr	r3, [r5, #28]
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f74:	6021      	str	r1, [r4, #0]
 8007f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	08009a31 	.word	0x08009a31
 8007f80:	08009ab1 	.word	0x08009ab1

08007f84 <__multadd>:
 8007f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f88:	690d      	ldr	r5, [r1, #16]
 8007f8a:	4607      	mov	r7, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	461e      	mov	r6, r3
 8007f90:	f101 0c14 	add.w	ip, r1, #20
 8007f94:	2000      	movs	r0, #0
 8007f96:	f8dc 3000 	ldr.w	r3, [ip]
 8007f9a:	b299      	uxth	r1, r3
 8007f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8007fa0:	0c1e      	lsrs	r6, r3, #16
 8007fa2:	0c0b      	lsrs	r3, r1, #16
 8007fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fa8:	b289      	uxth	r1, r1
 8007faa:	3001      	adds	r0, #1
 8007fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fb0:	4285      	cmp	r5, r0
 8007fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fba:	dcec      	bgt.n	8007f96 <__multadd+0x12>
 8007fbc:	b30e      	cbz	r6, 8008002 <__multadd+0x7e>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc19      	bgt.n	8007ff8 <__multadd+0x74>
 8007fc4:	6861      	ldr	r1, [r4, #4]
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	3101      	adds	r1, #1
 8007fca:	f7ff ff79 	bl	8007ec0 <_Balloc>
 8007fce:	4680      	mov	r8, r0
 8007fd0:	b928      	cbnz	r0, 8007fde <__multadd+0x5a>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <__multadd+0x84>)
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <__multadd+0x88>)
 8007fd8:	21ba      	movs	r1, #186	; 0xba
 8007fda:	f000 fd2b 	bl	8008a34 <__assert_func>
 8007fde:	6922      	ldr	r2, [r4, #16]
 8007fe0:	3202      	adds	r2, #2
 8007fe2:	f104 010c 	add.w	r1, r4, #12
 8007fe6:	0092      	lsls	r2, r2, #2
 8007fe8:	300c      	adds	r0, #12
 8007fea:	f000 fd15 	bl	8008a18 <memcpy>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f7ff ffa5 	bl	8007f40 <_Bfree>
 8007ff6:	4644      	mov	r4, r8
 8007ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	615e      	str	r6, [r3, #20]
 8008000:	6125      	str	r5, [r4, #16]
 8008002:	4620      	mov	r0, r4
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	08009aa0 	.word	0x08009aa0
 800800c:	08009ab1 	.word	0x08009ab1

08008010 <__hi0bits>:
 8008010:	0c03      	lsrs	r3, r0, #16
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	b9d3      	cbnz	r3, 800804c <__hi0bits+0x3c>
 8008016:	0400      	lsls	r0, r0, #16
 8008018:	2310      	movs	r3, #16
 800801a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800801e:	bf04      	itt	eq
 8008020:	0200      	lsleq	r0, r0, #8
 8008022:	3308      	addeq	r3, #8
 8008024:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008028:	bf04      	itt	eq
 800802a:	0100      	lsleq	r0, r0, #4
 800802c:	3304      	addeq	r3, #4
 800802e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008032:	bf04      	itt	eq
 8008034:	0080      	lsleq	r0, r0, #2
 8008036:	3302      	addeq	r3, #2
 8008038:	2800      	cmp	r0, #0
 800803a:	db05      	blt.n	8008048 <__hi0bits+0x38>
 800803c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008040:	f103 0301 	add.w	r3, r3, #1
 8008044:	bf08      	it	eq
 8008046:	2320      	moveq	r3, #32
 8008048:	4618      	mov	r0, r3
 800804a:	4770      	bx	lr
 800804c:	2300      	movs	r3, #0
 800804e:	e7e4      	b.n	800801a <__hi0bits+0xa>

08008050 <__lo0bits>:
 8008050:	6803      	ldr	r3, [r0, #0]
 8008052:	f013 0207 	ands.w	r2, r3, #7
 8008056:	d00c      	beq.n	8008072 <__lo0bits+0x22>
 8008058:	07d9      	lsls	r1, r3, #31
 800805a:	d422      	bmi.n	80080a2 <__lo0bits+0x52>
 800805c:	079a      	lsls	r2, r3, #30
 800805e:	bf49      	itett	mi
 8008060:	085b      	lsrmi	r3, r3, #1
 8008062:	089b      	lsrpl	r3, r3, #2
 8008064:	6003      	strmi	r3, [r0, #0]
 8008066:	2201      	movmi	r2, #1
 8008068:	bf5c      	itt	pl
 800806a:	6003      	strpl	r3, [r0, #0]
 800806c:	2202      	movpl	r2, #2
 800806e:	4610      	mov	r0, r2
 8008070:	4770      	bx	lr
 8008072:	b299      	uxth	r1, r3
 8008074:	b909      	cbnz	r1, 800807a <__lo0bits+0x2a>
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	2210      	movs	r2, #16
 800807a:	b2d9      	uxtb	r1, r3
 800807c:	b909      	cbnz	r1, 8008082 <__lo0bits+0x32>
 800807e:	3208      	adds	r2, #8
 8008080:	0a1b      	lsrs	r3, r3, #8
 8008082:	0719      	lsls	r1, r3, #28
 8008084:	bf04      	itt	eq
 8008086:	091b      	lsreq	r3, r3, #4
 8008088:	3204      	addeq	r2, #4
 800808a:	0799      	lsls	r1, r3, #30
 800808c:	bf04      	itt	eq
 800808e:	089b      	lsreq	r3, r3, #2
 8008090:	3202      	addeq	r2, #2
 8008092:	07d9      	lsls	r1, r3, #31
 8008094:	d403      	bmi.n	800809e <__lo0bits+0x4e>
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	f102 0201 	add.w	r2, r2, #1
 800809c:	d003      	beq.n	80080a6 <__lo0bits+0x56>
 800809e:	6003      	str	r3, [r0, #0]
 80080a0:	e7e5      	b.n	800806e <__lo0bits+0x1e>
 80080a2:	2200      	movs	r2, #0
 80080a4:	e7e3      	b.n	800806e <__lo0bits+0x1e>
 80080a6:	2220      	movs	r2, #32
 80080a8:	e7e1      	b.n	800806e <__lo0bits+0x1e>
	...

080080ac <__i2b>:
 80080ac:	b510      	push	{r4, lr}
 80080ae:	460c      	mov	r4, r1
 80080b0:	2101      	movs	r1, #1
 80080b2:	f7ff ff05 	bl	8007ec0 <_Balloc>
 80080b6:	4602      	mov	r2, r0
 80080b8:	b928      	cbnz	r0, 80080c6 <__i2b+0x1a>
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <__i2b+0x24>)
 80080bc:	4805      	ldr	r0, [pc, #20]	; (80080d4 <__i2b+0x28>)
 80080be:	f240 1145 	movw	r1, #325	; 0x145
 80080c2:	f000 fcb7 	bl	8008a34 <__assert_func>
 80080c6:	2301      	movs	r3, #1
 80080c8:	6144      	str	r4, [r0, #20]
 80080ca:	6103      	str	r3, [r0, #16]
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop
 80080d0:	08009aa0 	.word	0x08009aa0
 80080d4:	08009ab1 	.word	0x08009ab1

080080d8 <__multiply>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	4691      	mov	r9, r2
 80080de:	690a      	ldr	r2, [r1, #16]
 80080e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	bfb8      	it	lt
 80080e8:	460b      	movlt	r3, r1
 80080ea:	460c      	mov	r4, r1
 80080ec:	bfbc      	itt	lt
 80080ee:	464c      	movlt	r4, r9
 80080f0:	4699      	movlt	r9, r3
 80080f2:	6927      	ldr	r7, [r4, #16]
 80080f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080f8:	68a3      	ldr	r3, [r4, #8]
 80080fa:	6861      	ldr	r1, [r4, #4]
 80080fc:	eb07 060a 	add.w	r6, r7, sl
 8008100:	42b3      	cmp	r3, r6
 8008102:	b085      	sub	sp, #20
 8008104:	bfb8      	it	lt
 8008106:	3101      	addlt	r1, #1
 8008108:	f7ff feda 	bl	8007ec0 <_Balloc>
 800810c:	b930      	cbnz	r0, 800811c <__multiply+0x44>
 800810e:	4602      	mov	r2, r0
 8008110:	4b44      	ldr	r3, [pc, #272]	; (8008224 <__multiply+0x14c>)
 8008112:	4845      	ldr	r0, [pc, #276]	; (8008228 <__multiply+0x150>)
 8008114:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008118:	f000 fc8c 	bl	8008a34 <__assert_func>
 800811c:	f100 0514 	add.w	r5, r0, #20
 8008120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008124:	462b      	mov	r3, r5
 8008126:	2200      	movs	r2, #0
 8008128:	4543      	cmp	r3, r8
 800812a:	d321      	bcc.n	8008170 <__multiply+0x98>
 800812c:	f104 0314 	add.w	r3, r4, #20
 8008130:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008134:	f109 0314 	add.w	r3, r9, #20
 8008138:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800813c:	9202      	str	r2, [sp, #8]
 800813e:	1b3a      	subs	r2, r7, r4
 8008140:	3a15      	subs	r2, #21
 8008142:	f022 0203 	bic.w	r2, r2, #3
 8008146:	3204      	adds	r2, #4
 8008148:	f104 0115 	add.w	r1, r4, #21
 800814c:	428f      	cmp	r7, r1
 800814e:	bf38      	it	cc
 8008150:	2204      	movcc	r2, #4
 8008152:	9201      	str	r2, [sp, #4]
 8008154:	9a02      	ldr	r2, [sp, #8]
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	429a      	cmp	r2, r3
 800815a:	d80c      	bhi.n	8008176 <__multiply+0x9e>
 800815c:	2e00      	cmp	r6, #0
 800815e:	dd03      	ble.n	8008168 <__multiply+0x90>
 8008160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008164:	2b00      	cmp	r3, #0
 8008166:	d05b      	beq.n	8008220 <__multiply+0x148>
 8008168:	6106      	str	r6, [r0, #16]
 800816a:	b005      	add	sp, #20
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	f843 2b04 	str.w	r2, [r3], #4
 8008174:	e7d8      	b.n	8008128 <__multiply+0x50>
 8008176:	f8b3 a000 	ldrh.w	sl, [r3]
 800817a:	f1ba 0f00 	cmp.w	sl, #0
 800817e:	d024      	beq.n	80081ca <__multiply+0xf2>
 8008180:	f104 0e14 	add.w	lr, r4, #20
 8008184:	46a9      	mov	r9, r5
 8008186:	f04f 0c00 	mov.w	ip, #0
 800818a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800818e:	f8d9 1000 	ldr.w	r1, [r9]
 8008192:	fa1f fb82 	uxth.w	fp, r2
 8008196:	b289      	uxth	r1, r1
 8008198:	fb0a 110b 	mla	r1, sl, fp, r1
 800819c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081a0:	f8d9 2000 	ldr.w	r2, [r9]
 80081a4:	4461      	add	r1, ip
 80081a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80081ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081b2:	b289      	uxth	r1, r1
 80081b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081b8:	4577      	cmp	r7, lr
 80081ba:	f849 1b04 	str.w	r1, [r9], #4
 80081be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081c2:	d8e2      	bhi.n	800818a <__multiply+0xb2>
 80081c4:	9a01      	ldr	r2, [sp, #4]
 80081c6:	f845 c002 	str.w	ip, [r5, r2]
 80081ca:	9a03      	ldr	r2, [sp, #12]
 80081cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081d0:	3304      	adds	r3, #4
 80081d2:	f1b9 0f00 	cmp.w	r9, #0
 80081d6:	d021      	beq.n	800821c <__multiply+0x144>
 80081d8:	6829      	ldr	r1, [r5, #0]
 80081da:	f104 0c14 	add.w	ip, r4, #20
 80081de:	46ae      	mov	lr, r5
 80081e0:	f04f 0a00 	mov.w	sl, #0
 80081e4:	f8bc b000 	ldrh.w	fp, [ip]
 80081e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081ec:	fb09 220b 	mla	r2, r9, fp, r2
 80081f0:	4452      	add	r2, sl
 80081f2:	b289      	uxth	r1, r1
 80081f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081f8:	f84e 1b04 	str.w	r1, [lr], #4
 80081fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008200:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008204:	f8be 1000 	ldrh.w	r1, [lr]
 8008208:	fb09 110a 	mla	r1, r9, sl, r1
 800820c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008210:	4567      	cmp	r7, ip
 8008212:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008216:	d8e5      	bhi.n	80081e4 <__multiply+0x10c>
 8008218:	9a01      	ldr	r2, [sp, #4]
 800821a:	50a9      	str	r1, [r5, r2]
 800821c:	3504      	adds	r5, #4
 800821e:	e799      	b.n	8008154 <__multiply+0x7c>
 8008220:	3e01      	subs	r6, #1
 8008222:	e79b      	b.n	800815c <__multiply+0x84>
 8008224:	08009aa0 	.word	0x08009aa0
 8008228:	08009ab1 	.word	0x08009ab1

0800822c <__pow5mult>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4615      	mov	r5, r2
 8008232:	f012 0203 	ands.w	r2, r2, #3
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	d007      	beq.n	800824c <__pow5mult+0x20>
 800823c:	4c25      	ldr	r4, [pc, #148]	; (80082d4 <__pow5mult+0xa8>)
 800823e:	3a01      	subs	r2, #1
 8008240:	2300      	movs	r3, #0
 8008242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008246:	f7ff fe9d 	bl	8007f84 <__multadd>
 800824a:	4607      	mov	r7, r0
 800824c:	10ad      	asrs	r5, r5, #2
 800824e:	d03d      	beq.n	80082cc <__pow5mult+0xa0>
 8008250:	69f4      	ldr	r4, [r6, #28]
 8008252:	b97c      	cbnz	r4, 8008274 <__pow5mult+0x48>
 8008254:	2010      	movs	r0, #16
 8008256:	f7ff fd7f 	bl	8007d58 <malloc>
 800825a:	4602      	mov	r2, r0
 800825c:	61f0      	str	r0, [r6, #28]
 800825e:	b928      	cbnz	r0, 800826c <__pow5mult+0x40>
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <__pow5mult+0xac>)
 8008262:	481e      	ldr	r0, [pc, #120]	; (80082dc <__pow5mult+0xb0>)
 8008264:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008268:	f000 fbe4 	bl	8008a34 <__assert_func>
 800826c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008270:	6004      	str	r4, [r0, #0]
 8008272:	60c4      	str	r4, [r0, #12]
 8008274:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800827c:	b94c      	cbnz	r4, 8008292 <__pow5mult+0x66>
 800827e:	f240 2171 	movw	r1, #625	; 0x271
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ff12 	bl	80080ac <__i2b>
 8008288:	2300      	movs	r3, #0
 800828a:	f8c8 0008 	str.w	r0, [r8, #8]
 800828e:	4604      	mov	r4, r0
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	f04f 0900 	mov.w	r9, #0
 8008296:	07eb      	lsls	r3, r5, #31
 8008298:	d50a      	bpl.n	80082b0 <__pow5mult+0x84>
 800829a:	4639      	mov	r1, r7
 800829c:	4622      	mov	r2, r4
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff ff1a 	bl	80080d8 <__multiply>
 80082a4:	4639      	mov	r1, r7
 80082a6:	4680      	mov	r8, r0
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff fe49 	bl	8007f40 <_Bfree>
 80082ae:	4647      	mov	r7, r8
 80082b0:	106d      	asrs	r5, r5, #1
 80082b2:	d00b      	beq.n	80082cc <__pow5mult+0xa0>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	b938      	cbnz	r0, 80082c8 <__pow5mult+0x9c>
 80082b8:	4622      	mov	r2, r4
 80082ba:	4621      	mov	r1, r4
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff ff0b 	bl	80080d8 <__multiply>
 80082c2:	6020      	str	r0, [r4, #0]
 80082c4:	f8c0 9000 	str.w	r9, [r0]
 80082c8:	4604      	mov	r4, r0
 80082ca:	e7e4      	b.n	8008296 <__pow5mult+0x6a>
 80082cc:	4638      	mov	r0, r7
 80082ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d2:	bf00      	nop
 80082d4:	08009c00 	.word	0x08009c00
 80082d8:	08009a31 	.word	0x08009a31
 80082dc:	08009ab1 	.word	0x08009ab1

080082e0 <__lshift>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	460c      	mov	r4, r1
 80082e6:	6849      	ldr	r1, [r1, #4]
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	4607      	mov	r7, r0
 80082f2:	4691      	mov	r9, r2
 80082f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082f8:	f108 0601 	add.w	r6, r8, #1
 80082fc:	42b3      	cmp	r3, r6
 80082fe:	db0b      	blt.n	8008318 <__lshift+0x38>
 8008300:	4638      	mov	r0, r7
 8008302:	f7ff fddd 	bl	8007ec0 <_Balloc>
 8008306:	4605      	mov	r5, r0
 8008308:	b948      	cbnz	r0, 800831e <__lshift+0x3e>
 800830a:	4602      	mov	r2, r0
 800830c:	4b28      	ldr	r3, [pc, #160]	; (80083b0 <__lshift+0xd0>)
 800830e:	4829      	ldr	r0, [pc, #164]	; (80083b4 <__lshift+0xd4>)
 8008310:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008314:	f000 fb8e 	bl	8008a34 <__assert_func>
 8008318:	3101      	adds	r1, #1
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	e7ee      	b.n	80082fc <__lshift+0x1c>
 800831e:	2300      	movs	r3, #0
 8008320:	f100 0114 	add.w	r1, r0, #20
 8008324:	f100 0210 	add.w	r2, r0, #16
 8008328:	4618      	mov	r0, r3
 800832a:	4553      	cmp	r3, sl
 800832c:	db33      	blt.n	8008396 <__lshift+0xb6>
 800832e:	6920      	ldr	r0, [r4, #16]
 8008330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008334:	f104 0314 	add.w	r3, r4, #20
 8008338:	f019 091f 	ands.w	r9, r9, #31
 800833c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008344:	d02b      	beq.n	800839e <__lshift+0xbe>
 8008346:	f1c9 0e20 	rsb	lr, r9, #32
 800834a:	468a      	mov	sl, r1
 800834c:	2200      	movs	r2, #0
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	fa00 f009 	lsl.w	r0, r0, r9
 8008354:	4310      	orrs	r0, r2
 8008356:	f84a 0b04 	str.w	r0, [sl], #4
 800835a:	f853 2b04 	ldr.w	r2, [r3], #4
 800835e:	459c      	cmp	ip, r3
 8008360:	fa22 f20e 	lsr.w	r2, r2, lr
 8008364:	d8f3      	bhi.n	800834e <__lshift+0x6e>
 8008366:	ebac 0304 	sub.w	r3, ip, r4
 800836a:	3b15      	subs	r3, #21
 800836c:	f023 0303 	bic.w	r3, r3, #3
 8008370:	3304      	adds	r3, #4
 8008372:	f104 0015 	add.w	r0, r4, #21
 8008376:	4584      	cmp	ip, r0
 8008378:	bf38      	it	cc
 800837a:	2304      	movcc	r3, #4
 800837c:	50ca      	str	r2, [r1, r3]
 800837e:	b10a      	cbz	r2, 8008384 <__lshift+0xa4>
 8008380:	f108 0602 	add.w	r6, r8, #2
 8008384:	3e01      	subs	r6, #1
 8008386:	4638      	mov	r0, r7
 8008388:	612e      	str	r6, [r5, #16]
 800838a:	4621      	mov	r1, r4
 800838c:	f7ff fdd8 	bl	8007f40 <_Bfree>
 8008390:	4628      	mov	r0, r5
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	f842 0f04 	str.w	r0, [r2, #4]!
 800839a:	3301      	adds	r3, #1
 800839c:	e7c5      	b.n	800832a <__lshift+0x4a>
 800839e:	3904      	subs	r1, #4
 80083a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80083a8:	459c      	cmp	ip, r3
 80083aa:	d8f9      	bhi.n	80083a0 <__lshift+0xc0>
 80083ac:	e7ea      	b.n	8008384 <__lshift+0xa4>
 80083ae:	bf00      	nop
 80083b0:	08009aa0 	.word	0x08009aa0
 80083b4:	08009ab1 	.word	0x08009ab1

080083b8 <__mcmp>:
 80083b8:	b530      	push	{r4, r5, lr}
 80083ba:	6902      	ldr	r2, [r0, #16]
 80083bc:	690c      	ldr	r4, [r1, #16]
 80083be:	1b12      	subs	r2, r2, r4
 80083c0:	d10e      	bne.n	80083e0 <__mcmp+0x28>
 80083c2:	f100 0314 	add.w	r3, r0, #20
 80083c6:	3114      	adds	r1, #20
 80083c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083d8:	42a5      	cmp	r5, r4
 80083da:	d003      	beq.n	80083e4 <__mcmp+0x2c>
 80083dc:	d305      	bcc.n	80083ea <__mcmp+0x32>
 80083de:	2201      	movs	r2, #1
 80083e0:	4610      	mov	r0, r2
 80083e2:	bd30      	pop	{r4, r5, pc}
 80083e4:	4283      	cmp	r3, r0
 80083e6:	d3f3      	bcc.n	80083d0 <__mcmp+0x18>
 80083e8:	e7fa      	b.n	80083e0 <__mcmp+0x28>
 80083ea:	f04f 32ff 	mov.w	r2, #4294967295
 80083ee:	e7f7      	b.n	80083e0 <__mcmp+0x28>

080083f0 <__mdiff>:
 80083f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	4606      	mov	r6, r0
 80083f8:	4611      	mov	r1, r2
 80083fa:	4620      	mov	r0, r4
 80083fc:	4690      	mov	r8, r2
 80083fe:	f7ff ffdb 	bl	80083b8 <__mcmp>
 8008402:	1e05      	subs	r5, r0, #0
 8008404:	d110      	bne.n	8008428 <__mdiff+0x38>
 8008406:	4629      	mov	r1, r5
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff fd59 	bl	8007ec0 <_Balloc>
 800840e:	b930      	cbnz	r0, 800841e <__mdiff+0x2e>
 8008410:	4b3a      	ldr	r3, [pc, #232]	; (80084fc <__mdiff+0x10c>)
 8008412:	4602      	mov	r2, r0
 8008414:	f240 2137 	movw	r1, #567	; 0x237
 8008418:	4839      	ldr	r0, [pc, #228]	; (8008500 <__mdiff+0x110>)
 800841a:	f000 fb0b 	bl	8008a34 <__assert_func>
 800841e:	2301      	movs	r3, #1
 8008420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	bfa4      	itt	ge
 800842a:	4643      	movge	r3, r8
 800842c:	46a0      	movge	r8, r4
 800842e:	4630      	mov	r0, r6
 8008430:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008434:	bfa6      	itte	ge
 8008436:	461c      	movge	r4, r3
 8008438:	2500      	movge	r5, #0
 800843a:	2501      	movlt	r5, #1
 800843c:	f7ff fd40 	bl	8007ec0 <_Balloc>
 8008440:	b920      	cbnz	r0, 800844c <__mdiff+0x5c>
 8008442:	4b2e      	ldr	r3, [pc, #184]	; (80084fc <__mdiff+0x10c>)
 8008444:	4602      	mov	r2, r0
 8008446:	f240 2145 	movw	r1, #581	; 0x245
 800844a:	e7e5      	b.n	8008418 <__mdiff+0x28>
 800844c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008450:	6926      	ldr	r6, [r4, #16]
 8008452:	60c5      	str	r5, [r0, #12]
 8008454:	f104 0914 	add.w	r9, r4, #20
 8008458:	f108 0514 	add.w	r5, r8, #20
 800845c:	f100 0e14 	add.w	lr, r0, #20
 8008460:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008464:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008468:	f108 0210 	add.w	r2, r8, #16
 800846c:	46f2      	mov	sl, lr
 800846e:	2100      	movs	r1, #0
 8008470:	f859 3b04 	ldr.w	r3, [r9], #4
 8008474:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008478:	fa11 f88b 	uxtah	r8, r1, fp
 800847c:	b299      	uxth	r1, r3
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	eba8 0801 	sub.w	r8, r8, r1
 8008484:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008488:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800848c:	fa1f f888 	uxth.w	r8, r8
 8008490:	1419      	asrs	r1, r3, #16
 8008492:	454e      	cmp	r6, r9
 8008494:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008498:	f84a 3b04 	str.w	r3, [sl], #4
 800849c:	d8e8      	bhi.n	8008470 <__mdiff+0x80>
 800849e:	1b33      	subs	r3, r6, r4
 80084a0:	3b15      	subs	r3, #21
 80084a2:	f023 0303 	bic.w	r3, r3, #3
 80084a6:	3304      	adds	r3, #4
 80084a8:	3415      	adds	r4, #21
 80084aa:	42a6      	cmp	r6, r4
 80084ac:	bf38      	it	cc
 80084ae:	2304      	movcc	r3, #4
 80084b0:	441d      	add	r5, r3
 80084b2:	4473      	add	r3, lr
 80084b4:	469e      	mov	lr, r3
 80084b6:	462e      	mov	r6, r5
 80084b8:	4566      	cmp	r6, ip
 80084ba:	d30e      	bcc.n	80084da <__mdiff+0xea>
 80084bc:	f10c 0203 	add.w	r2, ip, #3
 80084c0:	1b52      	subs	r2, r2, r5
 80084c2:	f022 0203 	bic.w	r2, r2, #3
 80084c6:	3d03      	subs	r5, #3
 80084c8:	45ac      	cmp	ip, r5
 80084ca:	bf38      	it	cc
 80084cc:	2200      	movcc	r2, #0
 80084ce:	4413      	add	r3, r2
 80084d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80084d4:	b17a      	cbz	r2, 80084f6 <__mdiff+0x106>
 80084d6:	6107      	str	r7, [r0, #16]
 80084d8:	e7a4      	b.n	8008424 <__mdiff+0x34>
 80084da:	f856 8b04 	ldr.w	r8, [r6], #4
 80084de:	fa11 f288 	uxtah	r2, r1, r8
 80084e2:	1414      	asrs	r4, r2, #16
 80084e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084e8:	b292      	uxth	r2, r2
 80084ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80084ee:	f84e 2b04 	str.w	r2, [lr], #4
 80084f2:	1421      	asrs	r1, r4, #16
 80084f4:	e7e0      	b.n	80084b8 <__mdiff+0xc8>
 80084f6:	3f01      	subs	r7, #1
 80084f8:	e7ea      	b.n	80084d0 <__mdiff+0xe0>
 80084fa:	bf00      	nop
 80084fc:	08009aa0 	.word	0x08009aa0
 8008500:	08009ab1 	.word	0x08009ab1

08008504 <__d2b>:
 8008504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008508:	460f      	mov	r7, r1
 800850a:	2101      	movs	r1, #1
 800850c:	ec59 8b10 	vmov	r8, r9, d0
 8008510:	4616      	mov	r6, r2
 8008512:	f7ff fcd5 	bl	8007ec0 <_Balloc>
 8008516:	4604      	mov	r4, r0
 8008518:	b930      	cbnz	r0, 8008528 <__d2b+0x24>
 800851a:	4602      	mov	r2, r0
 800851c:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <__d2b+0xac>)
 800851e:	4825      	ldr	r0, [pc, #148]	; (80085b4 <__d2b+0xb0>)
 8008520:	f240 310f 	movw	r1, #783	; 0x30f
 8008524:	f000 fa86 	bl	8008a34 <__assert_func>
 8008528:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800852c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008530:	bb2d      	cbnz	r5, 800857e <__d2b+0x7a>
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	f1b8 0300 	subs.w	r3, r8, #0
 8008538:	d026      	beq.n	8008588 <__d2b+0x84>
 800853a:	4668      	mov	r0, sp
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	f7ff fd87 	bl	8008050 <__lo0bits>
 8008542:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008546:	b1e8      	cbz	r0, 8008584 <__d2b+0x80>
 8008548:	f1c0 0320 	rsb	r3, r0, #32
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	430b      	orrs	r3, r1
 8008552:	40c2      	lsrs	r2, r0
 8008554:	6163      	str	r3, [r4, #20]
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	61a3      	str	r3, [r4, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bf14      	ite	ne
 8008560:	2202      	movne	r2, #2
 8008562:	2201      	moveq	r2, #1
 8008564:	6122      	str	r2, [r4, #16]
 8008566:	b1bd      	cbz	r5, 8008598 <__d2b+0x94>
 8008568:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800856c:	4405      	add	r5, r0
 800856e:	603d      	str	r5, [r7, #0]
 8008570:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008574:	6030      	str	r0, [r6, #0]
 8008576:	4620      	mov	r0, r4
 8008578:	b003      	add	sp, #12
 800857a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800857e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008582:	e7d6      	b.n	8008532 <__d2b+0x2e>
 8008584:	6161      	str	r1, [r4, #20]
 8008586:	e7e7      	b.n	8008558 <__d2b+0x54>
 8008588:	a801      	add	r0, sp, #4
 800858a:	f7ff fd61 	bl	8008050 <__lo0bits>
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	6163      	str	r3, [r4, #20]
 8008592:	3020      	adds	r0, #32
 8008594:	2201      	movs	r2, #1
 8008596:	e7e5      	b.n	8008564 <__d2b+0x60>
 8008598:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800859c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085a0:	6038      	str	r0, [r7, #0]
 80085a2:	6918      	ldr	r0, [r3, #16]
 80085a4:	f7ff fd34 	bl	8008010 <__hi0bits>
 80085a8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085ac:	e7e2      	b.n	8008574 <__d2b+0x70>
 80085ae:	bf00      	nop
 80085b0:	08009aa0 	.word	0x08009aa0
 80085b4:	08009ab1 	.word	0x08009ab1

080085b8 <__ssputs_r>:
 80085b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	688e      	ldr	r6, [r1, #8]
 80085be:	461f      	mov	r7, r3
 80085c0:	42be      	cmp	r6, r7
 80085c2:	680b      	ldr	r3, [r1, #0]
 80085c4:	4682      	mov	sl, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4690      	mov	r8, r2
 80085ca:	d82c      	bhi.n	8008626 <__ssputs_r+0x6e>
 80085cc:	898a      	ldrh	r2, [r1, #12]
 80085ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d2:	d026      	beq.n	8008622 <__ssputs_r+0x6a>
 80085d4:	6965      	ldr	r5, [r4, #20]
 80085d6:	6909      	ldr	r1, [r1, #16]
 80085d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085dc:	eba3 0901 	sub.w	r9, r3, r1
 80085e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085e4:	1c7b      	adds	r3, r7, #1
 80085e6:	444b      	add	r3, r9
 80085e8:	106d      	asrs	r5, r5, #1
 80085ea:	429d      	cmp	r5, r3
 80085ec:	bf38      	it	cc
 80085ee:	461d      	movcc	r5, r3
 80085f0:	0553      	lsls	r3, r2, #21
 80085f2:	d527      	bpl.n	8008644 <__ssputs_r+0x8c>
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7ff fbd7 	bl	8007da8 <_malloc_r>
 80085fa:	4606      	mov	r6, r0
 80085fc:	b360      	cbz	r0, 8008658 <__ssputs_r+0xa0>
 80085fe:	6921      	ldr	r1, [r4, #16]
 8008600:	464a      	mov	r2, r9
 8008602:	f000 fa09 	bl	8008a18 <memcpy>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	81a3      	strh	r3, [r4, #12]
 8008612:	6126      	str	r6, [r4, #16]
 8008614:	6165      	str	r5, [r4, #20]
 8008616:	444e      	add	r6, r9
 8008618:	eba5 0509 	sub.w	r5, r5, r9
 800861c:	6026      	str	r6, [r4, #0]
 800861e:	60a5      	str	r5, [r4, #8]
 8008620:	463e      	mov	r6, r7
 8008622:	42be      	cmp	r6, r7
 8008624:	d900      	bls.n	8008628 <__ssputs_r+0x70>
 8008626:	463e      	mov	r6, r7
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	4632      	mov	r2, r6
 800862c:	4641      	mov	r1, r8
 800862e:	f000 f9c9 	bl	80089c4 <memmove>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	4433      	add	r3, r6
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	2000      	movs	r0, #0
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	462a      	mov	r2, r5
 8008646:	f000 fa3b 	bl	8008ac0 <_realloc_r>
 800864a:	4606      	mov	r6, r0
 800864c:	2800      	cmp	r0, #0
 800864e:	d1e0      	bne.n	8008612 <__ssputs_r+0x5a>
 8008650:	6921      	ldr	r1, [r4, #16]
 8008652:	4650      	mov	r0, sl
 8008654:	f7ff fb34 	bl	8007cc0 <_free_r>
 8008658:	230c      	movs	r3, #12
 800865a:	f8ca 3000 	str.w	r3, [sl]
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008664:	81a3      	strh	r3, [r4, #12]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	e7e9      	b.n	8008640 <__ssputs_r+0x88>

0800866c <_svfiprintf_r>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	4698      	mov	r8, r3
 8008672:	898b      	ldrh	r3, [r1, #12]
 8008674:	061b      	lsls	r3, r3, #24
 8008676:	b09d      	sub	sp, #116	; 0x74
 8008678:	4607      	mov	r7, r0
 800867a:	460d      	mov	r5, r1
 800867c:	4614      	mov	r4, r2
 800867e:	d50e      	bpl.n	800869e <_svfiprintf_r+0x32>
 8008680:	690b      	ldr	r3, [r1, #16]
 8008682:	b963      	cbnz	r3, 800869e <_svfiprintf_r+0x32>
 8008684:	2140      	movs	r1, #64	; 0x40
 8008686:	f7ff fb8f 	bl	8007da8 <_malloc_r>
 800868a:	6028      	str	r0, [r5, #0]
 800868c:	6128      	str	r0, [r5, #16]
 800868e:	b920      	cbnz	r0, 800869a <_svfiprintf_r+0x2e>
 8008690:	230c      	movs	r3, #12
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	e0d0      	b.n	800883c <_svfiprintf_r+0x1d0>
 800869a:	2340      	movs	r3, #64	; 0x40
 800869c:	616b      	str	r3, [r5, #20]
 800869e:	2300      	movs	r3, #0
 80086a0:	9309      	str	r3, [sp, #36]	; 0x24
 80086a2:	2320      	movs	r3, #32
 80086a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ac:	2330      	movs	r3, #48	; 0x30
 80086ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008854 <_svfiprintf_r+0x1e8>
 80086b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b6:	f04f 0901 	mov.w	r9, #1
 80086ba:	4623      	mov	r3, r4
 80086bc:	469a      	mov	sl, r3
 80086be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c2:	b10a      	cbz	r2, 80086c8 <_svfiprintf_r+0x5c>
 80086c4:	2a25      	cmp	r2, #37	; 0x25
 80086c6:	d1f9      	bne.n	80086bc <_svfiprintf_r+0x50>
 80086c8:	ebba 0b04 	subs.w	fp, sl, r4
 80086cc:	d00b      	beq.n	80086e6 <_svfiprintf_r+0x7a>
 80086ce:	465b      	mov	r3, fp
 80086d0:	4622      	mov	r2, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff ff6f 	bl	80085b8 <__ssputs_r>
 80086da:	3001      	adds	r0, #1
 80086dc:	f000 80a9 	beq.w	8008832 <_svfiprintf_r+0x1c6>
 80086e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e2:	445a      	add	r2, fp
 80086e4:	9209      	str	r2, [sp, #36]	; 0x24
 80086e6:	f89a 3000 	ldrb.w	r3, [sl]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80a1 	beq.w	8008832 <_svfiprintf_r+0x1c6>
 80086f0:	2300      	movs	r3, #0
 80086f2:	f04f 32ff 	mov.w	r2, #4294967295
 80086f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086fa:	f10a 0a01 	add.w	sl, sl, #1
 80086fe:	9304      	str	r3, [sp, #16]
 8008700:	9307      	str	r3, [sp, #28]
 8008702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008706:	931a      	str	r3, [sp, #104]	; 0x68
 8008708:	4654      	mov	r4, sl
 800870a:	2205      	movs	r2, #5
 800870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008710:	4850      	ldr	r0, [pc, #320]	; (8008854 <_svfiprintf_r+0x1e8>)
 8008712:	f7f7 fd95 	bl	8000240 <memchr>
 8008716:	9a04      	ldr	r2, [sp, #16]
 8008718:	b9d8      	cbnz	r0, 8008752 <_svfiprintf_r+0xe6>
 800871a:	06d0      	lsls	r0, r2, #27
 800871c:	bf44      	itt	mi
 800871e:	2320      	movmi	r3, #32
 8008720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008724:	0711      	lsls	r1, r2, #28
 8008726:	bf44      	itt	mi
 8008728:	232b      	movmi	r3, #43	; 0x2b
 800872a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872e:	f89a 3000 	ldrb.w	r3, [sl]
 8008732:	2b2a      	cmp	r3, #42	; 0x2a
 8008734:	d015      	beq.n	8008762 <_svfiprintf_r+0xf6>
 8008736:	9a07      	ldr	r2, [sp, #28]
 8008738:	4654      	mov	r4, sl
 800873a:	2000      	movs	r0, #0
 800873c:	f04f 0c0a 	mov.w	ip, #10
 8008740:	4621      	mov	r1, r4
 8008742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008746:	3b30      	subs	r3, #48	; 0x30
 8008748:	2b09      	cmp	r3, #9
 800874a:	d94d      	bls.n	80087e8 <_svfiprintf_r+0x17c>
 800874c:	b1b0      	cbz	r0, 800877c <_svfiprintf_r+0x110>
 800874e:	9207      	str	r2, [sp, #28]
 8008750:	e014      	b.n	800877c <_svfiprintf_r+0x110>
 8008752:	eba0 0308 	sub.w	r3, r0, r8
 8008756:	fa09 f303 	lsl.w	r3, r9, r3
 800875a:	4313      	orrs	r3, r2
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	46a2      	mov	sl, r4
 8008760:	e7d2      	b.n	8008708 <_svfiprintf_r+0x9c>
 8008762:	9b03      	ldr	r3, [sp, #12]
 8008764:	1d19      	adds	r1, r3, #4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	9103      	str	r1, [sp, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	bfbb      	ittet	lt
 800876e:	425b      	neglt	r3, r3
 8008770:	f042 0202 	orrlt.w	r2, r2, #2
 8008774:	9307      	strge	r3, [sp, #28]
 8008776:	9307      	strlt	r3, [sp, #28]
 8008778:	bfb8      	it	lt
 800877a:	9204      	strlt	r2, [sp, #16]
 800877c:	7823      	ldrb	r3, [r4, #0]
 800877e:	2b2e      	cmp	r3, #46	; 0x2e
 8008780:	d10c      	bne.n	800879c <_svfiprintf_r+0x130>
 8008782:	7863      	ldrb	r3, [r4, #1]
 8008784:	2b2a      	cmp	r3, #42	; 0x2a
 8008786:	d134      	bne.n	80087f2 <_svfiprintf_r+0x186>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	1d1a      	adds	r2, r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	9203      	str	r2, [sp, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfb8      	it	lt
 8008794:	f04f 33ff 	movlt.w	r3, #4294967295
 8008798:	3402      	adds	r4, #2
 800879a:	9305      	str	r3, [sp, #20]
 800879c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008864 <_svfiprintf_r+0x1f8>
 80087a0:	7821      	ldrb	r1, [r4, #0]
 80087a2:	2203      	movs	r2, #3
 80087a4:	4650      	mov	r0, sl
 80087a6:	f7f7 fd4b 	bl	8000240 <memchr>
 80087aa:	b138      	cbz	r0, 80087bc <_svfiprintf_r+0x150>
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	eba0 000a 	sub.w	r0, r0, sl
 80087b2:	2240      	movs	r2, #64	; 0x40
 80087b4:	4082      	lsls	r2, r0
 80087b6:	4313      	orrs	r3, r2
 80087b8:	3401      	adds	r4, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c0:	4825      	ldr	r0, [pc, #148]	; (8008858 <_svfiprintf_r+0x1ec>)
 80087c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c6:	2206      	movs	r2, #6
 80087c8:	f7f7 fd3a 	bl	8000240 <memchr>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d038      	beq.n	8008842 <_svfiprintf_r+0x1d6>
 80087d0:	4b22      	ldr	r3, [pc, #136]	; (800885c <_svfiprintf_r+0x1f0>)
 80087d2:	bb1b      	cbnz	r3, 800881c <_svfiprintf_r+0x1b0>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	3307      	adds	r3, #7
 80087d8:	f023 0307 	bic.w	r3, r3, #7
 80087dc:	3308      	adds	r3, #8
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e2:	4433      	add	r3, r6
 80087e4:	9309      	str	r3, [sp, #36]	; 0x24
 80087e6:	e768      	b.n	80086ba <_svfiprintf_r+0x4e>
 80087e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ec:	460c      	mov	r4, r1
 80087ee:	2001      	movs	r0, #1
 80087f0:	e7a6      	b.n	8008740 <_svfiprintf_r+0xd4>
 80087f2:	2300      	movs	r3, #0
 80087f4:	3401      	adds	r4, #1
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	4619      	mov	r1, r3
 80087fa:	f04f 0c0a 	mov.w	ip, #10
 80087fe:	4620      	mov	r0, r4
 8008800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008804:	3a30      	subs	r2, #48	; 0x30
 8008806:	2a09      	cmp	r2, #9
 8008808:	d903      	bls.n	8008812 <_svfiprintf_r+0x1a6>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0c6      	beq.n	800879c <_svfiprintf_r+0x130>
 800880e:	9105      	str	r1, [sp, #20]
 8008810:	e7c4      	b.n	800879c <_svfiprintf_r+0x130>
 8008812:	fb0c 2101 	mla	r1, ip, r1, r2
 8008816:	4604      	mov	r4, r0
 8008818:	2301      	movs	r3, #1
 800881a:	e7f0      	b.n	80087fe <_svfiprintf_r+0x192>
 800881c:	ab03      	add	r3, sp, #12
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	462a      	mov	r2, r5
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <_svfiprintf_r+0x1f4>)
 8008824:	a904      	add	r1, sp, #16
 8008826:	4638      	mov	r0, r7
 8008828:	f7fd ff1a 	bl	8006660 <_printf_float>
 800882c:	1c42      	adds	r2, r0, #1
 800882e:	4606      	mov	r6, r0
 8008830:	d1d6      	bne.n	80087e0 <_svfiprintf_r+0x174>
 8008832:	89ab      	ldrh	r3, [r5, #12]
 8008834:	065b      	lsls	r3, r3, #25
 8008836:	f53f af2d 	bmi.w	8008694 <_svfiprintf_r+0x28>
 800883a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883c:	b01d      	add	sp, #116	; 0x74
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	ab03      	add	r3, sp, #12
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	462a      	mov	r2, r5
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <_svfiprintf_r+0x1f4>)
 800884a:	a904      	add	r1, sp, #16
 800884c:	4638      	mov	r0, r7
 800884e:	f7fe f98f 	bl	8006b70 <_printf_i>
 8008852:	e7eb      	b.n	800882c <_svfiprintf_r+0x1c0>
 8008854:	08009c0c 	.word	0x08009c0c
 8008858:	08009c16 	.word	0x08009c16
 800885c:	08006661 	.word	0x08006661
 8008860:	080085b9 	.word	0x080085b9
 8008864:	08009c12 	.word	0x08009c12

08008868 <__sflush_r>:
 8008868:	898a      	ldrh	r2, [r1, #12]
 800886a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886e:	4605      	mov	r5, r0
 8008870:	0710      	lsls	r0, r2, #28
 8008872:	460c      	mov	r4, r1
 8008874:	d458      	bmi.n	8008928 <__sflush_r+0xc0>
 8008876:	684b      	ldr	r3, [r1, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dc05      	bgt.n	8008888 <__sflush_r+0x20>
 800887c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	dc02      	bgt.n	8008888 <__sflush_r+0x20>
 8008882:	2000      	movs	r0, #0
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800888a:	2e00      	cmp	r6, #0
 800888c:	d0f9      	beq.n	8008882 <__sflush_r+0x1a>
 800888e:	2300      	movs	r3, #0
 8008890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008894:	682f      	ldr	r7, [r5, #0]
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	d032      	beq.n	8008902 <__sflush_r+0x9a>
 800889c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	075a      	lsls	r2, r3, #29
 80088a2:	d505      	bpl.n	80088b0 <__sflush_r+0x48>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	1ac0      	subs	r0, r0, r3
 80088a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088aa:	b10b      	cbz	r3, 80088b0 <__sflush_r+0x48>
 80088ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ae:	1ac0      	subs	r0, r0, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	4602      	mov	r2, r0
 80088b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088b6:	6a21      	ldr	r1, [r4, #32]
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b0      	blx	r6
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	89a3      	ldrh	r3, [r4, #12]
 80088c0:	d106      	bne.n	80088d0 <__sflush_r+0x68>
 80088c2:	6829      	ldr	r1, [r5, #0]
 80088c4:	291d      	cmp	r1, #29
 80088c6:	d82b      	bhi.n	8008920 <__sflush_r+0xb8>
 80088c8:	4a29      	ldr	r2, [pc, #164]	; (8008970 <__sflush_r+0x108>)
 80088ca:	410a      	asrs	r2, r1
 80088cc:	07d6      	lsls	r6, r2, #31
 80088ce:	d427      	bmi.n	8008920 <__sflush_r+0xb8>
 80088d0:	2200      	movs	r2, #0
 80088d2:	6062      	str	r2, [r4, #4]
 80088d4:	04d9      	lsls	r1, r3, #19
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	d504      	bpl.n	80088e6 <__sflush_r+0x7e>
 80088dc:	1c42      	adds	r2, r0, #1
 80088de:	d101      	bne.n	80088e4 <__sflush_r+0x7c>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b903      	cbnz	r3, 80088e6 <__sflush_r+0x7e>
 80088e4:	6560      	str	r0, [r4, #84]	; 0x54
 80088e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e8:	602f      	str	r7, [r5, #0]
 80088ea:	2900      	cmp	r1, #0
 80088ec:	d0c9      	beq.n	8008882 <__sflush_r+0x1a>
 80088ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088f2:	4299      	cmp	r1, r3
 80088f4:	d002      	beq.n	80088fc <__sflush_r+0x94>
 80088f6:	4628      	mov	r0, r5
 80088f8:	f7ff f9e2 	bl	8007cc0 <_free_r>
 80088fc:	2000      	movs	r0, #0
 80088fe:	6360      	str	r0, [r4, #52]	; 0x34
 8008900:	e7c0      	b.n	8008884 <__sflush_r+0x1c>
 8008902:	2301      	movs	r3, #1
 8008904:	4628      	mov	r0, r5
 8008906:	47b0      	blx	r6
 8008908:	1c41      	adds	r1, r0, #1
 800890a:	d1c8      	bne.n	800889e <__sflush_r+0x36>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0c5      	beq.n	800889e <__sflush_r+0x36>
 8008912:	2b1d      	cmp	r3, #29
 8008914:	d001      	beq.n	800891a <__sflush_r+0xb2>
 8008916:	2b16      	cmp	r3, #22
 8008918:	d101      	bne.n	800891e <__sflush_r+0xb6>
 800891a:	602f      	str	r7, [r5, #0]
 800891c:	e7b1      	b.n	8008882 <__sflush_r+0x1a>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	e7ad      	b.n	8008884 <__sflush_r+0x1c>
 8008928:	690f      	ldr	r7, [r1, #16]
 800892a:	2f00      	cmp	r7, #0
 800892c:	d0a9      	beq.n	8008882 <__sflush_r+0x1a>
 800892e:	0793      	lsls	r3, r2, #30
 8008930:	680e      	ldr	r6, [r1, #0]
 8008932:	bf08      	it	eq
 8008934:	694b      	ldreq	r3, [r1, #20]
 8008936:	600f      	str	r7, [r1, #0]
 8008938:	bf18      	it	ne
 800893a:	2300      	movne	r3, #0
 800893c:	eba6 0807 	sub.w	r8, r6, r7
 8008940:	608b      	str	r3, [r1, #8]
 8008942:	f1b8 0f00 	cmp.w	r8, #0
 8008946:	dd9c      	ble.n	8008882 <__sflush_r+0x1a>
 8008948:	6a21      	ldr	r1, [r4, #32]
 800894a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800894c:	4643      	mov	r3, r8
 800894e:	463a      	mov	r2, r7
 8008950:	4628      	mov	r0, r5
 8008952:	47b0      	blx	r6
 8008954:	2800      	cmp	r0, #0
 8008956:	dc06      	bgt.n	8008966 <__sflush_r+0xfe>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e78e      	b.n	8008884 <__sflush_r+0x1c>
 8008966:	4407      	add	r7, r0
 8008968:	eba8 0800 	sub.w	r8, r8, r0
 800896c:	e7e9      	b.n	8008942 <__sflush_r+0xda>
 800896e:	bf00      	nop
 8008970:	dfbffffe 	.word	0xdfbffffe

08008974 <_fflush_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	690b      	ldr	r3, [r1, #16]
 8008978:	4605      	mov	r5, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b913      	cbnz	r3, 8008984 <_fflush_r+0x10>
 800897e:	2500      	movs	r5, #0
 8008980:	4628      	mov	r0, r5
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	b118      	cbz	r0, 800898e <_fflush_r+0x1a>
 8008986:	6a03      	ldr	r3, [r0, #32]
 8008988:	b90b      	cbnz	r3, 800898e <_fflush_r+0x1a>
 800898a:	f7fe fa8d 	bl	8006ea8 <__sinit>
 800898e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f3      	beq.n	800897e <_fflush_r+0xa>
 8008996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008998:	07d0      	lsls	r0, r2, #31
 800899a:	d404      	bmi.n	80089a6 <_fflush_r+0x32>
 800899c:	0599      	lsls	r1, r3, #22
 800899e:	d402      	bmi.n	80089a6 <_fflush_r+0x32>
 80089a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a2:	f7fe fb97 	bl	80070d4 <__retarget_lock_acquire_recursive>
 80089a6:	4628      	mov	r0, r5
 80089a8:	4621      	mov	r1, r4
 80089aa:	f7ff ff5d 	bl	8008868 <__sflush_r>
 80089ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b0:	07da      	lsls	r2, r3, #31
 80089b2:	4605      	mov	r5, r0
 80089b4:	d4e4      	bmi.n	8008980 <_fflush_r+0xc>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	d4e1      	bmi.n	8008980 <_fflush_r+0xc>
 80089bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089be:	f7fe fb8a 	bl	80070d6 <__retarget_lock_release_recursive>
 80089c2:	e7dd      	b.n	8008980 <_fflush_r+0xc>

080089c4 <memmove>:
 80089c4:	4288      	cmp	r0, r1
 80089c6:	b510      	push	{r4, lr}
 80089c8:	eb01 0402 	add.w	r4, r1, r2
 80089cc:	d902      	bls.n	80089d4 <memmove+0x10>
 80089ce:	4284      	cmp	r4, r0
 80089d0:	4623      	mov	r3, r4
 80089d2:	d807      	bhi.n	80089e4 <memmove+0x20>
 80089d4:	1e43      	subs	r3, r0, #1
 80089d6:	42a1      	cmp	r1, r4
 80089d8:	d008      	beq.n	80089ec <memmove+0x28>
 80089da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089e2:	e7f8      	b.n	80089d6 <memmove+0x12>
 80089e4:	4402      	add	r2, r0
 80089e6:	4601      	mov	r1, r0
 80089e8:	428a      	cmp	r2, r1
 80089ea:	d100      	bne.n	80089ee <memmove+0x2a>
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089f6:	e7f7      	b.n	80089e8 <memmove+0x24>

080089f8 <_sbrk_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d06      	ldr	r5, [pc, #24]	; (8008a14 <_sbrk_r+0x1c>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7f8 ffca 	bl	800199c <_sbrk>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_sbrk_r+0x1a>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_sbrk_r+0x1a>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000574 	.word	0x20000574

08008a18 <memcpy>:
 8008a18:	440a      	add	r2, r1
 8008a1a:	4291      	cmp	r1, r2
 8008a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a20:	d100      	bne.n	8008a24 <memcpy+0xc>
 8008a22:	4770      	bx	lr
 8008a24:	b510      	push	{r4, lr}
 8008a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2e:	4291      	cmp	r1, r2
 8008a30:	d1f9      	bne.n	8008a26 <memcpy+0xe>
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <__assert_func>:
 8008a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a36:	4614      	mov	r4, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <__assert_func+0x2c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4605      	mov	r5, r0
 8008a40:	68d8      	ldr	r0, [r3, #12]
 8008a42:	b14c      	cbz	r4, 8008a58 <__assert_func+0x24>
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <__assert_func+0x30>)
 8008a46:	9100      	str	r1, [sp, #0]
 8008a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a4c:	4906      	ldr	r1, [pc, #24]	; (8008a68 <__assert_func+0x34>)
 8008a4e:	462b      	mov	r3, r5
 8008a50:	f000 f872 	bl	8008b38 <fiprintf>
 8008a54:	f000 f882 	bl	8008b5c <abort>
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <__assert_func+0x38>)
 8008a5a:	461c      	mov	r4, r3
 8008a5c:	e7f3      	b.n	8008a46 <__assert_func+0x12>
 8008a5e:	bf00      	nop
 8008a60:	20000070 	.word	0x20000070
 8008a64:	08009c27 	.word	0x08009c27
 8008a68:	08009c34 	.word	0x08009c34
 8008a6c:	08009c62 	.word	0x08009c62

08008a70 <_calloc_r>:
 8008a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a72:	fba1 2402 	umull	r2, r4, r1, r2
 8008a76:	b94c      	cbnz	r4, 8008a8c <_calloc_r+0x1c>
 8008a78:	4611      	mov	r1, r2
 8008a7a:	9201      	str	r2, [sp, #4]
 8008a7c:	f7ff f994 	bl	8007da8 <_malloc_r>
 8008a80:	9a01      	ldr	r2, [sp, #4]
 8008a82:	4605      	mov	r5, r0
 8008a84:	b930      	cbnz	r0, 8008a94 <_calloc_r+0x24>
 8008a86:	4628      	mov	r0, r5
 8008a88:	b003      	add	sp, #12
 8008a8a:	bd30      	pop	{r4, r5, pc}
 8008a8c:	220c      	movs	r2, #12
 8008a8e:	6002      	str	r2, [r0, #0]
 8008a90:	2500      	movs	r5, #0
 8008a92:	e7f8      	b.n	8008a86 <_calloc_r+0x16>
 8008a94:	4621      	mov	r1, r4
 8008a96:	f7fe faa0 	bl	8006fda <memset>
 8008a9a:	e7f4      	b.n	8008a86 <_calloc_r+0x16>

08008a9c <__ascii_mbtowc>:
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	b901      	cbnz	r1, 8008aa2 <__ascii_mbtowc+0x6>
 8008aa0:	a901      	add	r1, sp, #4
 8008aa2:	b142      	cbz	r2, 8008ab6 <__ascii_mbtowc+0x1a>
 8008aa4:	b14b      	cbz	r3, 8008aba <__ascii_mbtowc+0x1e>
 8008aa6:	7813      	ldrb	r3, [r2, #0]
 8008aa8:	600b      	str	r3, [r1, #0]
 8008aaa:	7812      	ldrb	r2, [r2, #0]
 8008aac:	1e10      	subs	r0, r2, #0
 8008aae:	bf18      	it	ne
 8008ab0:	2001      	movne	r0, #1
 8008ab2:	b002      	add	sp, #8
 8008ab4:	4770      	bx	lr
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	e7fb      	b.n	8008ab2 <__ascii_mbtowc+0x16>
 8008aba:	f06f 0001 	mvn.w	r0, #1
 8008abe:	e7f8      	b.n	8008ab2 <__ascii_mbtowc+0x16>

08008ac0 <_realloc_r>:
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	460e      	mov	r6, r1
 8008aca:	b921      	cbnz	r1, 8008ad6 <_realloc_r+0x16>
 8008acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	f7ff b969 	b.w	8007da8 <_malloc_r>
 8008ad6:	b92a      	cbnz	r2, 8008ae4 <_realloc_r+0x24>
 8008ad8:	f7ff f8f2 	bl	8007cc0 <_free_r>
 8008adc:	4625      	mov	r5, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	f000 f841 	bl	8008b6a <_malloc_usable_size_r>
 8008ae8:	4284      	cmp	r4, r0
 8008aea:	4607      	mov	r7, r0
 8008aec:	d802      	bhi.n	8008af4 <_realloc_r+0x34>
 8008aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008af2:	d812      	bhi.n	8008b1a <_realloc_r+0x5a>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4640      	mov	r0, r8
 8008af8:	f7ff f956 	bl	8007da8 <_malloc_r>
 8008afc:	4605      	mov	r5, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d0ed      	beq.n	8008ade <_realloc_r+0x1e>
 8008b02:	42bc      	cmp	r4, r7
 8008b04:	4622      	mov	r2, r4
 8008b06:	4631      	mov	r1, r6
 8008b08:	bf28      	it	cs
 8008b0a:	463a      	movcs	r2, r7
 8008b0c:	f7ff ff84 	bl	8008a18 <memcpy>
 8008b10:	4631      	mov	r1, r6
 8008b12:	4640      	mov	r0, r8
 8008b14:	f7ff f8d4 	bl	8007cc0 <_free_r>
 8008b18:	e7e1      	b.n	8008ade <_realloc_r+0x1e>
 8008b1a:	4635      	mov	r5, r6
 8008b1c:	e7df      	b.n	8008ade <_realloc_r+0x1e>

08008b1e <__ascii_wctomb>:
 8008b1e:	b149      	cbz	r1, 8008b34 <__ascii_wctomb+0x16>
 8008b20:	2aff      	cmp	r2, #255	; 0xff
 8008b22:	bf85      	ittet	hi
 8008b24:	238a      	movhi	r3, #138	; 0x8a
 8008b26:	6003      	strhi	r3, [r0, #0]
 8008b28:	700a      	strbls	r2, [r1, #0]
 8008b2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b2e:	bf98      	it	ls
 8008b30:	2001      	movls	r0, #1
 8008b32:	4770      	bx	lr
 8008b34:	4608      	mov	r0, r1
 8008b36:	4770      	bx	lr

08008b38 <fiprintf>:
 8008b38:	b40e      	push	{r1, r2, r3}
 8008b3a:	b503      	push	{r0, r1, lr}
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	4805      	ldr	r0, [pc, #20]	; (8008b58 <fiprintf+0x20>)
 8008b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f000 f83f 	bl	8008bcc <_vfiprintf_r>
 8008b4e:	b002      	add	sp, #8
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	20000070 	.word	0x20000070

08008b5c <abort>:
 8008b5c:	b508      	push	{r3, lr}
 8008b5e:	2006      	movs	r0, #6
 8008b60:	f000 fa0c 	bl	8008f7c <raise>
 8008b64:	2001      	movs	r0, #1
 8008b66:	f7f8 fea1 	bl	80018ac <_exit>

08008b6a <_malloc_usable_size_r>:
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	1f18      	subs	r0, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfbc      	itt	lt
 8008b74:	580b      	ldrlt	r3, [r1, r0]
 8008b76:	18c0      	addlt	r0, r0, r3
 8008b78:	4770      	bx	lr

08008b7a <__sfputc_r>:
 8008b7a:	6893      	ldr	r3, [r2, #8]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	b410      	push	{r4}
 8008b82:	6093      	str	r3, [r2, #8]
 8008b84:	da08      	bge.n	8008b98 <__sfputc_r+0x1e>
 8008b86:	6994      	ldr	r4, [r2, #24]
 8008b88:	42a3      	cmp	r3, r4
 8008b8a:	db01      	blt.n	8008b90 <__sfputc_r+0x16>
 8008b8c:	290a      	cmp	r1, #10
 8008b8e:	d103      	bne.n	8008b98 <__sfputc_r+0x1e>
 8008b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b94:	f000 b934 	b.w	8008e00 <__swbuf_r>
 8008b98:	6813      	ldr	r3, [r2, #0]
 8008b9a:	1c58      	adds	r0, r3, #1
 8008b9c:	6010      	str	r0, [r2, #0]
 8008b9e:	7019      	strb	r1, [r3, #0]
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <__sfputs_r>:
 8008ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	4614      	mov	r4, r2
 8008bb0:	18d5      	adds	r5, r2, r3
 8008bb2:	42ac      	cmp	r4, r5
 8008bb4:	d101      	bne.n	8008bba <__sfputs_r+0x12>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e007      	b.n	8008bca <__sfputs_r+0x22>
 8008bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ffda 	bl	8008b7a <__sfputc_r>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d1f3      	bne.n	8008bb2 <__sfputs_r+0xa>
 8008bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bcc <_vfiprintf_r>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	b09d      	sub	sp, #116	; 0x74
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	4698      	mov	r8, r3
 8008bd8:	4606      	mov	r6, r0
 8008bda:	b118      	cbz	r0, 8008be4 <_vfiprintf_r+0x18>
 8008bdc:	6a03      	ldr	r3, [r0, #32]
 8008bde:	b90b      	cbnz	r3, 8008be4 <_vfiprintf_r+0x18>
 8008be0:	f7fe f962 	bl	8006ea8 <__sinit>
 8008be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008be6:	07d9      	lsls	r1, r3, #31
 8008be8:	d405      	bmi.n	8008bf6 <_vfiprintf_r+0x2a>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	059a      	lsls	r2, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_vfiprintf_r+0x2a>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bf2:	f7fe fa6f 	bl	80070d4 <__retarget_lock_acquire_recursive>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	071b      	lsls	r3, r3, #28
 8008bfa:	d501      	bpl.n	8008c00 <_vfiprintf_r+0x34>
 8008bfc:	692b      	ldr	r3, [r5, #16]
 8008bfe:	b99b      	cbnz	r3, 8008c28 <_vfiprintf_r+0x5c>
 8008c00:	4629      	mov	r1, r5
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f93a 	bl	8008e7c <__swsetup_r>
 8008c08:	b170      	cbz	r0, 8008c28 <_vfiprintf_r+0x5c>
 8008c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c0c:	07dc      	lsls	r4, r3, #31
 8008c0e:	d504      	bpl.n	8008c1a <_vfiprintf_r+0x4e>
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	b01d      	add	sp, #116	; 0x74
 8008c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	0598      	lsls	r0, r3, #22
 8008c1e:	d4f7      	bmi.n	8008c10 <_vfiprintf_r+0x44>
 8008c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c22:	f7fe fa58 	bl	80070d6 <__retarget_lock_release_recursive>
 8008c26:	e7f3      	b.n	8008c10 <_vfiprintf_r+0x44>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c36:	2330      	movs	r3, #48	; 0x30
 8008c38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008dec <_vfiprintf_r+0x220>
 8008c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c40:	f04f 0901 	mov.w	r9, #1
 8008c44:	4623      	mov	r3, r4
 8008c46:	469a      	mov	sl, r3
 8008c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c4c:	b10a      	cbz	r2, 8008c52 <_vfiprintf_r+0x86>
 8008c4e:	2a25      	cmp	r2, #37	; 0x25
 8008c50:	d1f9      	bne.n	8008c46 <_vfiprintf_r+0x7a>
 8008c52:	ebba 0b04 	subs.w	fp, sl, r4
 8008c56:	d00b      	beq.n	8008c70 <_vfiprintf_r+0xa4>
 8008c58:	465b      	mov	r3, fp
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ffa2 	bl	8008ba8 <__sfputs_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	f000 80a9 	beq.w	8008dbc <_vfiprintf_r+0x1f0>
 8008c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c6c:	445a      	add	r2, fp
 8008c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c70:	f89a 3000 	ldrb.w	r3, [sl]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80a1 	beq.w	8008dbc <_vfiprintf_r+0x1f0>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c84:	f10a 0a01 	add.w	sl, sl, #1
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c90:	931a      	str	r3, [sp, #104]	; 0x68
 8008c92:	4654      	mov	r4, sl
 8008c94:	2205      	movs	r2, #5
 8008c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9a:	4854      	ldr	r0, [pc, #336]	; (8008dec <_vfiprintf_r+0x220>)
 8008c9c:	f7f7 fad0 	bl	8000240 <memchr>
 8008ca0:	9a04      	ldr	r2, [sp, #16]
 8008ca2:	b9d8      	cbnz	r0, 8008cdc <_vfiprintf_r+0x110>
 8008ca4:	06d1      	lsls	r1, r2, #27
 8008ca6:	bf44      	itt	mi
 8008ca8:	2320      	movmi	r3, #32
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cae:	0713      	lsls	r3, r2, #28
 8008cb0:	bf44      	itt	mi
 8008cb2:	232b      	movmi	r3, #43	; 0x2b
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cbe:	d015      	beq.n	8008cec <_vfiprintf_r+0x120>
 8008cc0:	9a07      	ldr	r2, [sp, #28]
 8008cc2:	4654      	mov	r4, sl
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f04f 0c0a 	mov.w	ip, #10
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd0:	3b30      	subs	r3, #48	; 0x30
 8008cd2:	2b09      	cmp	r3, #9
 8008cd4:	d94d      	bls.n	8008d72 <_vfiprintf_r+0x1a6>
 8008cd6:	b1b0      	cbz	r0, 8008d06 <_vfiprintf_r+0x13a>
 8008cd8:	9207      	str	r2, [sp, #28]
 8008cda:	e014      	b.n	8008d06 <_vfiprintf_r+0x13a>
 8008cdc:	eba0 0308 	sub.w	r3, r0, r8
 8008ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	9304      	str	r3, [sp, #16]
 8008ce8:	46a2      	mov	sl, r4
 8008cea:	e7d2      	b.n	8008c92 <_vfiprintf_r+0xc6>
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	1d19      	adds	r1, r3, #4
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	9103      	str	r1, [sp, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfbb      	ittet	lt
 8008cf8:	425b      	neglt	r3, r3
 8008cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008cfe:	9307      	strge	r3, [sp, #28]
 8008d00:	9307      	strlt	r3, [sp, #28]
 8008d02:	bfb8      	it	lt
 8008d04:	9204      	strlt	r2, [sp, #16]
 8008d06:	7823      	ldrb	r3, [r4, #0]
 8008d08:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0a:	d10c      	bne.n	8008d26 <_vfiprintf_r+0x15a>
 8008d0c:	7863      	ldrb	r3, [r4, #1]
 8008d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d10:	d134      	bne.n	8008d7c <_vfiprintf_r+0x1b0>
 8008d12:	9b03      	ldr	r3, [sp, #12]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	9203      	str	r2, [sp, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfb8      	it	lt
 8008d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d22:	3402      	adds	r4, #2
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008dfc <_vfiprintf_r+0x230>
 8008d2a:	7821      	ldrb	r1, [r4, #0]
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	4650      	mov	r0, sl
 8008d30:	f7f7 fa86 	bl	8000240 <memchr>
 8008d34:	b138      	cbz	r0, 8008d46 <_vfiprintf_r+0x17a>
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	eba0 000a 	sub.w	r0, r0, sl
 8008d3c:	2240      	movs	r2, #64	; 0x40
 8008d3e:	4082      	lsls	r2, r0
 8008d40:	4313      	orrs	r3, r2
 8008d42:	3401      	adds	r4, #1
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4a:	4829      	ldr	r0, [pc, #164]	; (8008df0 <_vfiprintf_r+0x224>)
 8008d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d50:	2206      	movs	r2, #6
 8008d52:	f7f7 fa75 	bl	8000240 <memchr>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d03f      	beq.n	8008dda <_vfiprintf_r+0x20e>
 8008d5a:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <_vfiprintf_r+0x228>)
 8008d5c:	bb1b      	cbnz	r3, 8008da6 <_vfiprintf_r+0x1da>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	3307      	adds	r3, #7
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	3308      	adds	r3, #8
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6c:	443b      	add	r3, r7
 8008d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d70:	e768      	b.n	8008c44 <_vfiprintf_r+0x78>
 8008d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d76:	460c      	mov	r4, r1
 8008d78:	2001      	movs	r0, #1
 8008d7a:	e7a6      	b.n	8008cca <_vfiprintf_r+0xfe>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	3401      	adds	r4, #1
 8008d80:	9305      	str	r3, [sp, #20]
 8008d82:	4619      	mov	r1, r3
 8008d84:	f04f 0c0a 	mov.w	ip, #10
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d8e:	3a30      	subs	r2, #48	; 0x30
 8008d90:	2a09      	cmp	r2, #9
 8008d92:	d903      	bls.n	8008d9c <_vfiprintf_r+0x1d0>
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0c6      	beq.n	8008d26 <_vfiprintf_r+0x15a>
 8008d98:	9105      	str	r1, [sp, #20]
 8008d9a:	e7c4      	b.n	8008d26 <_vfiprintf_r+0x15a>
 8008d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da0:	4604      	mov	r4, r0
 8008da2:	2301      	movs	r3, #1
 8008da4:	e7f0      	b.n	8008d88 <_vfiprintf_r+0x1bc>
 8008da6:	ab03      	add	r3, sp, #12
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	462a      	mov	r2, r5
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <_vfiprintf_r+0x22c>)
 8008dae:	a904      	add	r1, sp, #16
 8008db0:	4630      	mov	r0, r6
 8008db2:	f7fd fc55 	bl	8006660 <_printf_float>
 8008db6:	4607      	mov	r7, r0
 8008db8:	1c78      	adds	r0, r7, #1
 8008dba:	d1d6      	bne.n	8008d6a <_vfiprintf_r+0x19e>
 8008dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dbe:	07d9      	lsls	r1, r3, #31
 8008dc0:	d405      	bmi.n	8008dce <_vfiprintf_r+0x202>
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	059a      	lsls	r2, r3, #22
 8008dc6:	d402      	bmi.n	8008dce <_vfiprintf_r+0x202>
 8008dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dca:	f7fe f984 	bl	80070d6 <__retarget_lock_release_recursive>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	065b      	lsls	r3, r3, #25
 8008dd2:	f53f af1d 	bmi.w	8008c10 <_vfiprintf_r+0x44>
 8008dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd8:	e71c      	b.n	8008c14 <_vfiprintf_r+0x48>
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <_vfiprintf_r+0x22c>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7fd fec3 	bl	8006b70 <_printf_i>
 8008dea:	e7e4      	b.n	8008db6 <_vfiprintf_r+0x1ea>
 8008dec:	08009c0c 	.word	0x08009c0c
 8008df0:	08009c16 	.word	0x08009c16
 8008df4:	08006661 	.word	0x08006661
 8008df8:	08008ba9 	.word	0x08008ba9
 8008dfc:	08009c12 	.word	0x08009c12

08008e00 <__swbuf_r>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	460e      	mov	r6, r1
 8008e04:	4614      	mov	r4, r2
 8008e06:	4605      	mov	r5, r0
 8008e08:	b118      	cbz	r0, 8008e12 <__swbuf_r+0x12>
 8008e0a:	6a03      	ldr	r3, [r0, #32]
 8008e0c:	b90b      	cbnz	r3, 8008e12 <__swbuf_r+0x12>
 8008e0e:	f7fe f84b 	bl	8006ea8 <__sinit>
 8008e12:	69a3      	ldr	r3, [r4, #24]
 8008e14:	60a3      	str	r3, [r4, #8]
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	071a      	lsls	r2, r3, #28
 8008e1a:	d525      	bpl.n	8008e68 <__swbuf_r+0x68>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	b31b      	cbz	r3, 8008e68 <__swbuf_r+0x68>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	1a98      	subs	r0, r3, r2
 8008e26:	6963      	ldr	r3, [r4, #20]
 8008e28:	b2f6      	uxtb	r6, r6
 8008e2a:	4283      	cmp	r3, r0
 8008e2c:	4637      	mov	r7, r6
 8008e2e:	dc04      	bgt.n	8008e3a <__swbuf_r+0x3a>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f7ff fd9e 	bl	8008974 <_fflush_r>
 8008e38:	b9e0      	cbnz	r0, 8008e74 <__swbuf_r+0x74>
 8008e3a:	68a3      	ldr	r3, [r4, #8]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	60a3      	str	r3, [r4, #8]
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	701e      	strb	r6, [r3, #0]
 8008e48:	6962      	ldr	r2, [r4, #20]
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d004      	beq.n	8008e5a <__swbuf_r+0x5a>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	07db      	lsls	r3, r3, #31
 8008e54:	d506      	bpl.n	8008e64 <__swbuf_r+0x64>
 8008e56:	2e0a      	cmp	r6, #10
 8008e58:	d104      	bne.n	8008e64 <__swbuf_r+0x64>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	f7ff fd89 	bl	8008974 <_fflush_r>
 8008e62:	b938      	cbnz	r0, 8008e74 <__swbuf_r+0x74>
 8008e64:	4638      	mov	r0, r7
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f806 	bl	8008e7c <__swsetup_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0d5      	beq.n	8008e20 <__swbuf_r+0x20>
 8008e74:	f04f 37ff 	mov.w	r7, #4294967295
 8008e78:	e7f4      	b.n	8008e64 <__swbuf_r+0x64>
	...

08008e7c <__swsetup_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4b2a      	ldr	r3, [pc, #168]	; (8008f28 <__swsetup_r+0xac>)
 8008e80:	4605      	mov	r5, r0
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	460c      	mov	r4, r1
 8008e86:	b118      	cbz	r0, 8008e90 <__swsetup_r+0x14>
 8008e88:	6a03      	ldr	r3, [r0, #32]
 8008e8a:	b90b      	cbnz	r3, 8008e90 <__swsetup_r+0x14>
 8008e8c:	f7fe f80c 	bl	8006ea8 <__sinit>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e96:	0718      	lsls	r0, r3, #28
 8008e98:	d422      	bmi.n	8008ee0 <__swsetup_r+0x64>
 8008e9a:	06d9      	lsls	r1, r3, #27
 8008e9c:	d407      	bmi.n	8008eae <__swsetup_r+0x32>
 8008e9e:	2309      	movs	r3, #9
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	e034      	b.n	8008f18 <__swsetup_r+0x9c>
 8008eae:	0758      	lsls	r0, r3, #29
 8008eb0:	d512      	bpl.n	8008ed8 <__swsetup_r+0x5c>
 8008eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eb4:	b141      	cbz	r1, 8008ec8 <__swsetup_r+0x4c>
 8008eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	d002      	beq.n	8008ec4 <__swsetup_r+0x48>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f7fe fefe 	bl	8007cc0 <_free_r>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f043 0308 	orr.w	r3, r3, #8
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	b94b      	cbnz	r3, 8008ef8 <__swsetup_r+0x7c>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eee:	d003      	beq.n	8008ef8 <__swsetup_r+0x7c>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f884 	bl	8009000 <__smakebuf_r>
 8008ef8:	89a0      	ldrh	r0, [r4, #12]
 8008efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008efe:	f010 0301 	ands.w	r3, r0, #1
 8008f02:	d00a      	beq.n	8008f1a <__swsetup_r+0x9e>
 8008f04:	2300      	movs	r3, #0
 8008f06:	60a3      	str	r3, [r4, #8]
 8008f08:	6963      	ldr	r3, [r4, #20]
 8008f0a:	425b      	negs	r3, r3
 8008f0c:	61a3      	str	r3, [r4, #24]
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	b943      	cbnz	r3, 8008f24 <__swsetup_r+0xa8>
 8008f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f16:	d1c4      	bne.n	8008ea2 <__swsetup_r+0x26>
 8008f18:	bd38      	pop	{r3, r4, r5, pc}
 8008f1a:	0781      	lsls	r1, r0, #30
 8008f1c:	bf58      	it	pl
 8008f1e:	6963      	ldrpl	r3, [r4, #20]
 8008f20:	60a3      	str	r3, [r4, #8]
 8008f22:	e7f4      	b.n	8008f0e <__swsetup_r+0x92>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7f7      	b.n	8008f18 <__swsetup_r+0x9c>
 8008f28:	20000070 	.word	0x20000070

08008f2c <_raise_r>:
 8008f2c:	291f      	cmp	r1, #31
 8008f2e:	b538      	push	{r3, r4, r5, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	d904      	bls.n	8008f40 <_raise_r+0x14>
 8008f36:	2316      	movs	r3, #22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f42:	b112      	cbz	r2, 8008f4a <_raise_r+0x1e>
 8008f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f48:	b94b      	cbnz	r3, 8008f5e <_raise_r+0x32>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f830 	bl	8008fb0 <_getpid_r>
 8008f50:	462a      	mov	r2, r5
 8008f52:	4601      	mov	r1, r0
 8008f54:	4620      	mov	r0, r4
 8008f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f5a:	f000 b817 	b.w	8008f8c <_kill_r>
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d00a      	beq.n	8008f78 <_raise_r+0x4c>
 8008f62:	1c59      	adds	r1, r3, #1
 8008f64:	d103      	bne.n	8008f6e <_raise_r+0x42>
 8008f66:	2316      	movs	r3, #22
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	e7e7      	b.n	8008f3e <_raise_r+0x12>
 8008f6e:	2400      	movs	r4, #0
 8008f70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f74:	4628      	mov	r0, r5
 8008f76:	4798      	blx	r3
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e7e0      	b.n	8008f3e <_raise_r+0x12>

08008f7c <raise>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <raise+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff bfd3 	b.w	8008f2c <_raise_r>
 8008f86:	bf00      	nop
 8008f88:	20000070 	.word	0x20000070

08008f8c <_kill_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	; (8008fac <_kill_r+0x20>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f7f8 fc77 	bl	800188c <_kill>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <_kill_r+0x1c>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b103      	cbz	r3, 8008fa8 <_kill_r+0x1c>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	20000574 	.word	0x20000574

08008fb0 <_getpid_r>:
 8008fb0:	f7f8 bc64 	b.w	800187c <_getpid>

08008fb4 <__swhatbuf_r>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	b096      	sub	sp, #88	; 0x58
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	461e      	mov	r6, r3
 8008fc4:	da0d      	bge.n	8008fe2 <__swhatbuf_r+0x2e>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fcc:	f04f 0100 	mov.w	r1, #0
 8008fd0:	bf0c      	ite	eq
 8008fd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fd6:	2340      	movne	r3, #64	; 0x40
 8008fd8:	2000      	movs	r0, #0
 8008fda:	6031      	str	r1, [r6, #0]
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	b016      	add	sp, #88	; 0x58
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	466a      	mov	r2, sp
 8008fe4:	f000 f848 	bl	8009078 <_fstat_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dbec      	blt.n	8008fc6 <__swhatbuf_r+0x12>
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ff2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ff6:	4259      	negs	r1, r3
 8008ff8:	4159      	adcs	r1, r3
 8008ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffe:	e7eb      	b.n	8008fd8 <__swhatbuf_r+0x24>

08009000 <__smakebuf_r>:
 8009000:	898b      	ldrh	r3, [r1, #12]
 8009002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009004:	079d      	lsls	r5, r3, #30
 8009006:	4606      	mov	r6, r0
 8009008:	460c      	mov	r4, r1
 800900a:	d507      	bpl.n	800901c <__smakebuf_r+0x1c>
 800900c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	2301      	movs	r3, #1
 8009016:	6163      	str	r3, [r4, #20]
 8009018:	b002      	add	sp, #8
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	ab01      	add	r3, sp, #4
 800901e:	466a      	mov	r2, sp
 8009020:	f7ff ffc8 	bl	8008fb4 <__swhatbuf_r>
 8009024:	9900      	ldr	r1, [sp, #0]
 8009026:	4605      	mov	r5, r0
 8009028:	4630      	mov	r0, r6
 800902a:	f7fe febd 	bl	8007da8 <_malloc_r>
 800902e:	b948      	cbnz	r0, 8009044 <__smakebuf_r+0x44>
 8009030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009034:	059a      	lsls	r2, r3, #22
 8009036:	d4ef      	bmi.n	8009018 <__smakebuf_r+0x18>
 8009038:	f023 0303 	bic.w	r3, r3, #3
 800903c:	f043 0302 	orr.w	r3, r3, #2
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	e7e3      	b.n	800900c <__smakebuf_r+0xc>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	6163      	str	r3, [r4, #20]
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	6120      	str	r0, [r4, #16]
 8009056:	b15b      	cbz	r3, 8009070 <__smakebuf_r+0x70>
 8009058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905c:	4630      	mov	r0, r6
 800905e:	f000 f81d 	bl	800909c <_isatty_r>
 8009062:	b128      	cbz	r0, 8009070 <__smakebuf_r+0x70>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	431d      	orrs	r5, r3
 8009074:	81a5      	strh	r5, [r4, #12]
 8009076:	e7cf      	b.n	8009018 <__smakebuf_r+0x18>

08009078 <_fstat_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d07      	ldr	r5, [pc, #28]	; (8009098 <_fstat_r+0x20>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	4611      	mov	r1, r2
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	f7f8 fc60 	bl	800194a <_fstat>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d102      	bne.n	8009094 <_fstat_r+0x1c>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	b103      	cbz	r3, 8009094 <_fstat_r+0x1c>
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	bd38      	pop	{r3, r4, r5, pc}
 8009096:	bf00      	nop
 8009098:	20000574 	.word	0x20000574

0800909c <_isatty_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4d06      	ldr	r5, [pc, #24]	; (80090b8 <_isatty_r+0x1c>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	602b      	str	r3, [r5, #0]
 80090a8:	f7f8 fc5f 	bl	800196a <_isatty>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_isatty_r+0x1a>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_isatty_r+0x1a>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20000574 	.word	0x20000574
 80090bc:	00000000 	.word	0x00000000

080090c0 <sqrt>:
 80090c0:	b508      	push	{r3, lr}
 80090c2:	ed2d 8b04 	vpush	{d8-d9}
 80090c6:	eeb0 8b40 	vmov.f64	d8, d0
 80090ca:	f000 fa9d 	bl	8009608 <__ieee754_sqrt>
 80090ce:	eeb4 8b48 	vcmp.f64	d8, d8
 80090d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d6:	d60c      	bvs.n	80090f2 <sqrt+0x32>
 80090d8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80090f8 <sqrt+0x38>
 80090dc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80090e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e4:	d505      	bpl.n	80090f2 <sqrt+0x32>
 80090e6:	f7fd ffcb 	bl	8007080 <__errno>
 80090ea:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80090ee:	2321      	movs	r3, #33	; 0x21
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	ecbd 8b04 	vpop	{d8-d9}
 80090f6:	bd08      	pop	{r3, pc}
	...

08009100 <checkint>:
 8009100:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009104:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8009108:	429a      	cmp	r2, r3
 800910a:	b570      	push	{r4, r5, r6, lr}
 800910c:	dd2a      	ble.n	8009164 <checkint+0x64>
 800910e:	f240 4333 	movw	r3, #1075	; 0x433
 8009112:	429a      	cmp	r2, r3
 8009114:	dc24      	bgt.n	8009160 <checkint+0x60>
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	f1a3 0620 	sub.w	r6, r3, #32
 800911c:	f04f 32ff 	mov.w	r2, #4294967295
 8009120:	fa02 f403 	lsl.w	r4, r2, r3
 8009124:	fa02 f606 	lsl.w	r6, r2, r6
 8009128:	f1c3 0520 	rsb	r5, r3, #32
 800912c:	fa22 f505 	lsr.w	r5, r2, r5
 8009130:	4334      	orrs	r4, r6
 8009132:	432c      	orrs	r4, r5
 8009134:	409a      	lsls	r2, r3
 8009136:	ea20 0202 	bic.w	r2, r0, r2
 800913a:	ea21 0404 	bic.w	r4, r1, r4
 800913e:	4322      	orrs	r2, r4
 8009140:	f1a3 0420 	sub.w	r4, r3, #32
 8009144:	f1c3 0220 	rsb	r2, r3, #32
 8009148:	d10c      	bne.n	8009164 <checkint+0x64>
 800914a:	40d8      	lsrs	r0, r3
 800914c:	fa01 f302 	lsl.w	r3, r1, r2
 8009150:	4318      	orrs	r0, r3
 8009152:	40e1      	lsrs	r1, r4
 8009154:	4308      	orrs	r0, r1
 8009156:	f000 0001 	and.w	r0, r0, #1
 800915a:	f1d0 0002 	rsbs	r0, r0, #2
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	2002      	movs	r0, #2
 8009162:	e7fc      	b.n	800915e <checkint+0x5e>
 8009164:	2000      	movs	r0, #0
 8009166:	e7fa      	b.n	800915e <checkint+0x5e>

08009168 <pow>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ee10 4a90 	vmov	r4, s1
 8009170:	ed2d 8b0a 	vpush	{d8-d12}
 8009174:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8009178:	ee11 aa90 	vmov	sl, s3
 800917c:	f108 32ff 	add.w	r2, r8, #4294967295
 8009180:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8009184:	429a      	cmp	r2, r3
 8009186:	ee10 5a10 	vmov	r5, s0
 800918a:	ee11 0a10 	vmov	r0, s2
 800918e:	b087      	sub	sp, #28
 8009190:	46c4      	mov	ip, r8
 8009192:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8009196:	d806      	bhi.n	80091a6 <pow+0x3e>
 8009198:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800919c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80091a0:	2b7f      	cmp	r3, #127	; 0x7f
 80091a2:	f240 8156 	bls.w	8009452 <pow+0x2ea>
 80091a6:	1802      	adds	r2, r0, r0
 80091a8:	eb4a 010a 	adc.w	r1, sl, sl
 80091ac:	f06f 0b01 	mvn.w	fp, #1
 80091b0:	1e57      	subs	r7, r2, #1
 80091b2:	f141 33ff 	adc.w	r3, r1, #4294967295
 80091b6:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80091ba:	45bb      	cmp	fp, r7
 80091bc:	eb7e 0303 	sbcs.w	r3, lr, r3
 80091c0:	d242      	bcs.n	8009248 <pow+0xe0>
 80091c2:	ea52 0301 	orrs.w	r3, r2, r1
 80091c6:	f04f 0300 	mov.w	r3, #0
 80091ca:	d10c      	bne.n	80091e6 <pow+0x7e>
 80091cc:	196d      	adds	r5, r5, r5
 80091ce:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80091d2:	4164      	adcs	r4, r4
 80091d4:	42ab      	cmp	r3, r5
 80091d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091da:	41a3      	sbcs	r3, r4
 80091dc:	f0c0 808f 	bcc.w	80092fe <pow+0x196>
 80091e0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80091e4:	e02b      	b.n	800923e <pow+0xd6>
 80091e6:	4ed4      	ldr	r6, [pc, #848]	; (8009538 <pow+0x3d0>)
 80091e8:	42b4      	cmp	r4, r6
 80091ea:	bf08      	it	eq
 80091ec:	429d      	cmpeq	r5, r3
 80091ee:	d109      	bne.n	8009204 <pow+0x9c>
 80091f0:	1800      	adds	r0, r0, r0
 80091f2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 80091f6:	eb4a 0a0a 	adc.w	sl, sl, sl
 80091fa:	4283      	cmp	r3, r0
 80091fc:	4bcf      	ldr	r3, [pc, #828]	; (800953c <pow+0x3d4>)
 80091fe:	eb73 030a 	sbcs.w	r3, r3, sl
 8009202:	e7eb      	b.n	80091dc <pow+0x74>
 8009204:	196d      	adds	r5, r5, r5
 8009206:	48ce      	ldr	r0, [pc, #824]	; (8009540 <pow+0x3d8>)
 8009208:	4164      	adcs	r4, r4
 800920a:	42ab      	cmp	r3, r5
 800920c:	eb70 0604 	sbcs.w	r6, r0, r4
 8009210:	d375      	bcc.n	80092fe <pow+0x196>
 8009212:	4281      	cmp	r1, r0
 8009214:	bf08      	it	eq
 8009216:	429a      	cmpeq	r2, r3
 8009218:	d171      	bne.n	80092fe <pow+0x196>
 800921a:	4aca      	ldr	r2, [pc, #808]	; (8009544 <pow+0x3dc>)
 800921c:	4294      	cmp	r4, r2
 800921e:	bf08      	it	eq
 8009220:	429d      	cmpeq	r5, r3
 8009222:	d0dd      	beq.n	80091e0 <pow+0x78>
 8009224:	4294      	cmp	r4, r2
 8009226:	ea6f 0a0a 	mvn.w	sl, sl
 800922a:	bf34      	ite	cc
 800922c:	2400      	movcc	r4, #0
 800922e:	2401      	movcs	r4, #1
 8009230:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8009234:	4554      	cmp	r4, sl
 8009236:	f040 81dc 	bne.w	80095f2 <pow+0x48a>
 800923a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800923e:	b007      	add	sp, #28
 8009240:	ecbd 8b0a 	vpop	{d8-d12}
 8009244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009248:	196f      	adds	r7, r5, r5
 800924a:	eb44 0904 	adc.w	r9, r4, r4
 800924e:	1e7a      	subs	r2, r7, #1
 8009250:	f169 0300 	sbc.w	r3, r9, #0
 8009254:	4593      	cmp	fp, r2
 8009256:	eb7e 0303 	sbcs.w	r3, lr, r3
 800925a:	d225      	bcs.n	80092a8 <pow+0x140>
 800925c:	ee20 0b00 	vmul.f64	d0, d0, d0
 8009260:	2c00      	cmp	r4, #0
 8009262:	da13      	bge.n	800928c <pow+0x124>
 8009264:	4651      	mov	r1, sl
 8009266:	f7ff ff4b 	bl	8009100 <checkint>
 800926a:	2801      	cmp	r0, #1
 800926c:	d10e      	bne.n	800928c <pow+0x124>
 800926e:	eeb1 0b40 	vneg.f64	d0, d0
 8009272:	ea57 0909 	orrs.w	r9, r7, r9
 8009276:	d10b      	bne.n	8009290 <pow+0x128>
 8009278:	f1ba 0f00 	cmp.w	sl, #0
 800927c:	dadf      	bge.n	800923e <pow+0xd6>
 800927e:	b007      	add	sp, #28
 8009280:	ecbd 8b0a 	vpop	{d8-d12}
 8009284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009288:	f000 b9ee 	b.w	8009668 <__math_divzero>
 800928c:	2000      	movs	r0, #0
 800928e:	e7f0      	b.n	8009272 <pow+0x10a>
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	dad3      	bge.n	800923e <pow+0xd6>
 8009296:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800929a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800929e:	ed8d 7b00 	vstr	d7, [sp]
 80092a2:	ed9d 0b00 	vldr	d0, [sp]
 80092a6:	e7ca      	b.n	800923e <pow+0xd6>
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	da2b      	bge.n	8009304 <pow+0x19c>
 80092ac:	4651      	mov	r1, sl
 80092ae:	f7ff ff27 	bl	8009100 <checkint>
 80092b2:	b930      	cbnz	r0, 80092c2 <pow+0x15a>
 80092b4:	b007      	add	sp, #28
 80092b6:	ecbd 8b0a 	vpop	{d8-d12}
 80092ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092be:	f000 b9eb 	b.w	8009698 <__math_invalid>
 80092c2:	1e41      	subs	r1, r0, #1
 80092c4:	4248      	negs	r0, r1
 80092c6:	4148      	adcs	r0, r1
 80092c8:	0480      	lsls	r0, r0, #18
 80092ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80092ce:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 80092d2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 80092d6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80092da:	2b7f      	cmp	r3, #127	; 0x7f
 80092dc:	d92d      	bls.n	800933a <pow+0x1d2>
 80092de:	4b96      	ldr	r3, [pc, #600]	; (8009538 <pow+0x3d0>)
 80092e0:	2000      	movs	r0, #0
 80092e2:	429c      	cmp	r4, r3
 80092e4:	bf08      	it	eq
 80092e6:	4285      	cmpeq	r5, r0
 80092e8:	f43f af7a 	beq.w	80091e0 <pow+0x78>
 80092ec:	f240 31bd 	movw	r1, #957	; 0x3bd
 80092f0:	428a      	cmp	r2, r1
 80092f2:	d80c      	bhi.n	800930e <pow+0x1a6>
 80092f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80092f8:	42a8      	cmp	r0, r5
 80092fa:	41a3      	sbcs	r3, r4
 80092fc:	d204      	bcs.n	8009308 <pow+0x1a0>
 80092fe:	ee31 0b00 	vadd.f64	d0, d1, d0
 8009302:	e79c      	b.n	800923e <pow+0xd6>
 8009304:	2000      	movs	r0, #0
 8009306:	e7e4      	b.n	80092d2 <pow+0x16a>
 8009308:	ee30 0b41 	vsub.f64	d0, d0, d1
 800930c:	e797      	b.n	800923e <pow+0xd6>
 800930e:	2d01      	cmp	r5, #1
 8009310:	eb74 0303 	sbcs.w	r3, r4, r3
 8009314:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009318:	bf34      	ite	cc
 800931a:	2301      	movcc	r3, #1
 800931c:	2300      	movcs	r3, #0
 800931e:	4296      	cmp	r6, r2
 8009320:	bf8c      	ite	hi
 8009322:	2600      	movhi	r6, #0
 8009324:	2601      	movls	r6, #1
 8009326:	42b3      	cmp	r3, r6
 8009328:	f000 809b 	beq.w	8009462 <pow+0x2fa>
 800932c:	b007      	add	sp, #28
 800932e:	ecbd 8b0a 	vpop	{d8-d12}
 8009332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009336:	f000 b98f 	b.w	8009658 <__math_oflow>
 800933a:	f1bc 0f00 	cmp.w	ip, #0
 800933e:	d10b      	bne.n	8009358 <pow+0x1f0>
 8009340:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8009528 <pow+0x3c0>
 8009344:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009348:	ec53 2b17 	vmov	r2, r3, d7
 800934c:	ee17 5a10 	vmov	r5, s14
 8009350:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009354:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8009358:	4b7b      	ldr	r3, [pc, #492]	; (8009548 <pow+0x3e0>)
 800935a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800935e:	4423      	add	r3, r4
 8009360:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009364:	1519      	asrs	r1, r3, #20
 8009366:	0d1b      	lsrs	r3, r3, #20
 8009368:	051b      	lsls	r3, r3, #20
 800936a:	1ae7      	subs	r7, r4, r3
 800936c:	4b77      	ldr	r3, [pc, #476]	; (800954c <pow+0x3e4>)
 800936e:	ee03 1a10 	vmov	s6, r1
 8009372:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8009376:	1e2e      	subs	r6, r5, #0
 8009378:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800937c:	ec47 6b15 	vmov	d5, r6, r7
 8009380:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8009384:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009388:	ed93 7b00 	vldr	d7, [r3]
 800938c:	ed93 5b02 	vldr	d5, [r3, #8]
 8009390:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8009394:	eea3 2b07 	vfma.f64	d2, d3, d7
 8009398:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800939c:	ee36 4b02 	vadd.f64	d4, d6, d2
 80093a0:	ee32 2b44 	vsub.f64	d2, d2, d4
 80093a4:	eea3 7b05 	vfma.f64	d7, d3, d5
 80093a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80093ac:	ee32 2b06 	vadd.f64	d2, d2, d6
 80093b0:	ee37 7b02 	vadd.f64	d7, d7, d2
 80093b4:	ee26 5b05 	vmul.f64	d5, d6, d5
 80093b8:	ee26 0b05 	vmul.f64	d0, d6, d5
 80093bc:	ee34 8b00 	vadd.f64	d8, d4, d0
 80093c0:	eeb0 9b40 	vmov.f64	d9, d0
 80093c4:	ee34 4b48 	vsub.f64	d4, d4, d8
 80093c8:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80093cc:	ee34 ab00 	vadd.f64	d10, d4, d0
 80093d0:	ed93 5b06 	vldr	d5, [r3, #24]
 80093d4:	ee26 bb00 	vmul.f64	d11, d6, d0
 80093d8:	ee37 7b09 	vadd.f64	d7, d7, d9
 80093dc:	ed93 4b08 	vldr	d4, [r3, #32]
 80093e0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80093e4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80093e8:	eea6 5b04 	vfma.f64	d5, d6, d4
 80093ec:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80093f0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80093f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80093f8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80093fc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8009400:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009404:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009408:	eeab 7b05 	vfma.f64	d7, d11, d5
 800940c:	ee38 4b07 	vadd.f64	d4, d8, d7
 8009410:	ee21 6b04 	vmul.f64	d6, d1, d4
 8009414:	ee16 3a90 	vmov	r3, s13
 8009418:	eeb0 5b46 	vmov.f64	d5, d6
 800941c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009420:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8009424:	18b2      	adds	r2, r6, r2
 8009426:	2a3e      	cmp	r2, #62	; 0x3e
 8009428:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800942c:	ee38 8b44 	vsub.f64	d8, d8, d4
 8009430:	ee38 8b07 	vadd.f64	d8, d8, d7
 8009434:	eea1 5b08 	vfma.f64	d5, d1, d8
 8009438:	d91b      	bls.n	8009472 <pow+0x30a>
 800943a:	2a00      	cmp	r2, #0
 800943c:	da0b      	bge.n	8009456 <pow+0x2ee>
 800943e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009442:	ee36 0b00 	vadd.f64	d0, d6, d0
 8009446:	2800      	cmp	r0, #0
 8009448:	f43f aef9 	beq.w	800923e <pow+0xd6>
 800944c:	eeb1 0b40 	vneg.f64	d0, d0
 8009450:	e6f5      	b.n	800923e <pow+0xd6>
 8009452:	2000      	movs	r0, #0
 8009454:	e780      	b.n	8009358 <pow+0x1f0>
 8009456:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800945a:	d909      	bls.n	8009470 <pow+0x308>
 800945c:	2b00      	cmp	r3, #0
 800945e:	f6bf af65 	bge.w	800932c <pow+0x1c4>
 8009462:	b007      	add	sp, #28
 8009464:	ecbd 8b0a 	vpop	{d8-d12}
 8009468:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	f000 b8ec 	b.w	8009648 <__math_uflow>
 8009470:	2600      	movs	r6, #0
 8009472:	4937      	ldr	r1, [pc, #220]	; (8009550 <pow+0x3e8>)
 8009474:	ed91 4b02 	vldr	d4, [r1, #8]
 8009478:	ed91 3b00 	vldr	d3, [r1]
 800947c:	eeb0 7b44 	vmov.f64	d7, d4
 8009480:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009484:	ee17 5a10 	vmov	r5, s14
 8009488:	ee37 7b44 	vsub.f64	d7, d7, d4
 800948c:	ed91 4b04 	vldr	d4, [r1, #16]
 8009490:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8009494:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009498:	ed91 4b06 	vldr	d4, [r1, #24]
 800949c:	18dc      	adds	r4, r3, r3
 800949e:	f104 030f 	add.w	r3, r4, #15
 80094a2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80094a6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80094aa:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80094ae:	ee35 5b06 	vadd.f64	d5, d5, d6
 80094b2:	ee25 6b05 	vmul.f64	d6, d5, d5
 80094b6:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80094ba:	ed91 4b08 	vldr	d4, [r1, #32]
 80094be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80094c2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80094c6:	eea5 4b03 	vfma.f64	d4, d5, d3
 80094ca:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 80094ce:	eea6 7b04 	vfma.f64	d7, d6, d4
 80094d2:	ee26 6b06 	vmul.f64	d6, d6, d6
 80094d6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80094da:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 80094de:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80094e2:	eea5 4b03 	vfma.f64	d4, d5, d3
 80094e6:	1940      	adds	r0, r0, r5
 80094e8:	2700      	movs	r7, #0
 80094ea:	eb17 020c 	adds.w	r2, r7, ip
 80094ee:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80094f2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	d176      	bne.n	80095e8 <pow+0x480>
 80094fa:	42bd      	cmp	r5, r7
 80094fc:	db2a      	blt.n	8009554 <pow+0x3ec>
 80094fe:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8009502:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8009506:	4610      	mov	r0, r2
 8009508:	ec41 0b10 	vmov	d0, r0, r1
 800950c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009510:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009530 <pow+0x3c8>
 8009514:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009518:	b007      	add	sp, #28
 800951a:	ecbd 8b0a 	vpop	{d8-d12}
 800951e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009522:	f000 b8d1 	b.w	80096c8 <__math_check_oflow>
 8009526:	bf00      	nop
 8009528:	00000000 	.word	0x00000000
 800952c:	43300000 	.word	0x43300000
 8009530:	00000000 	.word	0x00000000
 8009534:	7f000000 	.word	0x7f000000
 8009538:	3ff00000 	.word	0x3ff00000
 800953c:	fff00000 	.word	0xfff00000
 8009540:	ffe00000 	.word	0xffe00000
 8009544:	7fe00000 	.word	0x7fe00000
 8009548:	c0196aab 	.word	0xc0196aab
 800954c:	08009d68 	.word	0x08009d68
 8009550:	0800adb0 	.word	0x0800adb0
 8009554:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009558:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800955c:	4610      	mov	r0, r2
 800955e:	ec41 0b15 	vmov	d5, r0, r1
 8009562:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8009566:	ee27 6b05 	vmul.f64	d6, d7, d5
 800956a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800956e:	eeb0 4bc7 	vabs.f64	d4, d7
 8009572:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8009576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80095f8 <pow+0x490>
 800957e:	d52a      	bpl.n	80095d6 <pow+0x46e>
 8009580:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009584:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800958c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009590:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8009594:	bf58      	it	pl
 8009596:	eeb0 4b43 	vmovpl.f64	d4, d3
 800959a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800959e:	ee34 6b43 	vsub.f64	d6, d4, d3
 80095a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80095a6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80095aa:	ee36 6b03 	vadd.f64	d6, d6, d3
 80095ae:	ee36 7b44 	vsub.f64	d7, d6, d4
 80095b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ba:	d104      	bne.n	80095c6 <pow+0x45e>
 80095bc:	4632      	mov	r2, r6
 80095be:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80095c2:	ec43 2b17 	vmov	d7, r2, r3
 80095c6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80095ce:	ee26 6b00 	vmul.f64	d6, d6, d0
 80095d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80095d6:	ee27 0b00 	vmul.f64	d0, d7, d0
 80095da:	b007      	add	sp, #28
 80095dc:	ecbd 8b0a 	vpop	{d8-d12}
 80095e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	f000 b867 	b.w	80096b6 <__math_check_uflow>
 80095e8:	ec43 2b10 	vmov	d0, r2, r3
 80095ec:	eea7 0b00 	vfma.f64	d0, d7, d0
 80095f0:	e625      	b.n	800923e <pow+0xd6>
 80095f2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8009600 <pow+0x498>
 80095f6:	e622      	b.n	800923e <pow+0xd6>
 80095f8:	00000000 	.word	0x00000000
 80095fc:	00100000 	.word	0x00100000
	...

08009608 <__ieee754_sqrt>:
 8009608:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800960c:	4770      	bx	lr

0800960e <with_errno>:
 800960e:	b513      	push	{r0, r1, r4, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	ed8d 0b00 	vstr	d0, [sp]
 8009616:	f7fd fd33 	bl	8007080 <__errno>
 800961a:	ed9d 0b00 	vldr	d0, [sp]
 800961e:	6004      	str	r4, [r0, #0]
 8009620:	b002      	add	sp, #8
 8009622:	bd10      	pop	{r4, pc}

08009624 <xflow>:
 8009624:	b082      	sub	sp, #8
 8009626:	b158      	cbz	r0, 8009640 <xflow+0x1c>
 8009628:	eeb1 7b40 	vneg.f64	d7, d0
 800962c:	ed8d 7b00 	vstr	d7, [sp]
 8009630:	ed9d 7b00 	vldr	d7, [sp]
 8009634:	2022      	movs	r0, #34	; 0x22
 8009636:	ee20 0b07 	vmul.f64	d0, d0, d7
 800963a:	b002      	add	sp, #8
 800963c:	f7ff bfe7 	b.w	800960e <with_errno>
 8009640:	eeb0 7b40 	vmov.f64	d7, d0
 8009644:	e7f2      	b.n	800962c <xflow+0x8>
	...

08009648 <__math_uflow>:
 8009648:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009650 <__math_uflow+0x8>
 800964c:	f7ff bfea 	b.w	8009624 <xflow>
 8009650:	00000000 	.word	0x00000000
 8009654:	10000000 	.word	0x10000000

08009658 <__math_oflow>:
 8009658:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009660 <__math_oflow+0x8>
 800965c:	f7ff bfe2 	b.w	8009624 <xflow>
 8009660:	00000000 	.word	0x00000000
 8009664:	70000000 	.word	0x70000000

08009668 <__math_divzero>:
 8009668:	b082      	sub	sp, #8
 800966a:	2800      	cmp	r0, #0
 800966c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009670:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009674:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009678:	ed8d 7b00 	vstr	d7, [sp]
 800967c:	ed9d 0b00 	vldr	d0, [sp]
 8009680:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009690 <__math_divzero+0x28>
 8009684:	2022      	movs	r0, #34	; 0x22
 8009686:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800968a:	b002      	add	sp, #8
 800968c:	f7ff bfbf 	b.w	800960e <with_errno>
	...

08009698 <__math_invalid>:
 8009698:	eeb0 7b40 	vmov.f64	d7, d0
 800969c:	eeb4 7b47 	vcmp.f64	d7, d7
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80096a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80096ac:	d602      	bvs.n	80096b4 <__math_invalid+0x1c>
 80096ae:	2021      	movs	r0, #33	; 0x21
 80096b0:	f7ff bfad 	b.w	800960e <with_errno>
 80096b4:	4770      	bx	lr

080096b6 <__math_check_uflow>:
 80096b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80096ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096be:	d102      	bne.n	80096c6 <__math_check_uflow+0x10>
 80096c0:	2022      	movs	r0, #34	; 0x22
 80096c2:	f7ff bfa4 	b.w	800960e <with_errno>
 80096c6:	4770      	bx	lr

080096c8 <__math_check_oflow>:
 80096c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80096e8 <__math_check_oflow+0x20>
 80096cc:	eeb0 7bc0 	vabs.f64	d7, d0
 80096d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80096d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d8:	dd02      	ble.n	80096e0 <__math_check_oflow+0x18>
 80096da:	2022      	movs	r0, #34	; 0x22
 80096dc:	f7ff bf97 	b.w	800960e <with_errno>
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	ffffffff 	.word	0xffffffff
 80096ec:	7fefffff 	.word	0x7fefffff

080096f0 <_init>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	bf00      	nop
 80096f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f6:	bc08      	pop	{r3}
 80096f8:	469e      	mov	lr, r3
 80096fa:	4770      	bx	lr

080096fc <_fini>:
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	bf00      	nop
 8009700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009702:	bc08      	pop	{r3}
 8009704:	469e      	mov	lr, r3
 8009706:	4770      	bx	lr
